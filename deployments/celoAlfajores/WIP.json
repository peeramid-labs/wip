{
  "address": "0x0F1E280871f30f70Dbfdb6426D64a1D05B2C8eFf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "onboardingBonus",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        }
      ],
      "name": "FirstCitizenOnboarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "onboardingBonus",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        }
      ],
      "name": "GlobalCitizenOnboarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "country",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "godFather",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "countryName",
          "type": "string"
        }
      ],
      "name": "NewCountryOnboarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        }
      ],
      "name": "ProposalScoreUpdatedByAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "country",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        }
      ],
      "name": "ProposalScoreUpdatedByCountry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalText",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scoreWhenProposed",
          "type": "uint256"
        }
      ],
      "name": "ProposingByAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "country",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalText",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "countryString",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scoreWhenProposed",
          "type": "uint256"
        }
      ],
      "name": "ProposingByCountry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExpired",
          "type": "bool"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "country",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposerCountry",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scoreGiven",
          "type": "uint256"
        }
      ],
      "name": "VotingByAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "country",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposerCountry",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scoreGiven",
          "type": "uint256"
        }
      ],
      "name": "VotingByCountry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "WalletChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "changeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newProposal",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "proposal",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "scoresGiven",
              "type": "uint256"
            }
          ],
          "internalType": "struct VoteElement[]",
          "name": "vote",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "proposals",
          "type": "string[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "proposal",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "scoresGiven",
              "type": "uint256"
            }
          ],
          "internalType": "struct VoteElement[][]",
          "name": "votes",
          "type": "tuple[][]"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "claimBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoDistribution",
      "outputs": [
        {
          "internalType": "contract IDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "state",
          "type": "bytes32"
        }
      ],
      "name": "daos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract GovernanceToken",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dao",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bonusBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verifiedCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DAO",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "name": "getDayProposalCnt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "name": "getNoProposalBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYesterdayProposalCnt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daoDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_worldMultiSig",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOperator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "passportHolders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "citizenship",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "revalidateAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isQualified",
              "type": "bool"
            }
          ],
          "internalType": "struct PassportHolder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "proposal",
          "type": "bytes32"
        }
      ],
      "name": "proposalScores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[21]",
              "name": "pubSignals",
              "type": "uint256[21]"
            }
          ],
          "internalType": "struct IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "verifySelfProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votedToday",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "worldMultiSig",
      "outputs": [
        {
          "internalType": "contract WorldMultiSigV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc49ee4136233044b318b62b1c67980a608e58b3aa7e3ad9fd3b79cda18d2fd75",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0x0F1E280871f30f70Dbfdb6426D64a1D05B2C8eFf",
    "transactionIndex": 1,
    "gasUsed": "4022414",
    "logsBloom": "0x
    "blockHash": "0x089328a79437d60187626a5ad44d775d5cde65bbffb7491600e2390dd77ce053",
    "transactionHash": "0xc49ee4136233044b318b62b1c67980a608e58b3aa7e3ad9fd3b79cda18d2fd75",
    "logs": [],
    "blockNumber": 43565024,
    "cumulativeGasUsed": "4066172",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8a05f3133bc74bc4228c5088b3b87cc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"onboardingBonus\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"FirstCitizenOnboarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"onboardingBonus\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"GlobalCitizenOnboarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"godFather\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"countryName\",\"type\":\"string\"}],\"name\":\"NewCountryOnboarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"}],\"name\":\"ProposalScoreUpdatedByAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"}],\"name\":\"ProposalScoreUpdatedByCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreWhenProposed\",\"type\":\"uint256\"}],\"name\":\"ProposingByAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"countryString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreWhenProposed\",\"type\":\"uint256\"}],\"name\":\"ProposingByCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExpired\",\"type\":\"bool\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposerCountry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreGiven\",\"type\":\"uint256\"}],\"name\":\"VotingByAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposerCountry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scoreGiven\",\"type\":\"uint256\"}],\"name\":\"VotingByCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newProposal\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"scoresGiven\",\"type\":\"uint256\"}],\"internalType\":\"struct VoteElement[]\",\"name\":\"vote\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"proposals\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"scoresGiven\",\"type\":\"uint256\"}],\"internalType\":\"struct VoteElement[][]\",\"name\":\"votes\",\"type\":\"tuple[][]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoDistribution\",\"outputs\":[{\"internalType\":\"contract IDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"state\",\"type\":\"bytes32\"}],\"name\":\"daos\",\"outputs\":[{\"components\":[{\"internalType\":\"contract GovernanceToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedCount\",\"type\":\"uint256\"}],\"internalType\":\"struct DAO\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getDayProposalCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getNoProposalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYesterdayProposalCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_worldMultiSig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOperator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"passportHolders\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"citizenship\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"revalidateAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isQualified\",\"type\":\"bool\"}],\"internalType\":\"struct PassportHolder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposal\",\"type\":\"bytes32\"}],\"name\":\"proposalScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[21]\",\"name\":\"pubSignals\",\"type\":\"uint256[21]\"}],\"internalType\":\"struct IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifySelfProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votedToday\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldMultiSig\",\"outputs\":[{\"internalType\":\"contract WorldMultiSigV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Peeramid Labs, 2024\",\"custom:security-contact\":\"sirt@peeramid.xyz\",\"details\":\"Implements an upgradeable ERC20 token with specialized governance features including:      - Passport verification for citizenship      - Country-specific DAOs and tokens      - Daily proposal submissions      - Cross-country and same-country voting with quadratic/cubic scoring\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"FirstCitizenOnboarded(string,uint256,address)\":{\"params\":{\"citizen\":\"Address of the onboarded citizen\",\"country\":\"Name of the country\",\"onboardingBonus\":\"Amount of tokens given as onboarding bonus\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NewCountryOnboarded(bytes32,address,address,address,string)\":{\"params\":{\"country\":\"Hashed identifier of the country\",\"countryName\":\"Human-readable name of the country\",\"dao\":\"Address of the country's DAO contract\",\"godFather\":\"Address of the first citizen who created the country DAO\",\"token\":\"Address of the country's governance token\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ProposingByAddress(address,uint256,bytes32,string,uint256)\":{\"params\":{\"day\":\"Day number when the proposal was created\",\"proposal\":\"Hash of the proposal\",\"proposalText\":\"Full text of the proposal\",\"proposer\":\"Address of the proposal creator\"}},\"ProposingByCountry(bytes32,uint256,bytes32,string,string,uint256)\":{\"params\":{\"country\":\"Hashed identifier of the proposer's country\",\"countryString\":\"Human-readable name of the country\",\"day\":\"Day number when the proposal was created\",\"proposal\":\"Hash of the proposal\",\"proposalText\":\"Full text of the proposal\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Verified(address,bool)\":{\"params\":{\"citizen\":\"Address of the verified citizen\",\"isExpired\":\"Whether the passport is expired\"}},\"VotingByAddress(address,uint256,bytes32,string,string,uint256)\":{\"params\":{\"country\":\"Country of the voter\",\"day\":\"Day number when the vote was cast\",\"participant\":\"Address of the voter\",\"proposal\":\"Hash of the proposal being voted on\",\"proposerCountry\":\"Country of the proposal creator\",\"scoreGiven\":\"Amount of voting power allocated\"}},\"VotingByCountry(bytes32,uint256,bytes32,address,address,string,uint256)\":{\"params\":{\"country\":\"Hashed identifier of the voter's country\",\"day\":\"Day number when the vote was cast\",\"proposal\":\"Hash of the proposal being voted on\",\"proposer\":\"Address of the proposal creator\",\"proposerCountry\":\"Country of the proposal creator\",\"scoreGiven\":\"Amount of voting power allocated\",\"voter\":\"Address of the voter\"}},\"WalletChanged(address,address)\":{\"params\":{\"newWallet\":\"The new wallet address\",\"oldWallet\":\"The previous wallet address\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"changeWallet(address)\":{\"custom:security\":\"Can only be called by a qualified passport holder who hasn't claimed today\",\"details\":\"Moves citizenship data from the caller to the new wallet address\",\"params\":{\"newWallet\":\"Address of the new wallet\"}},\"claim(string,(bytes32,uint256)[],address)\":{\"custom:security\":\"Uses quadratic voting for same-country proposals and cubic voting for cross-country proposals\",\"details\":\"Handles multiple operations: token claiming, proposal submission, and voting on previous proposals\",\"params\":{\"newProposal\":\"Text of the new proposal being submitted\",\"onBehalfOf\":\"Address to claim/propose/vote on behalf of (if authorized)\",\"vote\":\"Array of VoteElement structs for voting on previous proposals\"}},\"claimBatch(string[],(bytes32,uint256)[][],address[])\":{\"custom:security\":\"Uses quadratic voting for same-country proposals and cubic voting for cross-country proposals\",\"details\":\"Handles multiple operations: token claiming, proposal submission, and voting on previous proposals\",\"params\":{\"accounts\":\"Array of addresses to claim/propose/vote on behalf of (if authorized)\",\"proposals\":\"Array of proposal texts being submitted\",\"votes\":\"Array of VoteElement arrays for voting on previous proposals\"}},\"constructor\":{\"details\":\"Intentionally empty as initialization happens in initialize()\"},\"currentDay()\":{\"details\":\"Used for daily token claiming and proposal tracking\",\"returns\":{\"_0\":\"uint256 Current day number (timestamp / 1 day)\"}},\"daoDistribution()\":{\"returns\":{\"_0\":\"IDistribution The DAO distribution contract\"}},\"daos(bytes32)\":{\"params\":{\"state\":\"Hashed identifier of the country\"},\"returns\":{\"_0\":\"DAO Struct containing governance token and DAO details\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getDayProposalCnt(uint256)\":{\"params\":{\"day\":\"The day number to query\"},\"returns\":{\"_0\":\"uint256 Number of proposals submitted on that day\"}},\"getNoProposalBonus(uint256)\":{\"details\":\"Rewards users who claim after days with no proposals\",\"params\":{\"day\":\"The day to calculate the bonus for\"},\"returns\":{\"_0\":\"uint256 The bonus multiplier (days without proposals squared)\"}},\"getYesterdayProposalCnt()\":{\"returns\":{\"_0\":\"uint256 Number of proposals submitted yesterday\"}},\"initialize(address,address,address,address)\":{\"details\":\"Sets up the contract with required dependencies and initializes the base contracts\",\"params\":{\"_daoDistribution\":\"Address of the DAO distribution contract\",\"_worldMultiSig\":\"Address of the WorldMultiSig contract\",\"initialOperator\":\"Address with initial control of the WorldMultiSig\",\"verifier\":\"Address of the passport verification contract\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nullifiers(uint256)\":{\"params\":{\"nullifier\":\"The nullifier value to check\"},\"returns\":{\"_0\":\"bool True if the nullifier has been used\"}},\"passportHolders(address)\":{\"params\":{\"account\":\"Address to query passport information for\"},\"returns\":{\"_0\":\"PassportHolder Struct containing citizenship data\"}},\"pause()\":{\"details\":\"Can only be called by the WorldMultiSig contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proposalScores(bytes32)\":{\"params\":{\"proposal\":\"Hash of the proposal to query\"},\"returns\":{\"_0\":\"uint256 Current score/votes for the proposal\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"unpause()\":{\"details\":\"Can only be called by the WorldMultiSig contract\"},\"verifySelfProof((uint256[2],uint256[2][2],uint256[2],uint256[21]))\":{\"custom:security\":\"Requires valid proof and non-expired passport\",\"details\":\"Uses zero-knowledge proofs for privacy-preserving verification\",\"params\":{\"proof\":\"The zero-knowledge proof of passport validity\"}},\"votedToday(address)\":{\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"bool True if the account has claimed today\"}},\"worldMultiSig()\":{\"returns\":{\"_0\":\"WorldMultiSigV1 The WorldMultiSig contract for governance control\"}}},\"stateVariables\":{\"CLAIMABLE_AMOUNT\":{\"details\":\"Chosen as it is both square of 8 and cube of 4 for scoring calculations\"}},\"title\":\"World Improvement Proposals (WIP)\",\"version\":1},\"userdoc\":{\"events\":{\"FirstCitizenOnboarded(string,uint256,address)\":{\"notice\":\"Event emitted when the first citizen of a country is onboarded\"},\"NewCountryOnboarded(bytes32,address,address,address,string)\":{\"notice\":\"Event emitted when a new country DAO is created\"},\"ProposingByAddress(address,uint256,bytes32,string,uint256)\":{\"notice\":\"Event for tracking proposals by address\"},\"ProposingByCountry(bytes32,uint256,bytes32,string,string,uint256)\":{\"notice\":\"Event for tracking proposals by country\"},\"Verified(address,bool)\":{\"notice\":\"Event emitted when a passport is verified\"},\"VotingByAddress(address,uint256,bytes32,string,string,uint256)\":{\"notice\":\"Event emitted when a user votes on proposals\"},\"VotingByCountry(bytes32,uint256,bytes32,address,address,string,uint256)\":{\"notice\":\"Event for tracking votes by country\"},\"WalletChanged(address,address)\":{\"notice\":\"Event emitted when a user changes their wallet address\"}},\"kind\":\"user\",\"methods\":{\"changeWallet(address)\":{\"notice\":\"Allows a citizen to transfer their passport to a new wallet\"},\"claim(string,(bytes32,uint256)[],address)\":{\"notice\":\"Main function for claiming daily tokens, submitting proposals, and voting\"},\"claimBatch(string[],(bytes32,uint256)[][],address[])\":{\"notice\":\"Main function for claiming daily tokens, submitting proposals, and voting\"},\"constructor\":{\"notice\":\"Constructor\"},\"currentDay()\":{\"notice\":\"Get the current day number based on timestamp\"},\"daoDistribution()\":{\"notice\":\"Returns the DAODistribution contract instance\"},\"daos(bytes32)\":{\"notice\":\"Retrieves the DAO information for a given country\"},\"getDayProposalCnt(uint256)\":{\"notice\":\"Gets the number of proposals for a specific day\"},\"getNoProposalBonus(uint256)\":{\"notice\":\"Calculates bonus tokens for days without proposals\"},\"getYesterdayProposalCnt()\":{\"notice\":\"Gets the number of proposals from yesterday\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the WIP contract\"},\"nullifiers(uint256)\":{\"notice\":\"Checks if a nullifier has been used\"},\"passportHolders(address)\":{\"notice\":\"Retrieves the passport holder information for a given account\"},\"pause()\":{\"notice\":\"Pauses all contract functions with the whenNotPaused modifier\"},\"proposalScores(bytes32)\":{\"notice\":\"Gets the total score for a proposal\"},\"unpause()\":{\"notice\":\"Unpauses contract functions\"},\"verifySelfProof((uint256[2],uint256[2][2],uint256[2],uint256[21]))\":{\"notice\":\"Verifies a citizen's passport and registers them in the system\"},\"votedToday(address)\":{\"notice\":\"Checks if an account has already claimed tokens today\"},\"worldMultiSig()\":{\"notice\":\"Returns the WorldMultiSig contract instance\"}},\"notice\":\"Main contract for the World Improvement Proposals system, enabling citizenship-based         governance across multiple countries with democratic proposal and voting mechanisms.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WIP.sol\":\"WIP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {DoubleEndedQueue} from \\\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../utils/NoncesUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IGovernor} from \\\"@openzeppelin/contracts/governance/IGovernor.sol\\\";\\nimport {IERC6372} from \\\"@openzeppelin/contracts/interfaces/IERC6372.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended through various modules.\\n *\\n * This contract is abstract and requires several functions to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {_getVotes}\\n * - Additionally, {votingPeriod} must also be implemented\\n */\\nabstract contract GovernorUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, EIP712Upgradeable, NoncesUpgradeable, IGovernor, IERC721Receiver, IERC1155Receiver {\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n\\n    bytes32 public constant BALLOT_TYPEHASH =\\n        keccak256(\\\"Ballot(uint256 proposalId,uint8 support,address voter,uint256 nonce)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\\n        keccak256(\\n            \\\"ExtendedBallot(uint256 proposalId,uint8 support,address voter,uint256 nonce,string reason,bytes params)\\\"\\n        );\\n\\n    struct ProposalCore {\\n        address proposer;\\n        uint48 voteStart;\\n        uint32 voteDuration;\\n        bool executed;\\n        bool canceled;\\n        uint48 etaSeconds;\\n    }\\n\\n    bytes32 private constant ALL_PROPOSAL_STATES_BITMAP = bytes32((2 ** (uint8(type(ProposalState).max) + 1)) - 1);\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Governor\\n    struct GovernorStorage {\\n        string _name;\\n\\n        mapping(uint256 proposalId => ProposalCore) _proposals;\\n\\n        // This queue keeps track of the governor operating on itself. Calls to functions protected by the {onlyGovernance}\\n        // modifier needs to be whitelisted in this queue. Whitelisting is set in {execute}, consumed by the\\n        // {onlyGovernance} modifier and eventually reset after {_executeOperations} completes. This ensures that the\\n        // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\\n        DoubleEndedQueue.Bytes32Deque _governanceCall;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Governor\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GovernorStorageLocation = 0x7c712897014dbe49c045ef1299aa2d5f9e67e48eea4403efa21f1e0f3ac0cb00;\\n\\n    function _getGovernorStorage() private pure returns (GovernorStorage storage $) {\\n        assembly {\\n            $.slot := GovernorStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\\n     * parameter setters in {GovernorSettings} are protected using this modifier.\\n     *\\n     * The governance executing address may be different from the Governor's own address, for example it could be a\\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\\n     * governance protocol (since v4.6).\\n     */\\n    modifier onlyGovernance() {\\n        _checkGovernance();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    function __Governor_init(string memory name_) internal onlyInitializing {\\n        __EIP712_init_unchained(name_, version());\\n        __Governor_init_unchained(name_);\\n    }\\n\\n    function __Governor_init_unchained(string memory name_) internal onlyInitializing {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        $._name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        if (_executor() != address(this)) {\\n            revert GovernorDisabledDeposit();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IGovernor).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        // We read the struct fields into the stack at once so Solidity emits a single SLOAD\\n        ProposalCore storage proposal = $._proposals[proposalId];\\n        bool proposalExecuted = proposal.executed;\\n        bool proposalCanceled = proposal.canceled;\\n\\n        if (proposalExecuted) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposalCanceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert GovernorNonexistentProposal(proposalId);\\n        }\\n\\n        uint256 currentTimepoint = clock();\\n\\n        if (snapshot >= currentTimepoint) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= currentTimepoint) {\\n            return ProposalState.Active;\\n        } else if (!_quorumReached(proposalId) || !_voteSucceeded(proposalId)) {\\n            return ProposalState.Defeated;\\n        } else if (proposalEta(proposalId) == 0) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Queued;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        return $._proposals[proposalId].voteStart;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        return $._proposals[proposalId].voteStart + $._proposals[proposalId].voteDuration;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalProposer}.\\n     */\\n    function proposalProposer(uint256 proposalId) public view virtual returns (address) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        return $._proposals[proposalId].proposer;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalEta}.\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        return $._proposals[proposalId].etaSeconds;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalNeedsQueuing}.\\n     */\\n    function proposalNeedsQueuing(uint256) public view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Reverts if the `msg.sender` is not the executor. In case the executor is not this contract\\n     * itself, the function reverts if `msg.data` is not whitelisted as a result of an {execute}\\n     * operation. See {onlyGovernance}.\\n     */\\n    function _checkGovernance() internal virtual {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        if (_executor() != _msgSender()) {\\n            revert GovernorOnlyExecutor(_msgSender());\\n        }\\n        if (_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\\n            while ($._governanceCall.popFront() != msgDataHash) {}\\n        }\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Get the voting weight of `account` at a specific `timepoint`, for a vote as described by `params`.\\n     */\\n    function _getVotes(address account, uint256 timepoint, bytes memory params) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 totalWeight,\\n        bytes memory params\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @dev Hook that should be called every time the tally for a proposal is updated.\\n     *\\n     * Note: This function must run successfully. Reverts will result in the bricking of governance\\n     */\\n    function _tallyUpdated(uint256 proposalId) internal virtual {}\\n\\n    /**\\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\\n     *\\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\\n     * meaning of the additional params, in the context of that implementation\\n     */\\n    function _defaultParams() internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256) {\\n        address proposer = _msgSender();\\n\\n        // check description restriction\\n        if (!_isValidDescriptionForProposer(proposer, description)) {\\n            revert GovernorRestrictedProposer(proposer);\\n        }\\n\\n        // check proposal threshold\\n        uint256 votesThreshold = proposalThreshold();\\n        if (votesThreshold > 0) {\\n            uint256 proposerVotes = getVotes(proposer, clock() - 1);\\n            if (proposerVotes < votesThreshold) {\\n                revert GovernorInsufficientProposerVotes(proposer, proposerVotes, votesThreshold);\\n            }\\n        }\\n\\n        return _propose(targets, values, calldatas, description, proposer);\\n    }\\n\\n    /**\\n     * @dev Internal propose mechanism. Can be overridden to add more logic on proposal creation.\\n     *\\n     * Emits a {IGovernor-ProposalCreated} event.\\n     */\\n    function _propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description,\\n        address proposer\\n    ) internal virtual returns (uint256 proposalId) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        if (targets.length != values.length || targets.length != calldatas.length || targets.length == 0) {\\n            revert GovernorInvalidProposalLength(targets.length, calldatas.length, values.length);\\n        }\\n        if ($._proposals[proposalId].voteStart != 0) {\\n            revert GovernorUnexpectedProposalState(proposalId, state(proposalId), bytes32(0));\\n        }\\n\\n        uint256 snapshot = clock() + votingDelay();\\n        uint256 duration = votingPeriod();\\n\\n        ProposalCore storage proposal = $._proposals[proposalId];\\n        proposal.proposer = proposer;\\n        proposal.voteStart = SafeCast.toUint48(snapshot);\\n        proposal.voteDuration = SafeCast.toUint32(duration);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            proposer,\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            snapshot + duration,\\n            description\\n        );\\n\\n        // Using a named return variable to avoid stack too deep errors\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-queue}.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Succeeded));\\n\\n        uint48 etaSeconds = _queueOperations(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        if (etaSeconds != 0) {\\n            $._proposals[proposalId].etaSeconds = etaSeconds;\\n            emit ProposalQueued(proposalId, etaSeconds);\\n        } else {\\n            revert GovernorQueueNotImplemented();\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal queuing mechanism. Can be overridden (without a super call) to modify the way queuing is\\n     * performed (for example adding a vault/timelock).\\n     *\\n     * This is empty by default, and must be overridden to implement queuing.\\n     *\\n     * This function returns a timestamp that describes the expected ETA for execution. If the returned value is 0\\n     * (which is the default value), the core will consider queueing did not succeed, and the public {queue} function\\n     * will revert.\\n     *\\n     * NOTE: Calling this function directly will NOT check the current state of the proposal, or emit the\\n     * `ProposalQueued` event. Queuing a proposal should be done using {queue}.\\n     */\\n    function _queueOperations(\\n        uint256 /*proposalId*/,\\n        address[] memory /*targets*/,\\n        uint256[] memory /*values*/,\\n        bytes[] memory /*calldatas*/,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual returns (uint48) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        _validateStateBitmap(\\n            proposalId,\\n            _encodeStateBitmap(ProposalState.Succeeded) | _encodeStateBitmap(ProposalState.Queued)\\n        );\\n\\n        // mark as executed before calls to avoid reentrancy\\n        $._proposals[proposalId].executed = true;\\n\\n        // before execute: register governance call in queue.\\n        if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    $._governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n\\n        _executeOperations(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        // after execute: cleanup governance call queue.\\n        if (_executor() != address(this) && !$._governanceCall.empty()) {\\n            $._governanceCall.clear();\\n        }\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overridden (without a super call) to modify the way execution is\\n     * performed (for example adding a vault/timelock).\\n     *\\n     * NOTE: Calling this function directly will NOT check the current state of the proposal, set the executed flag to\\n     * true or emit the `ProposalExecuted` event. Executing a proposal should be done using {execute} or {_execute}.\\n     */\\n    function _executeOperations(\\n        uint256 /* proposalId */,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-cancel}.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256) {\\n        // The proposalId will be recomputed in the `_cancel` call further down. However we need the value before we\\n        // do the internal call, because we need to check the proposal state BEFORE the internal `_cancel` call\\n        // changes it. The `hashProposal` duplication has a cost that is limited, and that we accept.\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        // public cancel restrictions (on top of existing _cancel restrictions).\\n        _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Pending));\\n        if (_msgSender() != proposalProposer(proposalId)) {\\n            revert GovernorOnlyProposer(_msgSender());\\n        }\\n\\n        return _cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism with minimal restrictions. A proposal can be cancelled in any state other than\\n     * Canceled, Expired, or Executed. Once cancelled a proposal can't be re-submitted.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        GovernorStorage storage $ = _getGovernorStorage();\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        _validateStateBitmap(\\n            proposalId,\\n            ALL_PROPOSAL_STATES_BITMAP ^\\n                _encodeStateBitmap(ProposalState.Canceled) ^\\n                _encodeStateBitmap(ProposalState.Expired) ^\\n                _encodeStateBitmap(ProposalState.Executed)\\n        );\\n\\n        $._proposals[proposalId].canceled = true;\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotes}.\\n     */\\n    function getVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        return _getVotes(account, timepoint, _defaultParams());\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotesWithParams}.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) public view virtual returns (uint256) {\\n        return _getVotes(account, timepoint, params);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        bytes memory signature\\n    ) public virtual returns (uint256) {\\n        bool valid = SignatureChecker.isValidSignatureNow(\\n            voter,\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support, voter, _useNonce(voter)))),\\n            signature\\n        );\\n\\n        if (!valid) {\\n            revert GovernorInvalidSignature(voter);\\n        }\\n\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        string calldata reason,\\n        bytes memory params,\\n        bytes memory signature\\n    ) public virtual returns (uint256) {\\n        bool valid = SignatureChecker.isValidSignatureNow(\\n            voter,\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        EXTENDED_BALLOT_TYPEHASH,\\n                        proposalId,\\n                        support,\\n                        voter,\\n                        _useNonce(voter),\\n                        keccak256(bytes(reason)),\\n                        keccak256(params)\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n\\n        if (!valid) {\\n            revert GovernorInvalidSignature(voter);\\n        }\\n\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, _defaultParams());\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        _validateStateBitmap(proposalId, _encodeStateBitmap(ProposalState.Active));\\n\\n        uint256 totalWeight = _getVotes(account, proposalSnapshot(proposalId), params);\\n        uint256 votedWeight = _countVote(proposalId, account, support, totalWeight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, votedWeight, reason);\\n        } else {\\n            emit VoteCastWithParams(account, proposalId, support, votedWeight, reason, params);\\n        }\\n\\n        _tallyUpdated(proposalId);\\n\\n        return votedWeight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(address target, uint256 value, bytes calldata data) external payable virtual onlyGovernance {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        Address.verifyCallResult(success, returndata);\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        if (_executor() != address(this)) {\\n            revert GovernorDisabledDeposit();\\n        }\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\\n        if (_executor() != address(this)) {\\n            revert GovernorDisabledDeposit();\\n        }\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        if (_executor() != address(this)) {\\n            revert GovernorDisabledDeposit();\\n        }\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev Encodes a `ProposalState` into a `bytes32` representation where each bit enabled corresponds to\\n     * the underlying position in the `ProposalState` enum. For example:\\n     *\\n     * 0x000...10000\\n     *   ^^^^^^------ ...\\n     *         ^----- Succeeded\\n     *          ^---- Defeated\\n     *           ^--- Canceled\\n     *            ^-- Active\\n     *             ^- Pending\\n     */\\n    function _encodeStateBitmap(ProposalState proposalState) internal pure returns (bytes32) {\\n        return bytes32(1 << uint8(proposalState));\\n    }\\n\\n    /**\\n     * @dev Check that the current state of a proposal matches the requirements described by the `allowedStates` bitmap.\\n     * This bitmap should be built using `_encodeStateBitmap`.\\n     *\\n     * If requirements are not met, reverts with a {GovernorUnexpectedProposalState} error.\\n     */\\n    function _validateStateBitmap(uint256 proposalId, bytes32 allowedStates) internal view returns (ProposalState) {\\n        ProposalState currentState = state(proposalId);\\n        if (_encodeStateBitmap(currentState) & allowedStates == bytes32(0)) {\\n            revert GovernorUnexpectedProposalState(proposalId, currentState, allowedStates);\\n        }\\n        return currentState;\\n    }\\n\\n    /*\\n     * @dev Check if the proposer is authorized to submit a proposal with the given description.\\n     *\\n     * If the proposal description ends with `#proposer=0x???`, where `0x???` is an address written as a hex string\\n     * (case insensitive), then the submission of this proposal will only be authorized to said address.\\n     *\\n     * This is used for frontrunning protection. By adding this pattern at the end of their proposal, one can ensure\\n     * that no other address can submit the same proposal. An attacker would have to either remove or change that part,\\n     * which would result in a different proposal id.\\n     *\\n     * If the description does not match this pattern, it is unrestricted and anyone can submit it. This includes:\\n     * - If the `0x???` part is not a valid hex string.\\n     * - If the `0x???` part is a valid hex string, but does not contain exactly 40 hex digits.\\n     * - If it ends with the expected suffix followed by newlines or other whitespace.\\n     * - If it ends with some other similar suffix, e.g. `#other=abc`.\\n     * - If it does not end with any such suffix.\\n     */\\n    function _isValidDescriptionForProposer(\\n        address proposer,\\n        string memory description\\n    ) internal view virtual returns (bool) {\\n        unchecked {\\n            uint256 length = bytes(description).length;\\n\\n            // Length is too short to contain a valid proposer suffix\\n            if (length < 52) {\\n                return true;\\n            }\\n\\n            // Extract what would be the `#proposer=` marker beginning the suffix\\n            bytes10 marker = bytes10(_unsafeReadBytesOffset(bytes(description), length - 52));\\n\\n            // If the marker is not found, there is no proposer suffix to check\\n            if (marker != bytes10(\\\"#proposer=\\\")) {\\n                return true;\\n            }\\n\\n            // Check that the last 42 characters (after the marker) are a properly formatted address.\\n            (bool success, address recovered) = Strings.tryParseAddress(description, length - 42, length);\\n            return !success || recovered == proposer;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC6372\\n     */\\n    function clock() public view virtual returns (uint48);\\n\\n    /**\\n     * @inheritdoc IERC6372\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory);\\n\\n    /**\\n     * @inheritdoc IGovernor\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @inheritdoc IGovernor\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @inheritdoc IGovernor\\n     */\\n    function quorum(uint256 timepoint) public view virtual returns (uint256);\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a5b3ccb0421b6a1275e109bfa9f140afa2ceb97a37b3966b5f418979744d653\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {GovernorUpgradeable} from \\\"../GovernorUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n */\\nabstract contract GovernorCountingSimpleUpgradeable is Initializable, GovernorUpgradeable {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address voter => bool) hasVoted;\\n    }\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.GovernorCountingSimple\\n    struct GovernorCountingSimpleStorage {\\n        mapping(uint256 proposalId => ProposalVote) _proposalVotes;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.GovernorCountingSimple\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GovernorCountingSimpleStorageLocation = 0xa1cefa0f43667ef127a258e673c94202a79b656e62899531c4376d87a7f39800;\\n\\n    function _getGovernorCountingSimpleStorage() private pure returns (GovernorCountingSimpleStorage storage $) {\\n        assembly {\\n            $.slot := GovernorCountingSimpleStorageLocation\\n        }\\n    }\\n\\n    function __GovernorCountingSimple_init() internal onlyInitializing {\\n    }\\n\\n    function __GovernorCountingSimple_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        GovernorCountingSimpleStorage storage $ = _getGovernorCountingSimpleStorage();\\n        return $._proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\\n        GovernorCountingSimpleStorage storage $ = _getGovernorCountingSimpleStorage();\\n        ProposalVote storage proposalVote = $._proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        GovernorCountingSimpleStorage storage $ = _getGovernorCountingSimpleStorage();\\n        ProposalVote storage proposalVote = $._proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        GovernorCountingSimpleStorage storage $ = _getGovernorCountingSimpleStorage();\\n        ProposalVote storage proposalVote = $._proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 totalWeight,\\n        bytes memory // params\\n    ) internal virtual override returns (uint256) {\\n        GovernorCountingSimpleStorage storage $ = _getGovernorCountingSimpleStorage();\\n        ProposalVote storage proposalVote = $._proposalVotes[proposalId];\\n\\n        if (proposalVote.hasVoted[account]) {\\n            revert GovernorAlreadyCastVote(account);\\n        }\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += totalWeight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += totalWeight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += totalWeight;\\n        } else {\\n            revert GovernorInvalidVoteType();\\n        }\\n\\n        return totalWeight;\\n    }\\n}\\n\",\"keccak256\":\"0x856c35bf81712a0737b59d4613069b50c3cb3551815309f963d4407b5095f81b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {GovernorUpgradeable} from \\\"../GovernorUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n */\\nabstract contract GovernorSettingsUpgradeable is Initializable, GovernorUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.GovernorSettings\\n    struct GovernorSettingsStorage {\\n        // amount of token\\n        uint256 _proposalThreshold;\\n        // timepoint: limited to uint48 in core (same as clock() type)\\n        uint48 _votingDelay;\\n        // duration: limited to uint32 in core\\n        uint32 _votingPeriod;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.GovernorSettings\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GovernorSettingsStorageLocation = 0x00d7616c8fe29c6c2fbe1d0c5bc8f2faa4c35b43746e70b24b4d532752affd00;\\n\\n    function _getGovernorSettingsStorage() private pure returns (GovernorSettingsStorage storage $) {\\n        assembly {\\n            $.slot := GovernorSettingsStorageLocation\\n        }\\n    }\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    function __GovernorSettings_init(uint48 initialVotingDelay, uint32 initialVotingPeriod, uint256 initialProposalThreshold) internal onlyInitializing {\\n        __GovernorSettings_init_unchained(initialVotingDelay, initialVotingPeriod, initialProposalThreshold);\\n    }\\n\\n    function __GovernorSettings_init_unchained(uint48 initialVotingDelay, uint32 initialVotingPeriod, uint256 initialProposalThreshold) internal onlyInitializing {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        GovernorSettingsStorage storage $ = _getGovernorSettingsStorage();\\n        return $._votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        GovernorSettingsStorage storage $ = _getGovernorSettingsStorage();\\n        return $._votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        GovernorSettingsStorage storage $ = _getGovernorSettingsStorage();\\n        return $._proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint48 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint32 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint48 newVotingDelay) internal virtual {\\n        GovernorSettingsStorage storage $ = _getGovernorSettingsStorage();\\n        emit VotingDelaySet($._votingDelay, newVotingDelay);\\n        $._votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint32 newVotingPeriod) internal virtual {\\n        GovernorSettingsStorage storage $ = _getGovernorSettingsStorage();\\n        if (newVotingPeriod == 0) {\\n            revert GovernorInvalidVotingPeriod(0);\\n        }\\n        emit VotingPeriodSet($._votingPeriod, newVotingPeriod);\\n        $._votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        GovernorSettingsStorage storage $ = _getGovernorSettingsStorage();\\n        emit ProposalThresholdSet($._proposalThreshold, newProposalThreshold);\\n        $._proposalThreshold = newProposalThreshold;\\n    }\\n}\\n\",\"keccak256\":\"0x2bfac877022e16e6e607e8921c2f1eb1078750b8c9d679945f437dcc5cb9c086\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {GovernorUpgradeable} from \\\"../GovernorUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that implements storage of proposal details. This modules also provides primitives for\\n * the enumerability of proposals.\\n *\\n * Use cases for this module include:\\n * - UIs that explore the proposal state without relying on event indexing.\\n * - Using only the proposalId as an argument in the {Governor-queue} and {Governor-execute} functions for L2 chains\\n *   where storage is cheap compared to calldata.\\n */\\nabstract contract GovernorStorageUpgradeable is Initializable, GovernorUpgradeable {\\n    struct ProposalDetails {\\n        address[] targets;\\n        uint256[] values;\\n        bytes[] calldatas;\\n        bytes32 descriptionHash;\\n    }\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.GovernorStorage\\n    struct GovernorStorageStorage {\\n        uint256[] _proposalIds;\\n        mapping(uint256 proposalId => ProposalDetails) _proposalDetails;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.GovernorStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GovernorStorageStorageLocation = 0x7fd223d3380145bd26132714391e777c488a0df7ac2dd4b66419d8549fb3a600;\\n\\n    function _getGovernorStorageStorage() private pure returns (GovernorStorageStorage storage $) {\\n        assembly {\\n            $.slot := GovernorStorageStorageLocation\\n        }\\n    }\\n\\n    function __GovernorStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __GovernorStorage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Hook into the proposing mechanism\\n     */\\n    function _propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description,\\n        address proposer\\n    ) internal virtual override returns (uint256) {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        uint256 proposalId = super._propose(targets, values, calldatas, description, proposer);\\n\\n        // store\\n        $._proposalIds.push(proposalId);\\n        $._proposalDetails[proposalId] = ProposalDetails({\\n            targets: targets,\\n            values: values,\\n            calldatas: calldatas,\\n            descriptionHash: keccak256(bytes(description))\\n        });\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Version of {IGovernorTimelock-queue} with only `proposalId` as an argument.\\n     */\\n    function queue(uint256 proposalId) public virtual {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        // here, using storage is more efficient than memory\\n        ProposalDetails storage details = $._proposalDetails[proposalId];\\n        queue(details.targets, details.values, details.calldatas, details.descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Version of {IGovernor-execute} with only `proposalId` as an argument.\\n     */\\n    function execute(uint256 proposalId) public payable virtual {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        // here, using storage is more efficient than memory\\n        ProposalDetails storage details = $._proposalDetails[proposalId];\\n        execute(details.targets, details.values, details.calldatas, details.descriptionHash);\\n    }\\n\\n    /**\\n     * @dev ProposalId version of {IGovernor-cancel}.\\n     */\\n    function cancel(uint256 proposalId) public virtual {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        // here, using storage is more efficient than memory\\n        ProposalDetails storage details = $._proposalDetails[proposalId];\\n        cancel(details.targets, details.values, details.calldatas, details.descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Returns the number of stored proposals.\\n     */\\n    function proposalCount() public view virtual returns (uint256) {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        return $._proposalIds.length;\\n    }\\n\\n    /**\\n     * @dev Returns the details of a proposalId. Reverts if `proposalId` is not a known proposal.\\n     */\\n    function proposalDetails(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\\n    {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        // here, using memory is more efficient than storage\\n        ProposalDetails memory details = $._proposalDetails[proposalId];\\n        if (details.descriptionHash == 0) {\\n            revert GovernorNonexistentProposal(proposalId);\\n        }\\n        return (details.targets, details.values, details.calldatas, details.descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Returns the details (including the proposalId) of a proposal given its sequential index.\\n     */\\n    function proposalDetailsAt(\\n        uint256 index\\n    )\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 proposalId,\\n            address[] memory targets,\\n            uint256[] memory values,\\n            bytes[] memory calldatas,\\n            bytes32 descriptionHash\\n        )\\n    {\\n        GovernorStorageStorage storage $ = _getGovernorStorageStorage();\\n        proposalId = $._proposalIds[index];\\n        (targets, values, calldatas, descriptionHash) = proposalDetails(proposalId);\\n    }\\n}\\n\",\"keccak256\":\"0xacabc6dbfe427faddc85c10f7875ae3dfbcbca1312399a4780c4df23c9529af9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {GovernorVotesUpgradeable} from \\\"./GovernorVotesUpgradeable.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n */\\nabstract contract GovernorVotesQuorumFractionUpgradeable is Initializable, GovernorVotesUpgradeable {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.GovernorVotesQuorumFraction\\n    struct GovernorVotesQuorumFractionStorage {\\n        Checkpoints.Trace208 _quorumNumeratorHistory;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.GovernorVotesQuorumFraction\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GovernorVotesQuorumFractionStorageLocation = 0xe770710421fd2cad75ad828c61aa98f2d77d423a440b67872d0f65554148e000;\\n\\n    function _getGovernorVotesQuorumFractionStorage() private pure returns (GovernorVotesQuorumFractionStorage storage $) {\\n        assembly {\\n            $.slot := GovernorVotesQuorumFractionStorageLocation\\n        }\\n    }\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev The quorum set is not a valid fraction.\\n     */\\n    error GovernorInvalidQuorumFraction(uint256 quorumNumerator, uint256 quorumDenominator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    function __GovernorVotesQuorumFraction_init(uint256 quorumNumeratorValue) internal onlyInitializing {\\n        __GovernorVotesQuorumFraction_init_unchained(quorumNumeratorValue);\\n    }\\n\\n    function __GovernorVotesQuorumFraction_init_unchained(uint256 quorumNumeratorValue) internal onlyInitializing {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        GovernorVotesQuorumFractionStorage storage $ = _getGovernorVotesQuorumFractionStorage();\\n        return $._quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\\n        GovernorVotesQuorumFractionStorage storage $ = _getGovernorVotesQuorumFractionStorage();\\n        uint256 length = $._quorumNumeratorHistory._checkpoints.length;\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint208 storage latest = $._quorumNumeratorHistory._checkpoints[length - 1];\\n        uint48 latestKey = latest._key;\\n        uint208 latestValue = latest._value;\\n        if (latestKey <= timepoint) {\\n            return latestValue;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return $._quorumNumeratorHistory.upperLookupRecent(SafeCast.toUint48(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\\n        return (token().getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        GovernorVotesQuorumFractionStorage storage $ = _getGovernorVotesQuorumFractionStorage();\\n        uint256 denominator = quorumDenominator();\\n        if (newQuorumNumerator > denominator) {\\n            revert GovernorInvalidQuorumFraction(newQuorumNumerator, denominator);\\n        }\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n        $._quorumNumeratorHistory.push(clock(), SafeCast.toUint208(newQuorumNumerator));\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\",\"keccak256\":\"0x56bef5c683c61ecb498f1d869f68c09d9f669a6d05113336f6fcd54213d05766\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {GovernorUpgradeable} from \\\"../GovernorUpgradeable.sol\\\";\\nimport {IVotes} from \\\"@openzeppelin/contracts/governance/utils/IVotes.sol\\\";\\nimport {IERC5805} from \\\"@openzeppelin/contracts/interfaces/IERC5805.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Time} from \\\"@openzeppelin/contracts/utils/types/Time.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes}\\n * token.\\n */\\nabstract contract GovernorVotesUpgradeable is Initializable, GovernorUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.GovernorVotes\\n    struct GovernorVotesStorage {\\n        IERC5805 _token;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.GovernorVotes\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GovernorVotesStorageLocation = 0x3ba4977254e415696610a40ebf2258dbfa0ec6a2ff64e84bfe715ff16977cc00;\\n\\n    function _getGovernorVotesStorage() private pure returns (GovernorVotesStorage storage $) {\\n        assembly {\\n            $.slot := GovernorVotesStorageLocation\\n        }\\n    }\\n\\n    function __GovernorVotes_init(IVotes tokenAddress) internal onlyInitializing {\\n        __GovernorVotes_init_unchained(tokenAddress);\\n    }\\n\\n    function __GovernorVotes_init_unchained(IVotes tokenAddress) internal onlyInitializing {\\n        GovernorVotesStorage storage $ = _getGovernorVotesStorage();\\n        $._token = IERC5805(address(tokenAddress));\\n    }\\n\\n    /**\\n     * @dev The token that voting power is sourced from.\\n     */\\n    function token() public view virtual returns (IERC5805) {\\n        GovernorVotesStorage storage $ = _getGovernorVotesStorage();\\n        return $._token;\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in ERC-6372) is set to match the token's clock. Fallback to block numbers if the token\\n     * does not implement ERC-6372.\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        try token().clock() returns (uint48 timepoint) {\\n            return timepoint;\\n        } catch {\\n            return Time.blockNumber();\\n        }\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        try token().CLOCK_MODE() returns (string memory clockmode) {\\n            return clockmode;\\n        } catch {\\n            return \\\"mode=blocknumber&from=default\\\";\\n        }\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token().getPastVotes(account, timepoint);\\n    }\\n}\\n\",\"keccak256\":\"0x2e1132724531629be346c90bf1213eea6ec6c12bb34e6889027818b3bb3a7f69\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (governance/utils/Votes.sol)\\npragma solidity ^0.8.20;\\n\\nimport {IERC5805} from \\\"@openzeppelin/contracts/interfaces/IERC5805.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../../utils/NoncesUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Time} from \\\"@openzeppelin/contracts/utils/types/Time.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\\n * \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in\\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\\n *\\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\\n * example, see {ERC721Votes}.\\n *\\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\\n * cost of this history tracking optional.\\n *\\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\\n * previous example, it would be included in {ERC721-_update}).\\n */\\nabstract contract VotesUpgradeable is Initializable, ContextUpgradeable, EIP712Upgradeable, NoncesUpgradeable, IERC5805 {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 private constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Votes\\n    struct VotesStorage {\\n        mapping(address account => address) _delegatee;\\n\\n        mapping(address delegatee => Checkpoints.Trace208) _delegateCheckpoints;\\n\\n        Checkpoints.Trace208 _totalCheckpoints;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Votes\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant VotesStorageLocation = 0xe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d00;\\n\\n    function _getVotesStorage() private pure returns (VotesStorage storage $) {\\n        assembly {\\n            $.slot := VotesStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The clock was incorrectly modified.\\n     */\\n    error ERC6372InconsistentClock();\\n\\n    /**\\n     * @dev Lookup to future votes is not available.\\n     */\\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\\n\\n    function __Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\\n     */\\n    function clock() public view virtual returns (uint48) {\\n        return Time.blockNumber();\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory) {\\n        // Check that the clock was not modified\\n        if (clock() != Time.blockNumber()) {\\n            revert ERC6372InconsistentClock();\\n        }\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Validate that a timepoint is in the past, and return it as a uint48.\\n     */\\n    function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        return SafeCast.toUint48(timepoint);\\n    }\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].latest();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the current total supply of votes.\\n     */\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegatee[account];\\n    }\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        address account = _msgSender();\\n        _delegate(account, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > expiry) {\\n            revert VotesExpiredSignature(expiry);\\n        }\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        _useCheckedNonce(signer, nonce);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address account, address delegatee) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        address oldDelegate = delegates(account);\\n        $._delegatee[account] = delegatee;\\n\\n        emit DelegateChanged(account, oldDelegate, delegatee);\\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\\n    }\\n\\n    /**\\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\\n     */\\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from == address(0)) {\\n            _push($._totalCheckpoints, _add, SafeCast.toUint208(amount));\\n        }\\n        if (to == address(0)) {\\n            _push($._totalCheckpoints, _subtract, SafeCast.toUint208(amount));\\n        }\\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Moves delegated votes from one delegate to another.\\n     */\\n    function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from != to && amount > 0) {\\n            if (from != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[from],\\n                    _subtract,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(from, oldValue, newValue);\\n            }\\n            if (to != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[to],\\n                    _add,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(to, oldValue, newValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return SafeCast.toUint32($._delegateCheckpoints[account].length());\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function _checkpoints(\\n        address account,\\n        uint32 pos\\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].at(pos);\\n    }\\n\\n    function _push(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint208 delta\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        return store.push(clock(), op(store.latest(), delta));\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Must return the voting units held by an account.\\n     */\\n    function _getVotingUnits(address) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe031deb896a4cf2dbfad99a6d3c926b5000953033a4da11aa74a69c29c1724b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c54228bbb2f1f8616179c51bdb90b7960f4a3414c390ad5c6ead6763eb55a59\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0xe74dd150d031e8ecf9755893a2aae02dec954158140424f11c28ff689a48492f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../../../utils/NoncesUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable, NoncesUpgradeable {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0x4c6100a8ab53ef249c937067f7d9779ee0966fb55b39903628c169428fdeee76\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {VotesUpgradeable} from \\\"../../../governance/utils/VotesUpgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\\n * power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, ERC20Upgradeable, VotesUpgradeable {\\n    /**\\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\\n     */\\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\\n\\n    function __ERC20Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\\n     *\\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\\n     * returned.\\n     */\\n    function _maxSupply() internal view virtual returns (uint256) {\\n        return type(uint208).max;\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n        if (from == address(0)) {\\n            uint256 supply = totalSupply();\\n            uint256 cap = _maxSupply();\\n            if (supply > cap) {\\n                revert ERC20ExceededSafeSupply(supply, cap);\\n            }\\n        }\\n        _transferVotingUnits(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Returns the voting units of an `account`.\\n     *\\n     * WARNING: Overriding this function may compromise the internal vote accounting.\\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\\n     */\\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return _numCheckpoints(account);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _checkpoints(account, pos);\\n    }\\n}\\n\",\"keccak256\":\"0xd29cb0592b4aadc1ba10795eff133e7459d5d54fdca3972c1d55ff26cfa49f34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract NoncesUpgradeable is Initializable {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\\n    struct NoncesStorage {\\n        mapping(address account => uint256) _nonces;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Nonces\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\\n\\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\\n        assembly {\\n            $.slot := NoncesStorageLocation\\n        }\\n    }\\n\\n    function __Nonces_init() internal onlyInitializing {\\n    }\\n\\n    function __Nonces_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        return $._nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return $._nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a618cd9a1eea21201ec2ed8484080ca6225215e8883723bef34b9dcf22aa3b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC6372} from \\\"../interfaces/IERC6372.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * NOTE: Event parameters lack the `indexed` keyword for compatibility with GovernorBravo events.\\n * Making event parameters `indexed` affects how events are decoded, potentially breaking existing indexers.\\n */\\ninterface IGovernor is IERC165, IERC6372 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Empty proposal or a mismatch between the parameters length for a proposal call.\\n     */\\n    error GovernorInvalidProposalLength(uint256 targets, uint256 calldatas, uint256 values);\\n\\n    /**\\n     * @dev The vote was already cast.\\n     */\\n    error GovernorAlreadyCastVote(address voter);\\n\\n    /**\\n     * @dev Token deposits are disabled in this contract.\\n     */\\n    error GovernorDisabledDeposit();\\n\\n    /**\\n     * @dev The `account` is not a proposer.\\n     */\\n    error GovernorOnlyProposer(address account);\\n\\n    /**\\n     * @dev The `account` is not the governance executor.\\n     */\\n    error GovernorOnlyExecutor(address account);\\n\\n    /**\\n     * @dev The `proposalId` doesn't exist.\\n     */\\n    error GovernorNonexistentProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The current state of a proposal is not the required for performing an operation.\\n     * The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position\\n     * counting from right to left.\\n     *\\n     * NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist).\\n     * This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated).\\n     *\\n     * See {Governor-_encodeStateBitmap}.\\n     */\\n    error GovernorUnexpectedProposalState(uint256 proposalId, ProposalState current, bytes32 expectedStates);\\n\\n    /**\\n     * @dev The voting period set is not a valid period.\\n     */\\n    error GovernorInvalidVotingPeriod(uint256 votingPeriod);\\n\\n    /**\\n     * @dev The `proposer` does not have the required votes to create a proposal.\\n     */\\n    error GovernorInsufficientProposerVotes(address proposer, uint256 votes, uint256 threshold);\\n\\n    /**\\n     * @dev The `proposer` is not allowed to create a proposal.\\n     */\\n    error GovernorRestrictedProposer(address proposer);\\n\\n    /**\\n     * @dev The vote type used is not valid for the corresponding counting module.\\n     */\\n    error GovernorInvalidVoteType();\\n\\n    /**\\n     * @dev The provided params buffer is not supported by the counting module.\\n     */\\n    error GovernorInvalidVoteParams();\\n\\n    /**\\n     * @dev Queue operation is not implemented for this governor. Execute should be called directly.\\n     */\\n    error GovernorQueueNotImplemented();\\n\\n    /**\\n     * @dev The proposal hasn't been queued yet.\\n     */\\n    error GovernorNotQueuedProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The proposal has already been queued.\\n     */\\n    error GovernorAlreadyQueuedProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The provided signature is not valid for the expected `voter`.\\n     * If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}.\\n     */\\n    error GovernorInvalidSignature(address voter);\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is queued.\\n     */\\n    event ProposalQueued(uint256 proposalId, uint256 etaSeconds);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their interpretation  also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the EIP-712 domain separator).\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the EIP-712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() external view returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external pure returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) external view returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The number of votes required in order for a voter to become a proposer.\\n     */\\n    function proposalThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The account that created a proposal.\\n     */\\n    function proposalProposer(uint256 proposalId) external view returns (address);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The time when a queued proposal becomes executable (\\\"ETA\\\"). Unlike {proposalSnapshot} and\\n     * {proposalDeadline}, this doesn't use the governor clock, and instead relies on the executor's clock which may be\\n     * different. In most cases this will be a timestamp.\\n     */\\n    function proposalEta(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Whether a proposal needs to be queued before execution.\\n     */\\n    function proposalNeedsQueuing(uint256 proposalId) external view returns (bool);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\\n     * on the clock (see ERC-6372) this contract uses.\\n     *\\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\\n     * proposal starts.\\n     *\\n     * NOTE: While this interface returns a uint256, timepoints are stored as uint48 following the ERC-6372 clock type.\\n     * Consequently this value must fit in a uint48 (when added to the current clock). See {IERC6372-clock}.\\n     */\\n    function votingDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock\\n     * (see ERC-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     *\\n     * NOTE: This value is stored when the proposal is submitted so that possible changes to the value do not affect\\n     * proposals that have already been submitted. The type used to save it is a uint32. Consequently, while this\\n     * interface returns a uint256, the value it returns should fit in a uint32.\\n     */\\n    function votingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     *\\n     * NOTE: The state of the Governor and `targets` may change between the proposal creation and its execution.\\n     * This may be the result of third party actions on the targeted contracts, or other governor proposals.\\n     * For example, the balance of this contract could be updated or its access control permissions may be modified,\\n     * possibly compromising the proposal's ability to execute successfully (e.g. the governor doesn't have enough\\n     * value to cover a proposal with multiple transfers).\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Queue a proposal. Some governors require this step to be performed before execution can happen. If queuing\\n     * is not necessary, this function may revert.\\n     * Queuing a proposal requires the quorum to be reached, the vote to be successful, and the deadline to be reached.\\n     *\\n     * Emits a {ProposalQueued} event.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached. Depending on the governor it might also be required that the proposal was queued and\\n     * that some delay passed.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * NOTE: Some modules can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external payable returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\\n     * before the vote starts.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the voter's signature, including ERC-1271 signature support.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        bytes memory signature\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the voter's signature,\\n     * including ERC-1271 signature support.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        string calldata reason,\\n        bytes memory params,\\n        bytes memory signature\\n    ) external returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x9406604436e6925413ab70149fec16f3b28cc9e492b2baaa09c0acefd315b2a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4aaaf1c0737dd16e81f0d2b9833c549747a5ede6873bf1444bc72aa572d03e98\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IVotes} from \\\"../governance/utils/IVotes.sol\\\";\\nimport {IERC6372} from \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\",\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Create2} from \\\"../utils/Create2.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    error CloneArgumentsTooLong();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        return clone(implementation, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\\n     * to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function clone(address implementation, uint256 value) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(value, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        return cloneDeterministic(implementation, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\\n     * a `value` parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(value, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\\n        return cloneWithImmutableArgs(implementation, args, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\\n     * parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        assembly (\\\"memory-safe\\\") {\\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\\n     * at the same address.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\\n     * but with a `value` parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.deploy(value, salt, bytecode);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Get the immutable args attached to a clone.\\n     *\\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\\n     *   function will return an empty array.\\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\\n     *   creation.\\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\\n     *   function should only be used to check addresses that are known to be clones.\\n     */\\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\\n        assembly (\\\"memory-safe\\\") {\\n            extcodecopy(instance, add(result, 32), 45, mload(result))\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\\n     *\\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\\n     * abi.encodePacked is more expensive but also more portable and easier to review.\\n     *\\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\\n     */\\n    function _cloneCodeWithImmutableArgs(\\n        address implementation,\\n        bytes memory args\\n    ) private pure returns (bytes memory) {\\n        if (args.length > 24531) revert CloneArgumentsTooLong();\\n        return\\n            abi.encodePacked(\\n                hex\\\"61\\\",\\n                uint16(args.length + 45),\\n                hex\\\"3d81600a3d39f3363d3d373d3d3d363d73\\\",\\n                implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                args\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x83b10b9c4f3117f1bff30c49bc486d719de88c8425fe646bc8a5f998ee44ceb9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address implementation, bytes memory _data) payable {\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa3066ff86b94128a9d3956a63a0511fa1aae41bd455772ab587b32ff322acb2e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {ITransparentUpgradeableProxy} from \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev Sets the initial owner who can perform upgrades.\\n     */\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    function upgradeAndCall(\\n        ITransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x46f86003755f50eff00a7c5aaf493ae62e024142b8aec4493a313851d3c14872\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\nimport {ERC1967Proxy} from \\\"../ERC1967/ERC1967Proxy.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {ProxyAdmin} from \\\"./ProxyAdmin.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n    /// @dev See {UUPSUpgradeable-upgradeToAndCall}\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\\n * the proxy admin cannot fallback to the target implementation.\\n *\\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\\n *\\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\\n * undesirable state where the admin slot is different from the actual admin. Relying on the value of the admin slot\\n * is generally fine if the implementation is trusted.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\\n    // at the expense of removing the ability to change the admin once it's set.\\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\\n    // with its own ability to transfer the permissions to another account.\\n    address private immutable _admin;\\n\\n    /**\\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\\n     */\\n    error ProxyDeniedAdminAccess();\\n\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\\n     * {ERC1967Proxy-constructor}.\\n     */\\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\n        _admin = address(new ProxyAdmin(initialOwner));\\n        // Set the storage value and emit an event for ERC-1967 compatibility\\n        ERC1967Utils.changeAdmin(_proxyAdmin());\\n    }\\n\\n    /**\\n     * @dev Returns the admin of this proxy.\\n     */\\n    function _proxyAdmin() internal view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _proxyAdmin()) {\\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                revert ProxyDeniedAdminAccess();\\n            } else {\\n                _dispatchUpgradeToAndCall();\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    function _dispatchUpgradeToAndCall() private {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x92579f452fe663595a898cbac85d80bb3868a6c9f034f19ba7fbebdfa3b65a4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Utils} from \\\"./utils/ERC1155Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\\n            } else {\\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly (\\\"memory-safe\\\") {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22933f0f4897ff70a991c3baebfbc2574fd052dc4bae7fcafec45b07c1f23dd3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68d6fdbeb467192c3627a46aa7bf5cbb73267363b740abc511f521a5a41a446e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xdfab949ba677f4b122d0c14225e6db7ca8a65524e2f00049e57b04f68eceeb87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x35d120c427299af1525aaf07955314d9e36a62f14408eb93dec71a2e001f74d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\nimport {IERC1155Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-1155 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC1155Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155-onERC1155Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155-onERC1155BatchReceived}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x30afe9013aaeb3ba735284a9310792776f57a3b2db6fc1d99628f2c47287f5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9586854de33dc9d3a7160cad8170fdfb4119d02a44bad90ba16d71d701cc92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\" // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        if (signer.code.length == 0) {\\n            (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(hash, signature);\\n            return err == ECDSA.RecoverError.NoError && recovered == signer;\\n        } else {\\n            return isValidERC1271SignatureNow(signer, hash, signature);\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC-1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224 oldValue, uint224 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224 oldValue, uint224 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint224 storage last = _unsafeAccess(self, pos - 1);\\n            uint32 lastKey = last._key;\\n            uint224 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace208 storage self,\\n        uint48 key,\\n        uint208 value\\n    ) internal returns (uint208 oldValue, uint208 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint208 value\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint208 storage last = _unsafeAccess(self, pos - 1);\\n            uint48 lastKey = last._key;\\n            uint208 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160 oldValue, uint160 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160 oldValue, uint160 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint160 storage last = _unsafeAccess(self, pos - 1);\\n            uint96 lastKey = last._key;\\n            uint160 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66364cd3247ea71cdb58f080f5d5ed6732433a8001413139661841535494692f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```solidity\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\\n     */\\n    struct Bytes32Deque {\\n        uint128 _begin;\\n        uint128 _end;\\n        mapping(uint128 index => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     *\\n     * Reverts with {Panic-RESOURCE_ERROR} if the queue is full.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        unchecked {\\n            uint128 backIndex = deque._end;\\n            if (backIndex + 1 == deque._begin) Panic.panic(Panic.RESOURCE_ERROR);\\n            deque._data[backIndex] = value;\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with {Panic-EMPTY_ARRAY_POP} if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        unchecked {\\n            uint128 backIndex = deque._end;\\n            if (backIndex == deque._begin) Panic.panic(Panic.EMPTY_ARRAY_POP);\\n            --backIndex;\\n            value = deque._data[backIndex];\\n            delete deque._data[backIndex];\\n            deque._end = backIndex;\\n        }\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     *\\n     * Reverts with {Panic-RESOURCE_ERROR} if the queue is full.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        unchecked {\\n            uint128 frontIndex = deque._begin - 1;\\n            if (frontIndex == deque._end) Panic.panic(Panic.RESOURCE_ERROR);\\n            deque._data[frontIndex] = value;\\n            deque._begin = frontIndex;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with {Panic-EMPTY_ARRAY_POP} if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        unchecked {\\n            uint128 frontIndex = deque._begin;\\n            if (frontIndex == deque._end) Panic.panic(Panic.EMPTY_ARRAY_POP);\\n            value = deque._data[frontIndex];\\n            delete deque._data[frontIndex];\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n        return deque._data[deque._begin];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n        unchecked {\\n            return deque._data[deque._end - 1];\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with {Panic-ARRAY_OUT_OF_BOUNDS} if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        if (index >= length(deque)) Panic.panic(Panic.ARRAY_OUT_OF_BOUNDS);\\n        // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\\n        unchecked {\\n            return deque._data[deque._begin + uint128(index)];\\n        }\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        unchecked {\\n            return uint256(deque._end - deque._begin);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end == deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0x1e1d74658d7f4eab3d4f8fb0c6c5953bc5f629d9425e978d557dabff7b58b217\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(\\n        Delay self,\\n        uint48 timepoint\\n    ) private pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        (valueBefore, valueAfter, effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/IERC7744.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC7744 {\\n    event Indexed(address indexed container, bytes32 indexed codeHash);\\n    error alreadyExists(bytes32 id, address source);\\n\\n    function register(address container) external;\\n\\n    function get(bytes32 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a1ce76c89e277c8f6a1fd4027667a7521e1594ec3c11ff6617ecff9f0f57a71\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/abstracts/CloneDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../interfaces/IDistribution.sol\\\";\\nimport \\\"./CodeIndexer.sol\\\";\\n\\nabstract contract CloneDistribution is IDistribution, CodeIndexer {\\n    error CodeNotFoundInIndex(bytes32 codeId);\\n\\n    function sources() internal view virtual returns (address[] memory, bytes32 name, uint256 version);\\n\\n    // @inheritdoc IDistribution\\n    function _instantiate()\\n        internal\\n        virtual\\n        returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion)\\n    {\\n        (address[] memory _sources, bytes32 _distributionName, uint256 _distributionVersion) = sources();\\n        uint256 srcsLength = _sources.length;\\n        instances = new address[](srcsLength);\\n        for (uint256 i; i < srcsLength; ++i) {\\n            address clone = Clones.clone(_sources[i]);\\n            instances[i] = clone;\\n        }\\n        emit Distributed(msg.sender, instances);\\n        return (instances, _distributionName, _distributionVersion);\\n    }\\n    // @inheritdoc IDistribution\\n    function get() external view virtual returns (address[] memory src, bytes32 name, uint256 version) {\\n        return sources();\\n    }\\n    // @inheritdoc IDistribution\\n    function contractURI() external view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x759986bffb39959497e361e41516251306631b078b98e38268cd216217048bdd\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/abstracts/CodeIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC7744 as ICodeIndex} from \\\"../IERC7744.sol\\\";\\n\\nabstract contract CodeIndexer {\\n    //Create2 contract\\n    ICodeIndex private constant INDEX_CONTRACT = ICodeIndex(0xC0dE1D2F7662c63796E544B2647b2A94EE658E07);\\n    constructor() {}\\n    // @inheritdoc ICodeIndex\\n    function getContractsIndex() internal pure returns (ICodeIndex) {\\n        return INDEX_CONTRACT;\\n    }\\n    // @inheritdoc ICodeIndex\\n    function index(address source) internal {\\n        INDEX_CONTRACT.register(source);\\n    }\\n}\\n\",\"keccak256\":\"0xd3310f9c0275b78f5c610e0efe95e42e96397e60a122cd17bc521c31adb6e90f\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/interfaces/IContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7adffebc6e64c642e132bbff8ff695138517023f710b23b8767708de4f73db0b\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IContractURI} from \\\"./IContractURI.sol\\\";\\n/**\\n * @title IDistribution\\n * @notice Interface for distribution-related functionalities. It can get sources and produce a new instances out from them. It also provides metadata about the distribution.\\n * @dev It is highly recommended to keep implementation stateless, and use `immutable` variables for any state. This allows your code to be referred in distributor and respositories via ERC7744. It's also easier to reason about, and more gas efficient.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IDistribution is IContractURI {\\n    /**\\n     * @notice Emitted when a distribution occurs.\\n     * @param distributor The address of the entity that performed the distribution.\\n     * @param instances An array of addresses that were produced.\\n     */\\n    event Distributed(address indexed distributor, address[] instances);\\n\\n    /**\\n     * @notice Instantiates a new instance with the given parameters.\\n     * @param data The data to be used for instantiation.\\n     * @return instances An array of addresses that were produced.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     * @dev WARNING: It MUST emit Distributed event.\\n     */\\n    function instantiate(\\n        bytes memory data\\n    ) external returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion);\\n\\n    /**\\n     * @notice Retrieves the current distribution sources.\\n     * @return sources An array of addresses that are used for instantiation.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     */\\n    function get()\\n        external\\n        view\\n        returns (address[] memory sources, bytes32 distributionName, uint256 distributionVersion);\\n}\\n\",\"keccak256\":\"0x8d8bfa27277d68b5defe449c4af09be60cefa0b275d7b25022921502f34e5d63\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/libraries/LibSemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nlibrary LibSemver {\\n    error versionMismatch(string message);\\n    struct Version {\\n        uint64 major;\\n        uint64 minor;\\n        uint128 patch;\\n    }\\n\\n    enum requirements {\\n        ANY, // *\\n        EXACT, // =\\n        MAJOR, // ^\\n        MAJOR_MINOR, // ~\\n        GREATER_EQUAL, // >=\\n        GREATER, // >\\n        LESSER_EQUAL, // <=\\n        LESSER // <\\n    }\\n\\n    struct VersionRequirement {\\n        Version version;\\n        requirements requirement;\\n    }\\n\\n    function toUint256(Version memory _version) internal pure returns (uint256) {\\n        return (uint256(_version.major) << 192) | (uint256(_version.minor) << 128) | uint256(_version.patch);\\n    }\\n\\n    function parse(uint256 _version) internal pure returns (Version memory) {\\n        return Version(uint64(_version >> 192), uint64(_version >> 128), uint128(_version));\\n    }\\n\\n    function toString(Version memory _version) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(uint256(_version.major)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.minor)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.patch))\\n                )\\n            );\\n    }\\n\\n    function require_exact(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) != toUint256(_version2)) revert versionMismatch(\\\"Version mismatch\\\");\\n    }\\n\\n    function require_major(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major) revert versionMismatch(\\\"Major version mismatch\\\");\\n    }\\n\\n    function require_major_minor(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major || _version1.minor != _version2.minor)\\n            revert versionMismatch(\\\"Major and minor version mismatch\\\");\\n    }\\n\\n    function require_greater_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) < toUint256(_version2)) revert versionMismatch(\\\"Version is not greater or equal\\\");\\n    }\\n\\n    function require_greater(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) <= toUint256(_version2)) revert versionMismatch(\\\"Version is not greater\\\");\\n    }\\n\\n    function require_lesser_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) > toUint256(_version2)) revert versionMismatch(\\\"Version is not lesser or equal\\\");\\n    }\\n\\n    function require_lesser(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) >= toUint256(_version2)) revert versionMismatch(\\\"Version is not lesser\\\");\\n    }\\n\\n    function areEqual(Version memory _version1, Version memory _version2) internal pure returns (bool) {\\n        return toUint256(_version1) == toUint256(_version2);\\n    }\\n\\n    function compare(Version memory has, VersionRequirement memory needs) internal pure returns (bool) {\\n        if (needs.requirement == requirements.ANY) return true;\\n        if (needs.requirement == requirements.EXACT) return toUint256(has) == toUint256(needs.version);\\n        if (needs.requirement == requirements.MAJOR) return has.major == needs.version.major;\\n        if (needs.requirement == requirements.MAJOR_MINOR)\\n            return has.major == needs.version.major && has.minor == needs.version.minor;\\n        if (needs.requirement == requirements.GREATER_EQUAL) return toUint256(has) >= toUint256(needs.version);\\n        if (needs.requirement == requirements.GREATER) return toUint256(has) > toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER_EQUAL) return toUint256(has) <= toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER) return toUint256(has) < toUint256(needs.version);\\n        return false;\\n    }\\n\\n    function getNextMajor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major + 1, 0, 0);\\n    }\\n\\n    function getNextMinor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor + 1, 0);\\n    }\\n\\n    function getNextPatch(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor, _version.patch + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x8023de20471ff00ac9aa7630b6696768f894b956d46094a039ac32c5ae596a52\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IVcAndDiscloseCircuitVerifier} from \\\"../interfaces/IVcAndDiscloseCircuitVerifier.sol\\\";\\nimport {IIdentityVerificationHubV1} from \\\"../interfaces/IIdentityVerificationHubV1.sol\\\";\\nimport {ISelfVerificationRoot} from \\\"../interfaces/ISelfVerificationRoot.sol\\\";\\nimport {CircuitConstants} from \\\"../constants/CircuitConstants.sol\\\";\\n\\n/**\\n * @title SelfVerificationRoot\\n * @notice Abstract base contract to be integrated with self's verification infrastructure\\n * @dev Provides base functionality for verifying and disclosing identity credentials\\n */\\nabstract contract SelfVerificationRoot is ISelfVerificationRoot {\\n\\n    // ====================================================\\n    // Storage Variables\\n    // ====================================================\\n\\n    /// @notice The scope value that proofs must match\\n    /// @dev Used to validate that submitted proofs match the expected scope\\n    uint256 internal _scope;\\n\\n    /// @notice The attestation ID that proofs must match\\n    /// @dev Used to validate that submitted proofs contain the correct attestation\\n    uint256 internal _attestationId;\\n\\n    /// @notice Configuration settings for the verification process\\n    /// @dev Contains settings for age verification, country restrictions, and OFAC checks\\n    ISelfVerificationRoot.VerificationConfig internal _verificationConfig;\\n\\n    /// @notice Reference to the identity verification hub contract\\n    /// @dev Immutable reference used for proof verification\\n    IIdentityVerificationHubV1 internal immutable _identityVerificationHub;\\n\\n    // ====================================================\\n    // Errors\\n    // ====================================================\\n\\n    /// @notice Error thrown when the proof's scope doesn't match the expected scope\\n    /// @dev Triggered in verifySelfProof when scope validation fails\\n    error InvalidScope();\\n\\n    /// @notice Error thrown when the proof's attestation ID doesn't match the expected ID\\n    /// @dev Triggered in verifySelfProof when attestation ID validation fails\\n    error InvalidAttestationId();\\n\\n    /**\\n     * @notice Initializes the SelfVerificationRoot contract.\\n     * @param identityVerificationHub The address of the Identity Verification Hub.\\n     * @param scope The expected proof scope for user registration.\\n     * @param attestationId The expected attestation identifier required in proofs.\\n     * @param olderThanEnabled Flag indicating if 'olderThan' verification is enabled.\\n     * @param olderThan Value for 'olderThan' verification.\\n     * @param forbiddenCountriesEnabled Flag indicating if forbidden countries verification is enabled.\\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries.\\n     * @param ofacEnabled Array of flags indicating which OFAC checks are enabled. [passportNo, nameAndDob, nameAndYob]\\n     */\\n    constructor(\\n        address identityVerificationHub,\\n        uint256 scope,\\n        uint256 attestationId,\\n        bool olderThanEnabled,\\n        uint256 olderThan,\\n        bool forbiddenCountriesEnabled,\\n        uint256[4] memory forbiddenCountriesListPacked,\\n        bool[3] memory ofacEnabled\\n    ) {\\n        _identityVerificationHub = IIdentityVerificationHubV1(identityVerificationHub);\\n        _scope = scope;\\n        _attestationId = attestationId;\\n        _verificationConfig.olderThanEnabled = olderThanEnabled;\\n        _verificationConfig.olderThan = olderThan;\\n        _verificationConfig.forbiddenCountriesEnabled = forbiddenCountriesEnabled;\\n        _verificationConfig.forbiddenCountriesListPacked = forbiddenCountriesListPacked;\\n        _verificationConfig.ofacEnabled = ofacEnabled;\\n    }\\n\\n    /**\\n     * @notice Verifies a self-proof\\n     * @dev Validates scope and attestation ID before performing verification through the identity hub\\n     * @param proof The proof data for verification and disclosure\\n     */\\n    function verifySelfProof(\\n        IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof memory proof\\n    ) \\n        public\\n        virtual\\n    {\\n        if (_scope != proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_SCOPE_INDEX]) {\\n            revert InvalidScope();\\n        }\\n\\n        if (_attestationId != proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_ATTESTATION_ID_INDEX]) {\\n            revert InvalidAttestationId();\\n        }\\n\\n        _identityVerificationHub.verifyVcAndDisclose(\\n            IIdentityVerificationHubV1.VcAndDiscloseHubProof({\\n                olderThanEnabled: _verificationConfig.olderThanEnabled,\\n                olderThan: _verificationConfig.olderThan,\\n                forbiddenCountriesEnabled: _verificationConfig.forbiddenCountriesEnabled,\\n                forbiddenCountriesListPacked: _verificationConfig.forbiddenCountriesListPacked,\\n                ofacEnabled: _verificationConfig.ofacEnabled,\\n                vcAndDiscloseProof: proof\\n            })\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0x58758c7a2badf1d9cf365c9df52373e740f52ede703160007302d0bc405b4333\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/constants/CircuitConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\n/**\\n * @title Circuit Constants Library\\n * @notice This library defines constants representing indices used to access public signals\\n *         of various circuits such as register, DSC, and VC/Disclose.\\n * @dev These indices map directly to specific data fields in the corresponding circuits proofs.\\n */\\nlibrary CircuitConstants {\\n    \\n    // ---------------------------\\n    // Register Circuit Constants\\n    // ---------------------------\\n    \\n    /**\\n     * @notice Index to access the nullifier in the register circuit public signals.\\n     */\\n    uint256 constant REGISTER_NULLIFIER_INDEX = 0;\\n    \\n    /**\\n     * @notice Index to access the commitment in the register circuit public signals.\\n     */\\n    uint256 constant REGISTER_COMMITMENT_INDEX = 1;\\n    \\n    /**\\n     * @notice Index to access the Merkle root in the register circuit public signals.\\n     */\\n    uint256 constant REGISTER_MERKLE_ROOT_INDEX = 2;\\n    \\n    // ---------------------------\\n    // DSC Circuit Constants\\n    // ---------------------------\\n    \\n    /**\\n     * @notice Index to access the tree leaf in the DSC circuit public signals.\\n     */\\n    uint256 constant DSC_TREE_LEAF_INDEX = 0;\\n    \\n    /**\\n     * @notice Index to access the CSCA root in the DSC circuit public signals.\\n     */\\n    uint256 constant DSC_CSCA_ROOT_INDEX = 1;\\n    \\n    // -------------------------------------\\n    // VC and Disclose Circuit Constants\\n    // -------------------------------------\\n    \\n    /**\\n     * @notice Index to access the packed revealed data in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_REVEALED_DATA_PACKED_INDEX = 0;\\n    \\n    /**\\n     * @notice Index to access the forbidden countries list (packed) in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_FORBIDDEN_COUNTRIES_LIST_PACKED_INDEX = 3;\\n    \\n    /**\\n     * @notice Index to access the nullifier in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_NULLIFIER_INDEX = 7;\\n    \\n    /**\\n     * @notice Index to access the attestation ID in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_ATTESTATION_ID_INDEX = 8;\\n    \\n    /**\\n     * @notice Index to access the Merkle root in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_MERKLE_ROOT_INDEX = 9;\\n    \\n    /**\\n     * @notice Index to access the current date in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_CURRENT_DATE_INDEX = 10;\\n    \\n    /**\\n     * @notice Index to access the passport number SMT root in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_PASSPORT_NO_SMT_ROOT_INDEX = 16;\\n\\n    /**\\n     * @notice Index to access the name and date of birth SMT root in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_NAME_DOB_SMT_ROOT_INDEX = 17;\\n\\n    /**\\n     * @notice Index to access the name and year of birth SMT root in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_NAME_YOB_SMT_ROOT_INDEX = 18;\\n\\n    /**\\n     * @notice Index to access the scope in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_SCOPE_INDEX = 19;\\n\\n    /**\\n     * @notice Index to access the user identifier in the VC and Disclose circuit public signals.\\n     */\\n    uint256 constant VC_AND_DISCLOSE_USER_IDENTIFIER_INDEX = 20;\\n}\",\"keccak256\":\"0x6c668e16abc9c9818fc7826099adaadbf07c1c677844595350a22986986468ac\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/interfaces/IDscCircuitVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\n/**\\n * @title IDscCircuitVerifier\\n * @notice Interface for verifying zero-knowledge proofs related to the DSC circuit.\\n * @dev This interface defines the structure of a DSC circuit proof and exposes a function to verify such proofs.\\n */\\ninterface IDscCircuitVerifier {\\n\\n    /**\\n     * @notice Represents a DSC circuit proof.\\n     * @param a An array of two unsigned integers representing the proof component 'a'.\\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\\n     * @param c An array of two unsigned integers representing the proof component 'c'.\\n     * @param pubSignals An array of two unsigned integers representing the public signals associated with the proof.\\n     */\\n    struct DscCircuitProof {\\n        uint[2] a;\\n        uint[2][2] b;\\n        uint[2] c;\\n        uint[2] pubSignals;\\n    }\\n\\n    /**\\n     * @notice Verifies a given DSC circuit zero-knowledge proof.\\n     * @dev This function checks the validity of the provided DSC proof parameters.\\n     * @param _pA The 'a' component of the proof.\\n     * @param _pB The 'b' component of the proof.\\n     * @param _pC The 'c' component of the proof.\\n     * @param _pubSignals The public signals associated with the proof.\\n     * @return A boolean value indicating whether the provided proof is valid (true) or not (false).\\n     */\\n    function verifyProof (\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[2] calldata _pubSignals\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0x6cb0d5570dab64f5fdc50e4ff8863d013e31b04c12730c3b3b4322cd147e1d9f\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/interfaces/IIdentityVerificationHubV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IRegisterCircuitVerifier} from \\\"./IRegisterCircuitVerifier.sol\\\";\\nimport {IDscCircuitVerifier} from \\\"./IDscCircuitVerifier.sol\\\";\\nimport {IVcAndDiscloseCircuitVerifier} from \\\"./IVcAndDiscloseCircuitVerifier.sol\\\";\\nimport {CircuitConstants} from \\\"../constants/CircuitConstants.sol\\\";\\n\\n/**\\n * @title IIdentityVerificationHubV1\\n * @notice Interface for the Identity Verification Hub for verifying zero-knowledge proofs using VC and Disclose circuits.\\n * @dev Defines data structures and external functions for verifying proofs and recovering human-readable data.\\n */\\ninterface IIdentityVerificationHubV1 {\\n\\n    /**\\n     * @notice Enum representing types of data that may be revealed.\\n     */\\n    enum RevealedDataType {\\n        ISSUING_STATE,     // The issuing state of the passport.\\n        NAME,              // The full name of the passport holder.\\n        PASSPORT_NUMBER,   // The passport number.\\n        NATIONALITY,       // The nationality.\\n        DATE_OF_BIRTH,     // The date of birth.\\n        GENDER,            // The gender.\\n        EXPIRY_DATE,       // The passport expiry date.\\n        OLDER_THAN,        // The \\\"older than\\\" age verification value.\\n        PASSPORT_NO_OFAC,  // The passport number OFAC status.\\n        NAME_AND_DOB_OFAC, // The name and date of birth OFAC status.\\n        NAME_AND_YOB_OFAC  // The name and year of birth OFAC status.\\n    }\\n\\n    /**\\n     * @notice Structure representing the verification result of a VC and Disclose proof.\\n     * @param attestationId The attestation identifier from the proof.\\n     * @param scope The scope of the verification.\\n     * @param userIdentifier Unique identifier for the user.\\n     * @param nullifier A value used to prevent double registration.\\n     * @param identityCommitmentRoot The root of the identity commitment.\\n     * @param revealedDataPacked Packed revealed data.\\n     * @param forbiddenCountriesListPacked Packed forbidden countries list.\\n     */\\n    struct VcAndDiscloseVerificationResult {\\n        uint256 attestationId;\\n        uint256 scope;\\n        uint256 userIdentifier;\\n        uint256 nullifier;\\n        uint256 identityCommitmentRoot;\\n        uint256[3] revealedDataPacked;\\n        uint256[4] forbiddenCountriesListPacked;\\n    }\\n\\n    /**\\n     * @notice Structure representing human-readable revealed data after unpacking.\\n     * @param issuingState The issuing state as a string.\\n     * @param name Array of strings representing the passport holder's name.\\n     * @param passportNumber The passport number.\\n     * @param nationality The nationality.\\n     * @param dateOfBirth Formatted date of birth.\\n     * @param gender The gender.\\n     * @param expiryDate Formatted expiration date.\\n     * @param olderThan The verified \\\"older than\\\" age.\\n     * @param passportNoOfac The passport number OFAC verification result.\\n     * @param nameAndDobOfac The name and date of birth OFAC verification result.\\n     * @param nameAndYobOfac The name and year of birth OFAC verification result.\\n     */\\n    struct ReadableRevealedData {\\n        string issuingState;\\n        string[] name;\\n        string passportNumber;\\n        string nationality;\\n        string dateOfBirth;\\n        string gender;\\n        string expiryDate;\\n        uint256 olderThan;\\n        uint256 passportNoOfac;\\n        uint256 nameAndDobOfac;\\n        uint256 nameAndYobOfac;\\n    }\\n\\n    /**\\n     * @notice Structure representing a hub proof for VC and Disclose verification.\\n     * @param olderThanEnabled Flag indicating if the 'olderThan' check is required.\\n     * @param olderThan Threshold age for verification.\\n     * @param forbiddenCountriesEnabled Flag indicating if forbidden countries verification is required.\\n     * @param forbiddenCountriesListPacked Packed forbidden countries list.\\n     * @param ofacEnabled Array of flags indicating which OFAC checks are enabled. [passportNo, nameAndDob, nameAndYob]\\n     * @param vcAndDiscloseProof The underlying VC and Disclose proof.\\n     */\\n    struct VcAndDiscloseHubProof {\\n        bool olderThanEnabled;\\n        uint256 olderThan;\\n        bool forbiddenCountriesEnabled;\\n        uint256[4] forbiddenCountriesListPacked;\\n        bool[3] ofacEnabled;\\n        IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof vcAndDiscloseProof;\\n    }\\n\\n    /**\\n     * @notice Verifies a VC and Disclose proof.\\n     * @dev Checks the provided proof against verification configuration and returns key result data.\\n     * @param proof The hub proof containing configuration flags and the underlying VC and Disclose proof.\\n     * @return result The verification result including attestationId, scope, userIdentifier, nullifier, identityCommitmentRoot, revealed data, and forbidden countries list.\\n     */\\n    function verifyVcAndDisclose(\\n        VcAndDiscloseHubProof memory proof\\n    )\\n        external\\n        view\\n        returns (VcAndDiscloseVerificationResult memory result);\\n\\n    /**\\n     * @notice Converts packed revealed data into a human-readable format.\\n     * @dev Uses an array of RevealedDataType to determine which attributes to extract from the packed data.\\n     * @param revealedDataPacked An array of three uint256 containing the packed data.\\n     * @param types An array of RevealedDataType indicating the order of attributes.\\n     * @return readableData The decoded and formatted revealed data.\\n     */\\n    function getReadableRevealedData(\\n        uint256[3] memory revealedDataPacked,\\n        RevealedDataType[] memory types\\n    )\\n        external\\n        view\\n        returns (ReadableRevealedData memory readableData);\\n\\n    /**\\n     * @notice Retrieves a human-readable list of forbidden countries.\\n     * @dev Converts the packed forbidden countries list into a fixed-size array of strings.\\n     * @param forbiddenCountriesListPacked The packed representation of forbidden countries.\\n     * @return forbiddenCountries A fixed-size array (length defined by CircuitConstants.MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH) of strings representing forbidden countries.\\n     */\\n    function getReadableForbiddenCountries(\\n        uint256[4] memory forbiddenCountriesListPacked\\n    )\\n        external\\n        view\\n        returns (string[40] memory forbiddenCountries);\\n\\n    /**\\n     * @notice Registers a passport commitment using a register circuit proof.\\n     * @dev Verifies the register circuit proof before registering the passport commitment.\\n     * @param registerCircuitVerifierId The identifier for the register circuit verifier to be used.\\n     * @param registerCircuitProof The proof data for the register circuit.\\n     */\\n    function registerPassportCommitment(\\n        uint256 registerCircuitVerifierId,\\n        IRegisterCircuitVerifier.RegisterCircuitProof memory registerCircuitProof\\n    )\\n        external;\\n\\n    /**\\n     * @notice Registers a DSC key commitment using a DSC circuit proof.\\n     * @dev Verifies the DSC circuit proof before registering the DSC key commitment.\\n     * @param dscCircuitVerifierId The identifier for the DSC circuit verifier to be used.\\n     * @param dscCircuitProof The proof data for the DSC circuit.\\n     */\\n    function registerDscKeyCommitment(\\n        uint256 dscCircuitVerifierId,\\n        IDscCircuitVerifier.DscCircuitProof memory dscCircuitProof\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the address of the Identity Registry.\\n     * @return registryAddr The address of the Identity Registry contract.\\n     */\\n    function registry() external view returns (address registryAddr);\\n\\n    /**\\n     * @notice Returns the address of the VC and Disclose circuit verifier.\\n     * @return verifierAddr The address of the VC and Disclose circuit verifier.\\n     */\\n    function vcAndDiscloseCircuitVerifier() external view returns (address verifierAddr);\\n\\n    /**\\n     * @notice Retrieves the register circuit verifier for a given signature type.\\n     * @param typeId The signature type identifier.\\n     * @return verifier The address of the register circuit verifier.\\n     */\\n    function sigTypeToRegisterCircuitVerifiers(\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (address verifier);\\n\\n    /**\\n     * @notice Retrieves the DSC circuit verifier for a given signature type.\\n     * @param typeId The signature type identifier.\\n     * @return verifier The address of the DSC circuit verifier.\\n     */\\n    function sigTypeToDscCircuitVerifiers(\\n        uint256 typeId\\n    )\\n        external\\n        view\\n        returns (address verifier);\\n} \",\"keccak256\":\"0xc3d29f9087f92558f5cffa6a7f8df007fff7ca8256831594d314c2f4945ac080\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n/**\\n * @title IRegisterCircuitVerifier\\n * @notice Interface for verifying register circuit proofs.\\n * @dev This interface defines the structure of a register circuit proof and exposes a function to verify such proofs.\\n */\\ninterface IRegisterCircuitVerifier {\\n\\n    /**\\n     * @notice Represents a register circuit proof.\\n     * @dev This structure encapsulates the required proof elements.\\n     * @param a An array of two unsigned integers representing the proof component 'a'.\\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\\n     * @param c An array of two unsigned integers representing the proof component 'c'.\\n     * @param pubSignals An array of three unsigned integers representing the public signals associated with the proof.\\n     */\\n    struct RegisterCircuitProof {\\n        uint[2] a;\\n        uint[2][2] b;\\n        uint[2] c;\\n        uint[3] pubSignals;\\n    }\\n\\n    /**\\n     * @notice Verifies a given register circuit proof.\\n     * @dev This function checks the validity of the provided proof parameters.\\n     * @param a The 'a' component of the proof.\\n     * @param b The 'b' component of the proof.\\n     * @param c The 'c' component of the proof.\\n     * @param pubSignals The public signals associated with the proof.\\n     * @return isValid A boolean value indicating whether the provided proof is valid (true) or not (false).\\n     */\\n    function verifyProof (\\n        uint[2] calldata a,\\n        uint[2][2] calldata b,\\n        uint[2] calldata c,\\n        uint[3] calldata pubSignals\\n    ) external view returns (bool isValid);\\n}\",\"keccak256\":\"0x5312b1654efafe26814893081b45d1d13ad62fddb64733cbca8c8e85bf044db4\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IVcAndDiscloseCircuitVerifier} from \\\"./IVcAndDiscloseCircuitVerifier.sol\\\";\\n\\ninterface ISelfVerificationRoot {\\n\\n    struct VerificationConfig {\\n        bool olderThanEnabled;\\n        uint256 olderThan;\\n        bool forbiddenCountriesEnabled;\\n        uint256[4] forbiddenCountriesListPacked;\\n        bool[3] ofacEnabled;\\n    }\\n    \\n    function verifySelfProof(\\n        IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof memory proof\\n    ) external;\\n\\n}\",\"keccak256\":\"0xb6c1389d66d89674918331aa944e4676e37a4b9ada0e9202ddfdbaf72d5596fe\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/interfaces/IVcAndDiscloseCircuitVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\n/**\\n * @title IVcAndDiscloseCircuitVerifier\\n * @notice Interface for verifying zero-knowledge proofs related to VC and Disclose circuits.\\n * @dev This interface defines the structure of a VC and Disclose proof and a function to verify such proofs.\\n */\\ninterface IVcAndDiscloseCircuitVerifier {\\n\\n    /**\\n     * @notice Represents a VC and Disclose proof.\\n     * @param a An array of two unsigned integers representing the proof component 'a'.\\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\\n     * @param c An array of two unsigned integers representing the proof component 'c'.\\n     * @param pubSignals An array of 16 unsigned integers representing the public signals associated with the proof.\\n     */\\n    struct VcAndDiscloseProof {\\n        uint[2] a;\\n        uint[2][2] b;\\n        uint[2] c;\\n        uint[21] pubSignals;\\n    }\\n\\n    /**\\n     * @notice Verifies a given VC and Disclose zero-knowledge proof.\\n     * @dev This function checks the validity of the provided proof parameters.\\n     * @param a The 'a' component of the proof.\\n     * @param b The 'b' component of the proof.\\n     * @param c The 'c' component of the proof.\\n     * @param pubSignals The public signals associated with the proof.\\n     * @return A boolean value indicating whether the proof is valid (true) or not (false).\\n     */\\n    function verifyProof (\\n        uint[2] calldata a,\\n        uint[2][2] calldata b,\\n        uint[2] calldata c,\\n        uint[21] calldata pubSignals\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0x4bc91a615846d1ffcf4852b52c9c55f25a05e99db56e273993de5ab6be6ec66d\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/libraries/CircuitAttributeHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IVcAndDiscloseCircuitVerifier} from \\\"../interfaces/IVcAndDiscloseCircuitVerifier.sol\\\";\\nimport {CircuitConstants} from \\\"../constants/CircuitConstants.sol\\\";\\nimport {Formatter} from \\\"./Formatter.sol\\\";\\n\\n/**\\n * @title CircuitAttributeHandler Library\\n * @notice Provides functions for extracting and formatting passport attributes from a byte array.\\n * @dev Utilizes the Formatter library for converting and formatting specific fields.\\n */\\nlibrary CircuitAttributeHandler {\\n\\n    /**\\n     * @dev Reverts when the provided character codes array does not contain enough data to extract an attribute.\\n     */\\n    error INSUFFICIENT_CHARCODE_LEN();\\n\\n    // Define constant start and end positions for each attribute\\n    uint256 private constant ISSUING_STATE_START = 2;\\n    uint256 private constant ISSUING_STATE_END = 4;\\n\\n    uint256 private constant NAME_START = 5;\\n    uint256 private constant NAME_END = 43;\\n\\n    uint256 private constant PASSPORT_NUMBER_START = 44;\\n    uint256 private constant PASSPORT_NUMBER_END = 52;\\n\\n    uint256 private constant NATIONALITY_START = 54;\\n    uint256 private constant NATIONALITY_END = 56;\\n\\n    uint256 private constant DATE_OF_BIRTH_START = 57;\\n    uint256 private constant DATE_OF_BIRTH_END = 62;\\n\\n    uint256 private constant GENDER_START = 64;\\n    uint256 private constant GENDER_END = 64;\\n\\n    uint256 private constant EXPIRY_DATE_START = 65;\\n    uint256 private constant EXPIRY_DATE_END = 70;\\n\\n    uint256 private constant OLDER_THAN_START = 88;\\n    uint256 private constant OLDER_THAN_END = 89;\\n\\n    uint256 private constant OFAC_START = 90;\\n    uint256 private constant OFAC_END = 92;\\n\\n    /**\\n     * @notice Retrieves the issuing state from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return A string representing the issuing state.\\n     */\\n    function getIssuingState(bytes memory charcodes) internal pure returns (string memory) {\\n        return extractStringAttribute(charcodes, ISSUING_STATE_START, ISSUING_STATE_END);\\n    }\\n\\n    /**\\n     * @notice Retrieves and formats the name from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return A string array with the formatted name parts.\\n     */\\n    function getName(bytes memory charcodes) internal pure returns (string[] memory) {\\n        return Formatter.formatName(extractStringAttribute(charcodes, NAME_START, NAME_END));\\n    }\\n\\n    /**\\n     * @notice Retrieves the passport number from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The passport number as a string.\\n     */\\n    function getPassportNumber(bytes memory charcodes) internal pure returns (string memory) {\\n        return extractStringAttribute(charcodes, PASSPORT_NUMBER_START, PASSPORT_NUMBER_END);\\n    }\\n\\n    /**\\n     * @notice Retrieves the nationality from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The nationality as a string.\\n     */\\n    function getNationality(bytes memory charcodes) internal pure returns (string memory) {\\n        return extractStringAttribute(charcodes, NATIONALITY_START, NATIONALITY_END);\\n    }\\n\\n    /**\\n     * @notice Retrieves and formats the date of birth from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The formatted date of birth as a string.\\n     */\\n    function getDateOfBirth(bytes memory charcodes) internal pure returns (string memory) {\\n        return Formatter.formatDate(extractStringAttribute(charcodes, DATE_OF_BIRTH_START, DATE_OF_BIRTH_END));\\n    }\\n\\n    /**\\n     * @notice Retrieves the gender from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The gender as a string.\\n     */\\n    function getGender(bytes memory charcodes) internal pure returns (string memory) {\\n        return extractStringAttribute(charcodes, GENDER_START, GENDER_END);\\n    }\\n\\n    /**\\n     * @notice Retrieves and formats the passport expiry date from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The formatted passport expiry date as a string.\\n     */\\n    function getExpiryDate(bytes memory charcodes) internal pure returns (string memory) {\\n        return Formatter.formatDate(extractStringAttribute(charcodes, EXPIRY_DATE_START, EXPIRY_DATE_END));\\n    }\\n\\n    /**\\n     * @notice Retrieves the 'older than' age attribute from the encoded attribute byte array.\\n     * @dev Converts two consecutive numeric ASCII characters to a uint256.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The extracted age as a uint256.\\n     */\\n    function getOlderThan(bytes memory charcodes) internal pure returns (uint256) {\\n        return Formatter.numAsciiToUint(uint8(charcodes[OLDER_THAN_START])) * 10\\n            + Formatter.numAsciiToUint(uint8(charcodes[OLDER_THAN_START + 1]));\\n    }\\n\\n    /**\\n     * @notice Retrieves the passport number OFAC status from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The OFAC status for passport number check as a uint256.\\n     */\\n    function getPassportNoOfac(bytes memory charcodes) internal pure returns (uint256) {\\n        return uint8(charcodes[OFAC_START]);\\n    }\\n\\n    /**\\n     * @notice Retrieves the name and date of birth OFAC status from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The OFAC status for name and DOB check as a uint256.\\n     */\\n    function getNameAndDobOfac(bytes memory charcodes) internal pure returns (uint256) {\\n        return uint8(charcodes[OFAC_START + 1]);\\n    }\\n\\n    /**\\n     * @notice Retrieves the name and year of birth OFAC status from the encoded attribute byte array.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @return The OFAC status for name and YOB check as a uint256.\\n     */\\n    function getNameAndYobOfac(bytes memory charcodes) internal pure returns (uint256) {\\n        return uint8(charcodes[OFAC_START + 2]);\\n    }\\n\\n    /**\\n     * @notice Performs selective OFAC checks based on provided flags.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @param checkPassportNo Whether to check the passport number OFAC status.\\n     * @param checkNameAndDob Whether to check the name and date of birth OFAC status.\\n     * @param checkNameAndYob Whether to check the name and year of birth OFAC status.\\n     * @return True if all enabled checks pass (equal 1), false if any enabled check fails.\\n     * @dev Checks are only performed for flags that are set to true. If a flag is false,\\n     * that particular check is considered to have passed regardless of its actual value.\\n     */\\n    function compareOfac(\\n        bytes memory charcodes,\\n        bool checkPassportNo,\\n        bool checkNameAndDob,\\n        bool checkNameAndYob\\n    ) internal pure returns (bool) {\\n        return (!checkPassportNo || getPassportNoOfac(charcodes) == 1) &&\\n               (!checkNameAndDob || getNameAndDobOfac(charcodes) == 1) &&\\n               (!checkNameAndYob || getNameAndYobOfac(charcodes) == 1);\\n    }\\n\\n    /**\\n     * @notice Compares the extracted 'older than' value with a provided threshold.\\n     * @param charcodes The byte array containing passport attribute data.\\n     * @param olderThan The threshold value to compare against.\\n     * @return True if the extracted age is greater than or equal to the threshold, false otherwise.\\n     */\\n    function compareOlderThan(\\n        bytes memory charcodes,\\n        uint256 olderThan\\n    ) internal pure returns (bool) {\\n        return getOlderThan(charcodes) >= olderThan;\\n    }\\n\\n    /**\\n     * @notice Extracts a substring from a specified range in the byte array.\\n     * @dev Reverts with INSUFFICIENT_CHARCODE_LEN if the byte array's length is insufficient.\\n     * @param charcodes The byte array containing the encoded passport attribute.\\n     * @param start The starting index (inclusive) of the attribute in the byte array.\\n     * @param end The ending index (inclusive) of the attribute in the byte array.\\n     * @return The extracted attribute as a string.\\n     */\\n    function extractStringAttribute(bytes memory charcodes, uint256 start, uint256 end) internal pure returns (string memory) {\\n        if (charcodes.length <= end) {\\n            revert INSUFFICIENT_CHARCODE_LEN();\\n        }\\n        bytes memory attributeBytes = new bytes(end - start + 1);\\n        for (uint256 i = start; i <= end; i++) {\\n            attributeBytes[i - start] = charcodes[i];\\n        }\\n        return string(attributeBytes);\\n    }\\n\\n}\",\"keccak256\":\"0x50d643e1185a74e4e93bdded77bd3be12a1cba883b494519ce5b3f0c49f0661c\",\"license\":\"MIT\"},\"@selfxyz/contracts/contracts/libraries/Formatter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/**\\n * @title Formatter Library\\n * @notice A library providing utility functions to format names, dates, and encode data.\\n */\\nlibrary Formatter {\\n    error InvalidDateLength();\\n    error InvalidYearRange();\\n    error InvalidMonthRange();\\n    error InvalidDayRange();\\n    error InvalidFieldElement();\\n    error InvalidDateDigit();\\n\\n    uint256 constant MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH = 40;\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /**\\n     * @notice Formats a full name string into first name(s) and last name.\\n     * @dev The input is expected to contain a last name, followed by a \\\"<<\\\" separator and then first name(s).\\n     *      The returned array contains the first names at index 0 and the last name at index 1.\\n     * @param input The input string structured as \\\"lastName<<firstName(s)\\\".\\n     * @return names An array of two strings: [firstName(s), lastName].\\n     */\\n    function formatName(\\n        string memory input\\n    ) internal pure returns (string[] memory) {\\n        bytes memory inputBytes = bytes(input);\\n        bytes memory firstNameBytes;\\n        bytes memory lastNameBytes;\\n        string[] memory names = new string[](2);\\n\\n        uint i = 0;\\n        // Extract last name\\n        while (i < inputBytes.length && inputBytes[i] != \\\"<\\\") {\\n            lastNameBytes = abi.encodePacked(lastNameBytes, inputBytes[i]);\\n            i++;\\n        }\\n\\n        // Skip the separator \\\"<<\\\".\\n        i += 2;\\n\\n        // Extract first names.\\n        while (i < inputBytes.length) {\\n            if (inputBytes[i] == \\\"<\\\") {\\n                if (i + 1 < inputBytes.length && inputBytes[i + 1] == \\\"<\\\") {\\n                    break;\\n                }\\n                firstNameBytes = abi.encodePacked(firstNameBytes, \\\" \\\");\\n            } else {\\n                firstNameBytes = abi.encodePacked(\\n                    firstNameBytes,\\n                    inputBytes[i]\\n                );\\n            }\\n            i++;\\n        }\\n\\n        names[0] = string(firstNameBytes);\\n        names[1] = string(lastNameBytes);\\n        return names;\\n    }\\n\\n    /**\\n     * @notice Formats a compact date string into a human-readable date.\\n     * @dev Expects the input date string to have exactly 6 characters in YYMMDD format.\\n     *      Returns the date in \\\"DD-MM-YY\\\" format.\\n     * @param date A string representing the date in YYMMDD format.\\n     * @return A formatted date string in the format \\\"DD-MM-YY\\\".\\n     */\\n    function formatDate(\\n        string memory date\\n    ) internal pure returns (string memory) {\\n        bytes memory dateBytes = bytes(date);\\n        if (dateBytes.length != 6) {\\n            revert InvalidDateLength();\\n        }\\n\\n        if (dateBytes[2] > '1' || (dateBytes[2] == '1' && dateBytes[3] > '2')) {\\n            revert InvalidMonthRange();\\n        }\\n\\n        if (dateBytes[4] > '3' || (dateBytes[4] == '3' && dateBytes[5] > '1')) {\\n            revert InvalidDayRange();\\n        }\\n\\n        string memory year = substring(date, 0, 2);\\n        string memory month = substring(date, 2, 4);\\n        string memory day = substring(date, 4, 6);\\n\\n        return string(abi.encodePacked(day, \\\"-\\\", month, \\\"-\\\", year));\\n    }\\n\\n    /**\\n     * @notice Converts an ASCII numeral code to its corresponding unsigned integer.\\n     * @dev The input must represent an ASCII code for digits (0-9), i.e. between 48 and 57.\\n     *      Reverts with InvalidAsciiCode if the input is out of range.\\n     * @param numAscii The ASCII code of a digit character.\\n     * @return The numeric value (0-9) corresponding to the ASCII code.\\n     */\\n    function numAsciiToUint(uint256 numAscii) internal pure returns (uint256) {\\n        return (numAscii - 48);\\n    }\\n\\n    /**\\n     * @notice Converts an array of three field elements into a bytes representation.\\n     * @dev Each element is converted into a specific number of bytes: 31, 31, and 31 respectively.\\n     * @param publicSignals An array of three unsigned integers representing field elements.\\n     * @return bytesArray A bytes array of total length 93 that encodes the three field elements.\\n     */\\n    function fieldElementsToBytes(\\n        uint256[3] memory publicSignals\\n    ) internal pure returns (bytes memory) {\\n        if (\\n            publicSignals[0] >= SNARK_SCALAR_FIELD ||\\n            publicSignals[1] >= SNARK_SCALAR_FIELD ||\\n            publicSignals[2] >= SNARK_SCALAR_FIELD\\n        ) {\\n            revert InvalidFieldElement();\\n        }\\n        uint8[3] memory bytesCount = [31, 31, 31];\\n        bytes memory bytesArray = new bytes(93);\\n\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 element = publicSignals[i];\\n            for (uint8 j = 0; j < bytesCount[i]; j++) {\\n                bytesArray[index++] = bytes1(uint8(element & 0xff));\\n                element = element >> 8;\\n            }\\n        }\\n        return bytesArray;\\n    }\\n\\n    /**\\n     * @notice Extracts forbidden country codes from a packed uint256.\\n     * @dev Each forbidden country is represented by 3 bytes in the packed data.\\n     *      The function extracts up to MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH forbidden countries.\\n     * @param publicSignals A packed uint256 containing encoded forbidden country data.\\n     * @return forbiddenCountries An array of strings representing the forbidden country codes.\\n     */\\n    function extractForbiddenCountriesFromPacked(\\n        uint256[4] memory publicSignals\\n    )\\n        internal\\n        pure\\n        returns (\\n            string[MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH] memory forbiddenCountries\\n        )\\n    {\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (publicSignals[i] >= SNARK_SCALAR_FIELD) {\\n                revert InvalidFieldElement();\\n            }\\n        }\\n\\n        for (uint256 j = 0; j < MAX_FORBIDDEN_COUNTRIES_LIST_LENGTH; j++) {\\n            uint256 byteIndex = j * 3;\\n\\n            if (byteIndex + 2 < 32) {\\n                uint256 shift = byteIndex * 8;\\n                uint256 mask = 0xFFFFFF;\\n                uint256 packedData = (publicSignals[0] >> shift) & mask;\\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(packedData)));\\n            } else if (byteIndex < 32) {\\n                uint256 bytesFrom0 = 32 - byteIndex;\\n                uint256 bytesTo1 = 3 - bytesFrom0;\\n\\n                uint256 shift0 = byteIndex * 8;\\n                uint256 mask0 = (1 << (bytesFrom0 * 8)) - 1;\\n                uint256 part0 = (publicSignals[0] >> shift0) & mask0;\\n\\n                uint256 shift1 = 0;\\n                uint256 mask1 = (1 << (bytesTo1 * 8)) - 1;\\n                uint256 part1 = (publicSignals[1] >> shift1) & mask1;\\n\\n                uint256 combined = (part1 << (bytesFrom0 * 8)) | part0;\\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(combined)));\\n            } else {\\n                uint256 byteIndexIn1 = byteIndex - 32;\\n                uint256 shift = byteIndexIn1 * 8;\\n                uint256 mask = 0xFFFFFF;\\n                uint256 packedData = (publicSignals[1] >> shift) & mask;\\n                forbiddenCountries[j] = string(abi.encodePacked(uint24(packedData)));\\n            }\\n        }\\n\\n        return forbiddenCountries;\\n\\n    }\\n\\n    /**\\n     * @notice Converts an array of 6 numerical values representing a date into a Unix timestamp.\\n     * @dev Each element in the dateNum array is taken modulo 10, converted to its ASCII digit, \\n     *      and concatenated to form a date string in YYMMDD format. This string is then converted \\n     *      into a Unix timestamp using dateToUnixTimestamp.\\n     * @param dateNum An array of 6 unsigned integers representing a date in YYMMDD format.\\n     * @return timestamp The Unix timestamp corresponding to the provided date.\\n     */\\n    function proofDateToUnixTimestamp(\\n        uint256[6] memory dateNum\\n    ) internal pure returns (uint256) {\\n        for (uint256 i = 0; i < 6; i++) {\\n        if (dateNum[i] > 9) {\\n            revert InvalidDateDigit();\\n            }\\n        }\\n        string memory date = \\\"\\\";\\n        for (uint256 i = 0; i < 6; i++) {\\n            date = string(\\n                abi.encodePacked(date, bytes1(uint8(48 + (dateNum[i] % 10))))\\n            );\\n        }\\n        uint256 currentTimestamp = dateToUnixTimestamp(date);\\n        return currentTimestamp;\\n    }\\n\\n    /**\\n     * @notice Converts a date string in YYMMDD format into a Unix timestamp.\\n     * @dev Parses the date string by extracting year, month, and day components using substring,\\n     *      converts each component to an integer, and then computes the timestamp via toTimestamp.\\n     *      Reverts if the input string is not exactly 6 characters long.\\n     * @param date A 6-character string representing the date in YYMMDD format.\\n     * @return timestamp The Unix timestamp corresponding to the input date.\\n     */\\n    function dateToUnixTimestamp(\\n        string memory date\\n    ) internal pure returns (uint256) {\\n        bytes memory dateBytes = bytes(date);\\n        if (dateBytes.length != 6) {\\n            revert InvalidDateLength();\\n        }\\n\\n        if (dateBytes[2] > '1' || (dateBytes[2] == '1' && dateBytes[3] > '2')) {\\n            revert InvalidMonthRange();\\n        }\\n\\n        if (dateBytes[4] > '3' || (dateBytes[4] == '3' && dateBytes[5] > '1')) {\\n            revert InvalidDayRange();\\n        }\\n\\n        uint256 year = parseDatePart(substring(date, 0, 2)) + 2000;\\n        uint256 month = parseDatePart(substring(date, 2, 4));\\n        uint256 day = parseDatePart(substring(date, 4, 6));\\n\\n        return toTimestamp(year, month, day);\\n    }\\n\\n    /**\\n     * @notice Extracts a substring from a given string.\\n     * @dev Returns the substring from startIndex (inclusive) to endIndex (exclusive).\\n     * @param str The input string.\\n     * @param startIndex The starting index of the substring (inclusive).\\n     * @param endIndex The ending index of the substring (exclusive).\\n     * @return The resulting substring.\\n     */\\n    function substring(\\n        string memory str,\\n        uint startIndex,\\n        uint endIndex\\n    ) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n\\n        return string(result);\\n    }\\n\\n    /**\\n     * @notice Parses a numeric string and returns its unsigned integer representation.\\n     * @dev Assumes the input string contains only numeric characters.\\n     * @param value The string representing a number.\\n     * @return result The parsed unsigned integer.\\n     */\\n    function parseDatePart(string memory value) internal pure returns (uint) {\\n        bytes memory tempEmptyStringTest = bytes(value);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0;\\n        }\\n\\n        uint digit;\\n        uint result;\\n        for (uint i = 0; i < tempEmptyStringTest.length; i++) {\\n            digit = uint8(tempEmptyStringTest[i]) - 48;\\n            result = result * 10 + digit;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Converts a specific date into a Unix timestamp.\\n     * @dev Calculates the timestamp by summing the number of days for years, months, and days since January 1, 1970.\\n     *      Takes leap years into account during the calculation.\\n     * @param year The full year (e.g., 2023).\\n     * @param month The month (1-12).\\n     * @param day The day of the month.\\n     * @return timestamp The Unix timestamp corresponding to the given date.\\n     */\\n    function toTimestamp(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint timestamp) {\\n        uint16 i;\\n\\n        if (year < 1970 || year > 2100) {\\n            revert InvalidYearRange();\\n        }\\n\\n        if (month < 1 || month > 12) {\\n            revert InvalidMonthRange();\\n        }\\n\\n        // Year.\\n        for (i = 1970; i < year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += 366 days;\\n            } else {\\n                timestamp += 365 days;\\n            }\\n        }\\n\\n        // Month.\\n        uint8[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        } else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        if (day < 1 || day > monthDayCounts[month - 1]) {\\n            revert InvalidDayRange();\\n        }\\n\\n        for (i = 1; i < month; i++) {\\n            timestamp += monthDayCounts[i - 1] * 1 days;\\n        }\\n\\n        // Day.\\n        timestamp += (day - 1) * 1 days;\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Checks whether a given year is a leap year.\\n     * @param year The year to check.\\n     * @return True if the year is a leap year, otherwise false.\\n     */\\n    function isLeapYear(uint256 year) internal pure returns (bool) {\\n        if (year < 1970 || year > 2100) {\\n            revert InvalidYearRange();\\n        }\\n\\n        if (year % 4 != 0) {\\n            return false;\\n        } else if (year % 100 != 0) {\\n            return true;\\n        } else if (year % 400 != 0) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0d1552c486273620b0c32043b7a2e95faed018979fcf0c13a50bddeadec9553a\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.22;\\n\\nimport {GovernorUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\\\";\\nimport {GovernorCountingSimpleUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol\\\";\\nimport {GovernorSettingsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol\\\";\\nimport {GovernorStorageUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorStorageUpgradeable.sol\\\";\\nimport {GovernorVotesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\\\";\\nimport {GovernorVotesQuorumFractionUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol\\\";\\nimport {IVotes} from \\\"@openzeppelin/contracts/governance/utils/IVotes.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nstruct URIStorage {\\n    string uri;\\n}\\n\\n/// @custom:security-contact sirt@peeramid.xyz\\ncontract WORLD_DAO is\\n    Initializable,\\n    GovernorUpgradeable,\\n    GovernorSettingsUpgradeable,\\n    GovernorCountingSimpleUpgradeable,\\n    GovernorStorageUpgradeable,\\n    GovernorVotesUpgradeable,\\n    GovernorVotesQuorumFractionUpgradeable\\n{\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    bytes32 private constant URIStorageStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"contract.uri.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    function _getURIStorage() private pure returns (URIStorage storage s) {\\n        bytes32 position = URIStorageStorageLocation;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    function initialize(IVotes _token) public initializer {\\n        __Governor_init(\\\"WORLD_DAO\\\");\\n        __GovernorSettings_init(12 days, 4 weeks, 1e18);\\n        __GovernorCountingSimple_init();\\n        __GovernorStorage_init();\\n        __GovernorVotes_init(_token);\\n        __GovernorVotesQuorumFraction_init(66);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function votingDelay() public view override(GovernorUpgradeable, GovernorSettingsUpgradeable) returns (uint256) {\\n        return super.votingDelay();\\n    }\\n\\n    function votingPeriod() public view override(GovernorUpgradeable, GovernorSettingsUpgradeable) returns (uint256) {\\n        return super.votingPeriod();\\n    }\\n\\n    function quorum(\\n        uint256 blockNumber\\n    ) public view override(GovernorUpgradeable, GovernorVotesQuorumFractionUpgradeable) returns (uint256) {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(GovernorUpgradeable, GovernorSettingsUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    function _propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description,\\n        address proposer\\n    ) internal override(GovernorUpgradeable, GovernorStorageUpgradeable) returns (uint256) {\\n        return super._propose(targets, values, calldatas, description, proposer);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _getURIStorage().uri;\\n    }\\n\\n    function setContractURI(string memory uri) public {\\n        require(msg.sender == address(this), \\\"Only the DAO can set the URI\\\");\\n        _getURIStorage().uri = uri;\\n    }\\n}\\n\",\"keccak256\":\"0x84e8179b0bb708f858919b76d448c1eab0cf124c3efa3fb953838dfb755a8c9b\",\"license\":\"MIT\"},\"contracts/DAODistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.28;\\n\\nimport {CloneDistribution} from \\\"@peeramid-labs/eds/src/abstracts/CloneDistribution.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/libraries/LibSemver.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"@openzeppelin/contracts/utils/ShortStrings.sol\\\";\\nimport {GovernanceToken} from \\\"./GovernanceToken.sol\\\";\\nimport {WORLD_DAO} from \\\"./DAO.sol\\\";\\n\\n/**\\n * @title DAODistribution\\n * @notice This contract implements a country-specific DAO distribution system for the World Improvement Proposals (WIP).\\n *         It creates and manages instances of WORLD_DAO and GovernanceToken contracts, enabling decentralized\\n *         governance with voting capabilities for each participating country.\\n * @dev This contract extends CloneDistribution to deploy and initialize pairs of governance tokens and DAOs.\\n *      Each country in the WIP ecosystem gets its own token and DAO for local governance.\\n * @author Peeramid Labs, 2024\\n * @custom:security-contact sirt@peeramid.xyz\\n */\\n\\n/**\\n * @notice Data structure required for instantiating a new DAO for a country\\n * @param issuingState Hashed identifier of the issuing state/country\\n * @param stateName Human-readable name of the state/country\\n * @param godFather Address of the initial authority/creator for the country's governance\\n */\\nstruct InstantiationData {\\n    bytes32 issuingState;\\n    string stateName;\\n    string stateShortName;\\n    address godFather;\\n}\\n\\ncontract DAODistribution is CloneDistribution {\\n    using ShortStrings for ShortString;\\n\\n    /// @notice Address of the base WORLD_DAO implementation that will be cloned\\n    address private immutable _daoBase;\\n    /// @notice Address of the base GovernanceToken implementation that will be cloned\\n    address private immutable _governanceTokenBase;\\n\\n    /// @notice Name of this distribution contract, stored as ShortString for gas efficiency\\n    ShortString private immutable _distributionName;\\n    /// @notice Version of this distribution contract following semantic versioning\\n    uint256 private immutable _distributionVersion;\\n\\n    /**\\n     * @dev Utility function to convert function signature strings to selectors\\n     * @param signature The function signature as a string\\n     * @return bytes4 The corresponding function selector\\n     */\\n    function stringToSelector(string memory signature) private pure returns (bytes4) {\\n        return bytes4(keccak256(bytes(signature)));\\n    }\\n\\n    /**\\n     * @dev Constructor for the DAODistribution contract\\n     * @param daoBase Address of the WORLD_DAO implementation that will be cloned\\n     * @param governanceTokenBase Address of the GovernanceToken implementation that will be cloned\\n     * @param distributionName Name for this distribution (must be less than 31 bytes)\\n     * @param version Semantic version for this distribution\\n     * @notice Sets up the distribution system with references to all required implementation contracts\\n     * @dev WARNING: distributionName must be less than 31 bytes long to comply with ShortStrings immutable format\\n     */\\n    constructor(\\n        address daoBase,\\n        address governanceTokenBase,\\n        string memory distributionName,\\n        LibSemver.Version memory version\\n    ) {\\n        _daoBase = daoBase;\\n        _governanceTokenBase = governanceTokenBase;\\n        _distributionName = ShortStrings.toShortString(distributionName);\\n        _distributionVersion = LibSemver.toUint256(version);\\n    }\\n\\n    /**\\n     * @notice Creates a new DAO and GovernanceToken pair for a country\\n     * @dev Clones both DAO and token contracts and initializes them with country-specific data\\n     * @param data Encoded InstantiationData containing country information and initial governance authority\\n     * @return instances Array of deployed contract addresses [GovernanceToken, WORLD_DAO]\\n     * @return distributionName Name of this distribution as bytes32\\n     * @return distributionVersion Version of this distribution as uint256\\n     * @custom:security Sets msg.sender (WIP contract) as the token minter\\n     */\\n    function instantiate(\\n        bytes memory data\\n    ) external override returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion) {\\n        (instances, distributionName, distributionVersion) = super._instantiate();\\n        InstantiationData memory instantiationData = abi.decode(data, (InstantiationData));\\n        GovernanceToken(instances[0]).initialize(\\n            instantiationData.godFather,\\n            instantiationData.stateName,\\n            instantiationData.stateShortName,\\n            instances[1],\\n            msg.sender\\n        );\\n        WORLD_DAO(payable(instances[1])).initialize(GovernanceToken(instances[0]));\\n        return (instances, distributionName, distributionVersion);\\n    }\\n\\n    /**\\n     * @notice Returns the contract URI for this distribution\\n     * @dev Used for metadata and discovery purposes\\n     * @return string The contract URI\\n     */\\n    function contractURI() public pure virtual override returns (string memory) {\\n        return string(abi.encodePacked(\\\"DAODistribution\\\"));\\n    }\\n\\n    /**\\n     * @notice Public accessor for sources data\\n     * @dev Wrapper around the internal sources function\\n     * @return address[] Array of source implementation addresses\\n     * @return bytes32 Distribution name\\n     * @return uint256 Distribution version\\n     */\\n    function get() public view virtual override returns (address[] memory, bytes32, uint256) {\\n        return sources();\\n    }\\n\\n    /**\\n     * @notice Returns the implementation addresses and metadata for this distribution\\n     * @dev Implements the required sources function from CloneDistribution\\n     * @return address[] Array containing [governanceTokenBase, daoBase] addresses\\n     * @return bytes32 Distribution name\\n     * @return uint256 Distribution version\\n     */\\n    function sources() internal view virtual override returns (address[] memory, bytes32, uint256) {\\n        address[] memory srcs = new address[](2);\\n        srcs[0] = _governanceTokenBase;\\n        srcs[1] = _daoBase;\\n        return (srcs, ShortString.unwrap(_distributionName), _distributionVersion);\\n    }\\n}\\n\",\"keccak256\":\"0xd1c870e10dc424acfefbfe9977f07608bf7f90ad53185518384bce0d5617ef16\",\"license\":\"MIT\"},\"contracts/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.22;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport {ERC20VotesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\\\";\\n\\n/// @custom:security-contact sirt@peeramid.xyz\\ncontract GovernanceToken is ERC20Upgradeable, ERC20PermitUpgradeable, ERC20VotesUpgradeable {\\n    address public minter;\\n    address public _DAO;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address recipient,\\n        string memory name,\\n        string memory symbol,\\n        address DAO,\\n        address _minter\\n    ) public initializer {\\n        __ERC20_init(name, symbol);\\n        __ERC20Permit_init(name);\\n        __ERC20Votes_init();\\n        _DAO = DAO;\\n        minter = _minter;\\n        _mint(recipient, 1337000 * 10 ** decimals());\\n    }\\n\\n    function clock() public view override returns (uint48) {\\n        return uint48(block.timestamp);\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        require(msg.sender == minter, \\\"Only minter can mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public pure override returns (string memory) {\\n        return \\\"mode=timestamp\\\";\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override(ERC20Upgradeable, ERC20VotesUpgradeable) {\\n        super._update(from, to, value);\\n    }\\n\\n    function nonces(address owner) public view override(ERC20PermitUpgradeable, NoncesUpgradeable) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n}\\n\",\"keccak256\":\"0xe9839f3c3152f402b376f3d1dcef22c9a7ac99b26a1375dd3c59192be3f92163\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {SelfVerificationRoot} from \\\"@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol\\\";\\nimport {ISelfVerificationRoot} from \\\"@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol\\\";\\nimport {IVcAndDiscloseCircuitVerifier} from \\\"@selfxyz/contracts/contracts/interfaces/IVcAndDiscloseCircuitVerifier.sol\\\";\\nimport {IIdentityVerificationHubV1} from \\\"@selfxyz/contracts/contracts/interfaces/IIdentityVerificationHubV1.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Formatter} from \\\"@selfxyz/contracts/contracts/libraries/Formatter.sol\\\";\\nimport {CircuitAttributeHandler} from \\\"@selfxyz/contracts/contracts/libraries/CircuitAttributeHandler.sol\\\";\\nimport {CircuitConstants} from \\\"@selfxyz/contracts/contracts/constants/CircuitConstants.sol\\\";\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {ERC1155Burnable} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport {IDistribution} from \\\"@peeramid-labs/eds/src/interfaces/IDistribution.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n// import \\\"@celo/contracts/common/UsingRegistryV2.sol\\\";\\nimport {InstantiationData} from \\\"./DAODistribution.sol\\\";\\nimport {GovernanceToken} from \\\"./GovernanceToken.sol\\\";\\nstruct ReadableRevealedData {\\n    string issuingState;\\n    string[] name;\\n    string passportNumber;\\n    string nationality;\\n    string dateOfBirth;\\n    string gender;\\n    string expiryDate;\\n    uint256 olderThan;\\n    uint256 passportNoOfac;\\n    uint256 nameAndDobOfac;\\n    uint256 nameAndYobOfac;\\n}\\nenum RevealedDataType {\\n    ISSUING_STATE, // The issuing state of the passport.\\n    NAME, // The full name of the passport holder.\\n    PASSPORT_NUMBER, // The passport number.\\n    NATIONALITY, // The nationality.\\n    DATE_OF_BIRTH, // The date of birth.\\n    GENDER, // The gender.\\n    EXPIRY_DATE, // The passport expiry date.\\n    OLDER_THAN, // The \\\"older than\\\" age verification value.\\n    PASSPORT_NO_OFAC, // The passport number OFAC status.\\n    NAME_AND_DOB_OFAC, // The name and date of birth OFAC status.\\n    NAME_AND_YOB_OFAC // The name and year of birth OFAC status.\\n}\\n\\ncontract Verifier is SelfVerificationRoot {\\n    error RegisteredNullifier();\\n    error NotQualified(address account);\\n    error AlreadyClaimed();\\n    mapping(uint256 => bool) _nullifiers;\\n\\n    constructor(\\n        address _identityVerificationHub,\\n        uint256 _scope,\\n        uint256 _attestationId,\\n        bool _olderThanEnabled,\\n        uint256 _olderThan,\\n        bool _forbiddenCountriesEnabled,\\n        uint256[4] memory _forbiddenCountriesListPacked,\\n        bool[3] memory _ofacEnabled\\n    )\\n        SelfVerificationRoot(\\n            _identityVerificationHub,\\n            _scope,\\n            _attestationId,\\n            _olderThanEnabled,\\n            _olderThan,\\n            _forbiddenCountriesEnabled,\\n            _forbiddenCountriesListPacked,\\n            _ofacEnabled\\n        )\\n    {}\\n\\n    function verifySelfProofAndReturn(\\n        IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof memory proof\\n    ) public returns (ReadableRevealedData memory, uint256, bool, string memory, address) {\\n        if (_scope != proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_SCOPE_INDEX]) {\\n            revert InvalidScope();\\n        }\\n\\n        if (_attestationId != proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_ATTESTATION_ID_INDEX]) {\\n            revert InvalidAttestationId();\\n        }\\n\\n        if (_nullifiers[proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_NULLIFIER_INDEX]]) {\\n            revert RegisteredNullifier();\\n        }\\n\\n        IIdentityVerificationHubV1.VcAndDiscloseVerificationResult memory result = _identityVerificationHub\\n            .verifyVcAndDisclose(\\n                IIdentityVerificationHubV1.VcAndDiscloseHubProof({\\n                    olderThanEnabled: _verificationConfig.olderThanEnabled,\\n                    olderThan: _verificationConfig.olderThan,\\n                    forbiddenCountriesEnabled: _verificationConfig.forbiddenCountriesEnabled,\\n                    forbiddenCountriesListPacked: _verificationConfig.forbiddenCountriesListPacked,\\n                    ofacEnabled: _verificationConfig.ofacEnabled,\\n                    vcAndDiscloseProof: proof\\n                })\\n            );\\n\\n        (uint256 expiresAt, bool isExpired) = _getExpiryDate(result.revealedDataPacked);\\n\\n        RevealedDataType[] memory types = new RevealedDataType[](1);\\n        types[0] = RevealedDataType.ISSUING_STATE;\\n\\n        ReadableRevealedData memory revealedData = getReadableRevealedData(result.revealedDataPacked, types);\\n\\n        _nullifiers[result.nullifier] = true;\\n        if (!isExpired) {\\n            return (\\n                revealedData,\\n                expiresAt,\\n                isExpired,\\n                revealedData.issuingState,\\n                address(uint160(result.userIdentifier))\\n            );\\n        } else {\\n            revert(\\\"Not eligible: Expired\\\");\\n        }\\n    }\\n\\n    // This function is used to verify the proof for the DAO citizen.\\n    // It will not write nullifier to storage, use function above for that.\\n    function verifySelfProof(IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof memory proof) public view override {\\n        if (_scope != proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_SCOPE_INDEX]) {\\n            revert InvalidScope();\\n        }\\n\\n        if (_attestationId != proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_ATTESTATION_ID_INDEX]) {\\n            revert InvalidAttestationId();\\n        }\\n\\n        if (_nullifiers[proof.pubSignals[CircuitConstants.VC_AND_DISCLOSE_NULLIFIER_INDEX]]) {\\n            revert RegisteredNullifier();\\n        }\\n\\n        IIdentityVerificationHubV1.VcAndDiscloseVerificationResult memory result = _identityVerificationHub\\n            .verifyVcAndDisclose(\\n                IIdentityVerificationHubV1.VcAndDiscloseHubProof({\\n                    olderThanEnabled: _verificationConfig.olderThanEnabled,\\n                    olderThan: _verificationConfig.olderThan,\\n                    forbiddenCountriesEnabled: _verificationConfig.forbiddenCountriesEnabled,\\n                    forbiddenCountriesListPacked: _verificationConfig.forbiddenCountriesListPacked,\\n                    ofacEnabled: _verificationConfig.ofacEnabled,\\n                    vcAndDiscloseProof: proof\\n                })\\n            );\\n\\n        (, bool isExpired) = _getExpiryDate(result.revealedDataPacked);\\n\\n        RevealedDataType[] memory types = new RevealedDataType[](1);\\n        types[0] = RevealedDataType.ISSUING_STATE;\\n\\n        if (isExpired) {\\n            revert(\\\"Not eligible: Expired\\\");\\n        }\\n    }\\n\\n    function getReadableRevealedData(\\n        uint256[3] memory revealedDataPacked,\\n        RevealedDataType[] memory types\\n    ) internal view virtual returns (ReadableRevealedData memory) {\\n        bytes memory charcodes = Formatter.fieldElementsToBytes(revealedDataPacked);\\n\\n        ReadableRevealedData memory attrs;\\n\\n        for (uint256 i = 0; i < types.length; i++) {\\n            RevealedDataType dataType = types[i];\\n            if (dataType == RevealedDataType.ISSUING_STATE) {\\n                attrs.issuingState = CircuitAttributeHandler.getIssuingState(charcodes);\\n            } else if (dataType == RevealedDataType.NAME) {\\n                attrs.name = CircuitAttributeHandler.getName(charcodes);\\n            } else if (dataType == RevealedDataType.PASSPORT_NUMBER) {\\n                attrs.passportNumber = CircuitAttributeHandler.getPassportNumber(charcodes);\\n            } else if (dataType == RevealedDataType.NATIONALITY) {\\n                attrs.nationality = CircuitAttributeHandler.getNationality(charcodes);\\n            } else if (dataType == RevealedDataType.DATE_OF_BIRTH) {\\n                attrs.dateOfBirth = CircuitAttributeHandler.getDateOfBirth(charcodes);\\n            } else if (dataType == RevealedDataType.GENDER) {\\n                attrs.gender = CircuitAttributeHandler.getGender(charcodes);\\n            } else if (dataType == RevealedDataType.EXPIRY_DATE) {\\n                attrs.expiryDate = CircuitAttributeHandler.getExpiryDate(charcodes);\\n            } else if (dataType == RevealedDataType.OLDER_THAN) {\\n                attrs.olderThan = CircuitAttributeHandler.getOlderThan(charcodes);\\n            } else if (dataType == RevealedDataType.PASSPORT_NO_OFAC) {\\n                attrs.passportNoOfac = CircuitAttributeHandler.getPassportNoOfac(charcodes);\\n            } else if (dataType == RevealedDataType.NAME_AND_DOB_OFAC) {\\n                attrs.nameAndDobOfac = CircuitAttributeHandler.getNameAndDobOfac(charcodes);\\n            } else if (dataType == RevealedDataType.NAME_AND_YOB_OFAC) {\\n                attrs.nameAndYobOfac = CircuitAttributeHandler.getNameAndYobOfac(charcodes);\\n            }\\n        }\\n\\n        return attrs;\\n    }\\n\\n    function _getExpiryDate(\\n        uint256[3] memory revealedDataPacked\\n    ) internal view returns (uint256 expiresAt, bool isExpired) {\\n        bytes memory charcodes = Formatter.fieldElementsToBytes(revealedDataPacked);\\n        string memory expiry = CircuitAttributeHandler.getExpiryDate(charcodes);\\n\\n        bytes memory expiryBytes = bytes(expiry);\\n        bytes memory dayBytes = new bytes(2);\\n        bytes memory monthBytes = new bytes(2);\\n        bytes memory yearBytes = new bytes(2);\\n\\n        dayBytes[0] = expiryBytes[0];\\n        dayBytes[1] = expiryBytes[1];\\n\\n        monthBytes[0] = expiryBytes[3];\\n        monthBytes[1] = expiryBytes[4];\\n\\n        yearBytes[0] = expiryBytes[6];\\n        yearBytes[1] = expiryBytes[7];\\n\\n        string memory day = string(dayBytes);\\n        string memory month = string(monthBytes);\\n        string memory year = string(yearBytes);\\n\\n        uint256 expiryTimestamp = Formatter.dateToUnixTimestamp(string(abi.encodePacked(year, month, day)));\\n\\n        uint256 currentTime = block.timestamp;\\n\\n        if (currentTime > expiryTimestamp) {\\n            isExpired = true;\\n        } else {\\n            isExpired = false;\\n        }\\n\\n        return (expiryTimestamp, isExpired);\\n    }\\n}\\n\",\"keccak256\":\"0x0d6d7ea0a5c9b27e147addecbca21d50bb28d34a53756790dcd566f758089454\",\"license\":\"MIT\"},\"contracts/WIP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IVcAndDiscloseCircuitVerifier} from \\\"@selfxyz/contracts/contracts/interfaces/IVcAndDiscloseCircuitVerifier.sol\\\";\\nimport {IDistribution} from \\\"@peeramid-labs/eds/src/interfaces/IDistribution.sol\\\";\\nimport {InstantiationData} from \\\"./DAODistribution.sol\\\";\\nimport {GovernanceToken} from \\\"./GovernanceToken.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC20BurnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Verifier, ReadableRevealedData} from \\\"./Verifier.sol\\\";\\nimport {WorldMultiSigV1} from \\\"./WorldMultiSig.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @notice Structure representing a vote for a proposal\\n * @param proposal Hash of the proposal being voted on\\n * @param scoresGiven Amount of voting power allocated to this proposal\\n */\\nstruct VoteElement {\\n    bytes32 proposal;\\n    uint256 scoresGiven;\\n}\\n\\n/**\\n * @notice Structure representing a passport holder's citizenship information\\n * @param citizenship String identifier of the country of citizenship\\n * @param revalidateAt Timestamp when the passport needs to be reverified\\n * @param isQualified Boolean indicating if the passport holder is eligible for participation\\n */\\nstruct PassportHolder {\\n    string citizenship;\\n    uint256 revalidateAt;\\n    bool isQualified;\\n}\\n\\n/**\\n * @notice Structure representing a single proposal in the system\\n * @param proposal Hash of the proposal text\\n * @param score Current score/votes accumulated for this proposal\\n * @param proposer Address of the account that submitted the proposal\\n * @param exists Boolean to track if this proposal exists (used for lookups)\\n */\\nstruct DailyProposal {\\n    bytes32 proposal;\\n    uint256 score;\\n    address proposer;\\n    bool exists;\\n}\\n\\n/**\\n * @notice Structure to track proposals for a specific day\\n * @param proposals Mapping from proposal hash to DailyProposal data\\n * @param proposalCnt Number of proposals submitted on this day\\n */\\nstruct Daily {\\n    mapping(bytes32 proposal => DailyProposal) proposals;\\n    uint256 proposalCnt;\\n}\\n\\n/**\\n * @notice Structure representing a country's DAO and governance token\\n * @param token The governance token for this country\\n * @param dao Address of the DAO contract for this country\\n * @param bonusBase Remaining tokens available for issuance to new citizens\\n */\\nstruct DAO {\\n    GovernanceToken token;\\n    address dao;\\n    uint256 bonusBase;\\n    uint256 verifiedCount;\\n}\\n\\n/**\\n * @notice Main storage structure for the WIP contract using the diamond storage pattern\\n * @dev Used to avoid storage collisions in upgradeable contracts\\n */\\nstruct WIPStorage {\\n    Verifier verifier;\\n    IDistribution daoDistribution;\\n    mapping(bytes32 state => DAO) daos;\\n    mapping(uint256 => bool) _nullifiers;\\n    mapping(address => PassportHolder) passportHolders;\\n    mapping(uint256 day => Daily) daily;\\n    mapping(bytes32 proposal => uint256 score) proposalScores;\\n    WorldMultiSigV1 worldMultiSig;\\n    uint256 lastProposalDay;\\n    mapping(address => uint256) lastClaimed;\\n}\\n\\n/**\\n * @title World Improvement Proposals (WIP)\\n * @notice Main contract for the World Improvement Proposals system, enabling citizenship-based\\n *         governance across multiple countries with democratic proposal and voting mechanisms.\\n * @dev Implements an upgradeable ERC20 token with specialized governance features including:\\n *      - Passport verification for citizenship\\n *      - Country-specific DAOs and tokens\\n *      - Daily proposal submissions\\n *      - Cross-country and same-country voting with quadratic/cubic scoring\\n * @author Peeramid Labs, 2024\\n * @custom:security-contact sirt@peeramid.xyz\\n */\\ncontract WIP is ERC20BurnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    /**\\n     * @notice Retrieves the passport holder information for a given account\\n     * @param account Address to query passport information for\\n     * @return PassportHolder Struct containing citizenship data\\n     */\\n    function passportHolders(address account) public view returns (PassportHolder memory) {\\n        return getStorage().passportHolders[account];\\n    }\\n\\n    /**\\n     * @notice Retrieves the DAO information for a given country\\n     * @param state Hashed identifier of the country\\n     * @return DAO Struct containing governance token and DAO details\\n     */\\n    function daos(bytes32 state) public view returns (DAO memory) {\\n        return getStorage().daos[state];\\n    }\\n\\n    /**\\n     * @notice Returns the WorldMultiSig contract instance\\n     * @return WorldMultiSigV1 The WorldMultiSig contract for governance control\\n     */\\n    function worldMultiSig() public view returns (WorldMultiSigV1) {\\n        return getStorage().worldMultiSig;\\n    }\\n\\n    /**\\n     * @notice Checks if a nullifier has been used\\n     * @param nullifier The nullifier value to check\\n     * @return bool True if the nullifier has been used\\n     */\\n    function nullifiers(uint256 nullifier) public view returns (bool) {\\n        return getStorage()._nullifiers[nullifier];\\n    }\\n\\n    /**\\n     * @notice Gets the total score for a proposal\\n     * @param proposal Hash of the proposal to query\\n     * @return uint256 Current score/votes for the proposal\\n     */\\n    function proposalScores(bytes32 proposal) public view returns (uint256) {\\n        return getStorage().proposalScores[proposal];\\n    }\\n\\n    /**\\n     * @notice Returns the DAODistribution contract instance\\n     * @return IDistribution The DAO distribution contract\\n     */\\n    function daoDistribution() public view returns (IDistribution) {\\n        return getStorage().daoDistribution;\\n    }\\n\\n    /// @notice Amount of tokens claimable daily (64 ether)\\n    /// @dev Chosen as it is both square of 8 and cube of 4 for scoring calculations\\n    uint256 constant CLAIMABLE_AMOUNT = 64 ether;\\n\\n    /// @notice Maximum score a user can allocate to a single proposal\\n    uint256 constant MAX_SCORE_ALLOCATION = 900000;\\n\\n    /// @notice Storage slot for the diamond storage pattern\\n    bytes32 private constant URIStorageStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"WIP.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    /**\\n     * @notice Helper function to access the contract's storage\\n     * @dev Uses assembly to locate the diamond storage position\\n     * @return s Reference to the WIPStorage struct\\n     */\\n    function getStorage() private pure returns (WIPStorage storage s) {\\n        bytes32 position = URIStorageStorageLocation;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @notice Event emitted when the first citizen of a country is onboarded\\n     * @param country Name of the country\\n     * @param onboardingBonus Amount of tokens given as onboarding bonus\\n     * @param citizen Address of the onboarded citizen\\n     */\\n    event FirstCitizenOnboarded(string indexed country, uint256 indexed onboardingBonus, address indexed citizen);\\n\\n    event GlobalCitizenOnboarded(string indexed country, uint256 indexed onboardingBonus, address indexed citizen);\\n\\n    /**\\n     * @notice Event emitted when a passport is verified\\n     * @param citizen Address of the verified citizen\\n     * @param isExpired Whether the passport is expired\\n     */\\n    event Verified(address citizen, bool isExpired);\\n\\n    /**\\n     * @notice Event emitted when a new country DAO is created\\n     * @param country Hashed identifier of the country\\n     * @param godFather Address of the first citizen who created the country DAO\\n     * @param token Address of the country's governance token\\n     * @param dao Address of the country's DAO contract\\n     * @param countryName Human-readable name of the country\\n     */\\n    event NewCountryOnboarded(\\n        bytes32 indexed country,\\n        address indexed godFather,\\n        address token,\\n        address dao,\\n        string countryName\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user votes on proposals\\n     * @param participant Address of the voter\\n     * @param day Day number when the vote was cast\\n     * @param proposal Hash of the proposal being voted on\\n     * @param country Country of the voter\\n     * @param proposerCountry Country of the proposal creator\\n     * @param scoreGiven Amount of voting power allocated\\n     */\\n    event VotingByAddress(\\n        address indexed participant,\\n        uint256 indexed day,\\n        bytes32 indexed proposal,\\n        string country,\\n        string proposerCountry,\\n        uint256 scoreGiven\\n    );\\n\\n    event ProposalScoreUpdatedByCountry(\\n        uint256 indexed score,\\n        uint256 indexed day,\\n        bytes32 indexed country,\\n        bytes32 proposal\\n    );\\n    event ProposalScoreUpdatedByAddress(\\n        uint256 indexed score,\\n        uint256 indexed day,\\n        address indexed proposer,\\n        bytes32 proposal\\n    );\\n\\n    /**\\n     * @notice Event for tracking votes by country\\n     * @param country Hashed identifier of the voter's country\\n     * @param day Day number when the vote was cast\\n     * @param proposal Hash of the proposal being voted on\\n     * @param proposer Address of the proposal creator\\n     * @param voter Address of the voter\\n     * @param proposerCountry Country of the proposal creator\\n     * @param scoreGiven Amount of voting power allocated\\n     */\\n    event VotingByCountry(\\n        bytes32 indexed country,\\n        uint256 indexed day,\\n        bytes32 indexed proposal,\\n        address proposer,\\n        address voter,\\n        string proposerCountry,\\n        uint256 scoreGiven\\n    );\\n\\n    /**\\n     * @notice Event for tracking proposals by country\\n     * @param country Hashed identifier of the proposer's country\\n     * @param day Day number when the proposal was created\\n     * @param proposal Hash of the proposal\\n     * @param proposalText Full text of the proposal\\n     * @param countryString Human-readable name of the country\\n     */\\n    event ProposingByCountry(\\n        bytes32 indexed country,\\n        uint256 indexed day,\\n        bytes32 indexed proposal,\\n        string proposalText,\\n        string countryString,\\n        uint256 scoreWhenProposed\\n    );\\n\\n    /**\\n     * @notice Event for tracking proposals by address\\n     * @param proposer Address of the proposal creator\\n     * @param day Day number when the proposal was created\\n     * @param proposal Hash of the proposal\\n     * @param proposalText Full text of the proposal\\n     */\\n    event ProposingByAddress(\\n        address indexed proposer,\\n        uint256 indexed day,\\n        bytes32 indexed proposal,\\n        string proposalText,\\n        uint256 scoreWhenProposed\\n    );\\n\\n    /**\\n     * @notice Get the current day number based on timestamp\\n     * @dev Used for daily token claiming and proposal tracking\\n     * @return uint256 Current day number (timestamp / 1 day)\\n     */\\n    function currentDay() public view returns (uint256) {\\n        return block.timestamp / 1 days;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @dev Intentionally empty as initialization happens in initialize()\\n     */\\n    constructor() {\\n        // _disableInitializers();\\n    }\\n\\n    bytes32 constant UNHash = bytes32(0x0123456789ABCDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n    /**\\n     * @notice Initializes the WIP contract\\n     * @dev Sets up the contract with required dependencies and initializes the base contracts\\n     * @param verifier Address of the passport verification contract\\n     * @param _daoDistribution Address of the DAO distribution contract\\n     * @param _worldMultiSig Address of the WorldMultiSig contract\\n     * @param initialOperator Address with initial control of the WorldMultiSig\\n     */\\n    function initialize(\\n        address verifier,\\n        address _daoDistribution,\\n        address _worldMultiSig,\\n        address initialOperator\\n    ) public initializer {\\n        __ERC20_init(\\\"WIP\\\", \\\"WIP\\\");\\n        __ReentrancyGuard_init();\\n        require(verifier != address(0), \\\"Verifier is required\\\");\\n        require(_daoDistribution != address(0), \\\"DAO distribution is required\\\");\\n        require(_worldMultiSig != address(0), \\\"WorldMultiSig is required\\\");\\n        require(initialOperator != address(0), \\\"Initial operator is required\\\");\\n        __Pausable_init();\\n\\n        InstantiationData memory instantiationData = InstantiationData({\\n            issuingState: UNHash,\\n            stateName: \\\"United Nations DAO\\\",\\n            stateShortName: \\\"UN DAO\\\",\\n            godFather: tx.origin\\n        });\\n        bytes memory data = abi.encode(instantiationData);\\n        WIPStorage storage s = getStorage();\\n        s.daoDistribution = IDistribution(_daoDistribution);\\n        s.verifier = Verifier(verifier);\\n        s.worldMultiSig = WorldMultiSigV1(payable(address(_worldMultiSig)));\\n        s.lastProposalDay = currentDay() - 1;\\n        (address[] memory instances, , ) = s.daoDistribution.instantiate(data);\\n        s.daos[UNHash] = DAO(GovernanceToken(instances[0]), instances[1], 1337000 ether, 1);\\n        WorldMultiSigV1(payable(address(_worldMultiSig))).initializeByWIP(initialOperator);\\n        require(s.worldMultiSig.getWIP() == address(this), \\\"WorldMultiSig is not controlled by the WIP\\\");\\n        emit NewCountryOnboarded(UNHash, tx.origin, instances[0], instances[1], \\\"United Nations\\\");\\n    }\\n\\n    /**\\n     * @notice Verifies a citizen's passport and registers them in the system\\n     * @dev Uses zero-knowledge proofs for privacy-preserving verification\\n     * @param proof The zero-knowledge proof of passport validity\\n     * @custom:security Requires valid proof and non-expired passport\\n     */\\n    function verifySelfProof(\\n        IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof memory proof\\n    ) public nonReentrant whenNotPaused {\\n        WIPStorage storage s = getStorage();\\n        (\\n            ReadableRevealedData memory revealedData,\\n            uint256 expiresAt,\\n            bool isExpired,\\n            string memory issuingState,\\n            address citizen\\n        ) = Verifier(s.verifier).verifySelfProofAndReturn(proof);\\n        emit Verified(citizen, isExpired);\\n\\n        s.lastClaimed[citizen] = currentDay() - 1;\\n\\n        if (!isExpired) {\\n            bytes32 issuingStateHash = keccak256(bytes(revealedData.issuingState));\\n            if (address(s.daos[issuingStateHash].token) == address(0)) {\\n                InstantiationData memory instantiationData = InstantiationData({\\n                    issuingState: issuingStateHash,\\n                    stateName: string.concat(revealedData.issuingState, \\\" DAO\\\"),\\n                    stateShortName: string.concat(revealedData.issuingState),\\n                    godFather: citizen\\n                });\\n                bytes memory data = abi.encode(instantiationData);\\n                (address[] memory instances, , ) = s.daoDistribution.instantiate(data);\\n                s.daos[issuingStateHash] = DAO(GovernanceToken(instances[0]), instances[1], 1337000 ether, 1);\\n                emit NewCountryOnboarded(\\n                    issuingStateHash,\\n                    citizen,\\n                    instances[0],\\n                    instances[1],\\n                    revealedData.issuingState\\n                );\\n            } else {\\n                uint256 onboardingCountryDrop = s.daos[issuingStateHash].bonusBase /\\n                    s.daos[issuingStateHash].verifiedCount;\\n                if (onboardingCountryDrop > 1) {\\n                    GovernanceToken(s.daos[issuingStateHash].token).mint(citizen, onboardingCountryDrop);\\n                    emit FirstCitizenOnboarded(issuingState, onboardingCountryDrop, citizen);\\n                }\\n                s.daos[issuingStateHash].verifiedCount++;\\n            }\\n            uint256 UNOnboardingDrop = s.daos[UNHash].bonusBase / s.daos[UNHash].verifiedCount;\\n            if (UNOnboardingDrop > 1) {\\n                GovernanceToken(s.daos[UNHash].token).mint(citizen, UNOnboardingDrop);\\n                emit GlobalCitizenOnboarded(\\\"United Nations\\\", UNOnboardingDrop, citizen);\\n            }\\n            s.daos[UNHash].verifiedCount++;\\n\\n            s.passportHolders[citizen] = PassportHolder({\\n                citizenship: revealedData.issuingState,\\n                revalidateAt: expiresAt,\\n                isQualified: true\\n            });\\n        } else {\\n            revert(\\\"Not eligible: Expired\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Pauses all contract functions with the whenNotPaused modifier\\n     * @dev Can only be called by the WorldMultiSig contract\\n     */\\n    function pause() public {\\n        WIPStorage storage s = getStorage();\\n        require(msg.sender == address(s.worldMultiSig), \\\"only wolrdMultiSig\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses contract functions\\n     * @dev Can only be called by the WorldMultiSig contract\\n     */\\n    function unpause() public {\\n        WIPStorage storage s = getStorage();\\n        require(msg.sender == address(s.worldMultiSig), \\\"only wolrdMultiSig\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Main function for claiming daily tokens, submitting proposals, and voting\\n     * @dev Handles multiple operations: token claiming, proposal submission, and voting on previous proposals\\n     * @param proposals Array of proposal texts being submitted\\n     * @param votes Array of VoteElement arrays for voting on previous proposals\\n     * @param accounts Array of addresses to claim/propose/vote on behalf of (if authorized)\\n     * @custom:security Uses quadratic voting for same-country proposals and cubic voting for cross-country proposals\\n     */\\n    function claimBatch(string[] memory proposals, VoteElement[][] memory votes, address[] memory accounts) public {\\n        require(proposals.length == votes.length, \\\"array lengths inconsistent\\\");\\n        require(proposals.length == accounts.length, \\\"array lengths inconsistent\\\");\\n        for (uint256 i = 0; i < proposals.length; i++) {\\n            claim(proposals[i], votes[i], accounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Main function for claiming daily tokens, submitting proposals, and voting\\n     * @dev Handles multiple operations: token claiming, proposal submission, and voting on previous proposals\\n     * @param newProposal Text of the new proposal being submitted\\n     * @param vote Array of VoteElement structs for voting on previous proposals\\n     * @param onBehalfOf Address to claim/propose/vote on behalf of (if authorized)\\n     * @custom:security Uses quadratic voting for same-country proposals and cubic voting for cross-country proposals\\n     */\\n    function claim(\\n        string memory newProposal,\\n        VoteElement[] memory vote,\\n        address onBehalfOf\\n    ) public nonReentrant whenNotPaused {\\n        WIPStorage storage s = getStorage();\\n        {\\n            require(bytes(newProposal).length > 0, \\\"Empty proposal\\\");\\n            require(bytes(newProposal).length <= 1337, \\\"Your idea is too transcendental, use IPFS link\\\");\\n            require(s.passportHolders[onBehalfOf].isQualified, \\\"Not eligible: Not a DAO citizen\\\");\\n            require(s.passportHolders[onBehalfOf].revalidateAt > block.timestamp, \\\"Not eligible: Expired\\\");\\n        }\\n\\n        uint256 day = currentDay();\\n        uint256 proposalCntYesterday = s.daily[day - 1].proposalCnt;\\n        uint256 balance = balanceOf(onBehalfOf);\\n        uint256 spent = 0;\\n        string memory citizenship = s.passportHolders[onBehalfOf].citizenship;\\n        bytes32 citizenshipHash = keccak256(bytes(citizenship));\\n        {\\n            if (address(s.daos[citizenshipHash].token) == address(0)) {\\n                revert(\\\"Not eligible: Not a DAO citizen\\\");\\n            }\\n        }\\n        uint256 daysNotClaimed = day - s.lastClaimed[onBehalfOf];\\n        require(daysNotClaimed > 0, \\\"Already claimed\\\");\\n        s.lastClaimed[onBehalfOf] = day;\\n        if (proposalCntYesterday > 1 || (proposalCntYesterday > 0 && daysNotClaimed > 1)) {\\n            if (balance > 0) {\\n                require(vote.length > 0, \\\"No vote\\\");\\n                // Require voting\\n                for (uint256 i = 0; i < vote.length; i++) {\\n                    VoteElement memory voteElement = vote[i];\\n                    {\\n                        bool proposalExists = s.daily[day - 1].proposals[voteElement.proposal].exists;\\n                        require(proposalExists, \\\"Proposal is not in daily menu :(\\\");\\n                    }\\n                    require(voteElement.scoresGiven <= MAX_SCORE_ALLOCATION, \\\"Score allocation exceeds maximum\\\");\\n                    address proposer = s.daily[day - 1].proposals[voteElement.proposal].proposer;\\n                    require(proposer != onBehalfOf, \\\"You cannot vote for yourself\\\");\\n                    string memory proposerCitizenship = s.passportHolders[proposer].citizenship;\\n                    {\\n                        bytes32 proposerCountry = keccak256(bytes(proposerCitizenship));\\n                        uint256 value = 0;\\n                        if (citizenshipHash == proposerCountry) {\\n                            value += voteElement.scoresGiven * voteElement.scoresGiven;\\n                        } else {\\n                            require(\\n                                voteElement.scoresGiven > 3,\\n                                \\\"Cross-country votes require committing at least 4 points\\\"\\n                            );\\n                            value += voteElement.scoresGiven * voteElement.scoresGiven * voteElement.scoresGiven;\\n                        }\\n                        spent += value;\\n                        require(spent * 1 ether <= balance, \\\"Not enough balance\\\");\\n                        s.proposalScores[voteElement.proposal] += value;\\n                        emit ProposalScoreUpdatedByCountry(value, day, citizenshipHash, voteElement.proposal);\\n                        emit ProposalScoreUpdatedByAddress(value, day, proposer, voteElement.proposal);\\n                        {\\n                            uint256 decimals = GovernanceToken(s.daos[proposerCountry].token).decimals();\\n                            GovernanceToken(s.daos[proposerCountry].token).mint(\\n                                proposer,\\n                                voteElement.scoresGiven * 10 ** decimals\\n                            );\\n                        }\\n                        {\\n                            uint256 decimals = GovernanceToken(s.daos[UNHash].token).decimals();\\n                            GovernanceToken(s.daos[UNHash].token).mint(\\n                                proposer,\\n                                (voteElement.scoresGiven * 10 ** decimals * s.daos[proposerCountry].verifiedCount) /\\n                                    s.daos[UNHash].verifiedCount\\n                            );\\n                        }\\n                    }\\n                    {\\n                        emit VotingByAddress(\\n                            onBehalfOf,\\n                            day,\\n                            voteElement.proposal,\\n                            citizenship,\\n                            proposerCitizenship,\\n                            voteElement.scoresGiven\\n                        );\\n                        emit VotingByCountry(\\n                            citizenshipHash,\\n                            day,\\n                            voteElement.proposal,\\n                            onBehalfOf,\\n                            proposer,\\n                            proposerCitizenship,\\n                            voteElement.scoresGiven\\n                        );\\n                    }\\n                }\\n                require((spent * 1 ether) > CLAIMABLE_AMOUNT / 2, \\\"you must spend at least half of your daily balance\\\");\\n            }\\n        } else {\\n            uint256 daysWithoutProposal = day - s.lastProposalDay;\\n            if (daysWithoutProposal > 1) {\\n                uint256 bonus = getNoProposalBonus(day) * CLAIMABLE_AMOUNT;\\n                GovernanceToken(s.daos[citizenshipHash].token).mint(onBehalfOf, bonus);\\n            }\\n        }\\n        s.lastProposalDay = day;\\n        // return;\\n        bytes32 newProposalHash = keccak256(bytes(newProposal));\\n        require(!s.daily[day].proposals[newProposalHash].exists, \\\"Proposal already exists\\\");\\n        s.daily[day].proposals[newProposalHash] = DailyProposal({\\n            proposal: newProposalHash,\\n            score: 0,\\n            proposer: onBehalfOf,\\n            exists: true\\n        });\\n        s.daily[day].proposalCnt++;\\n        bool isAuthorized = msg.sender == onBehalfOf ||\\n            (allowance(onBehalfOf, msg.sender) > CLAIMABLE_AMOUNT &&\\n                allowance(onBehalfOf, msg.sender) >= spent * 1 ether);\\n        require(isAuthorized, \\\"Not authorized\\\");\\n        if (msg.sender != onBehalfOf) {\\n            uint256 allowance = allowance(msg.sender, onBehalfOf);\\n            require(allowance >= spent * 1 ether, \\\"Not authorized\\\");\\n            _approve(msg.sender, onBehalfOf, allowance - spent * 1 ether);\\n        }\\n        _burn(onBehalfOf, spent * 1 ether);\\n        // This is done to enshrine active voting, if you want to disappear for a while, you can do it\\n        // but it's not worth to try sniping a good day.\\n        uint256 accumulatedCoins = daysNotClaimed > 7 ? daysNotClaimed * CLAIMABLE_AMOUNT : 0;\\n        _mint(onBehalfOf, CLAIMABLE_AMOUNT + accumulatedCoins);\\n        uint256 scoreWhenProposed = s.proposalScores[newProposalHash];\\n        emit ProposingByAddress(onBehalfOf, day, newProposalHash, newProposal, scoreWhenProposed);\\n        emit ProposingByCountry(citizenshipHash, day, newProposalHash, newProposal, citizenship, scoreWhenProposed);\\n    }\\n\\n    /**\\n     * @notice Calculates bonus tokens for days without proposals\\n     * @dev Rewards users who claim after days with no proposals\\n     * @param day The day to calculate the bonus for\\n     * @return uint256 The bonus multiplier (days without proposals squared)\\n     */\\n    function getNoProposalBonus(uint256 day) public view returns (uint256) {\\n        WIPStorage storage s = getStorage();\\n        uint256 daysWithoutProposal = day - s.lastProposalDay;\\n        if (daysWithoutProposal > 2) {\\n            return (daysWithoutProposal * daysWithoutProposal);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Gets the number of proposals for a specific day\\n     * @param day The day number to query\\n     * @return uint256 Number of proposals submitted on that day\\n     */\\n    function getDayProposalCnt(uint256 day) public view returns (uint256) {\\n        WIPStorage storage s = getStorage();\\n        return s.daily[day].proposalCnt;\\n    }\\n\\n    /**\\n     * @notice Gets the number of proposals from yesterday\\n     * @return uint256 Number of proposals submitted yesterday\\n     */\\n    function getYesterdayProposalCnt() public view returns (uint256) {\\n        WIPStorage storage s = getStorage();\\n        return s.daily[currentDay() - 1].proposalCnt;\\n    }\\n\\n    /**\\n     * @notice Checks if an account has already claimed tokens today\\n     * @param account The address to check\\n     * @return bool True if the account has claimed today\\n     */\\n    function votedToday(address account) public view returns (bool) {\\n        WIPStorage storage s = getStorage();\\n        return s.lastClaimed[account] == currentDay();\\n    }\\n\\n    /**\\n     * @notice Event emitted when a user changes their wallet address\\n     * @param oldWallet The previous wallet address\\n     * @param newWallet The new wallet address\\n     */\\n    event WalletChanged(address indexed oldWallet, address indexed newWallet);\\n\\n    /**\\n     * @notice Allows a citizen to transfer their passport to a new wallet\\n     * @dev Moves citizenship data from the caller to the new wallet address\\n     * @param newWallet Address of the new wallet\\n     * @custom:security Can only be called by a qualified passport holder who hasn't claimed today\\n     */\\n    function changeWallet(address newWallet) external nonReentrant whenNotPaused {\\n        WIPStorage storage s = getStorage();\\n        require(s.passportHolders[msg.sender].isQualified, \\\"only passport holder\\\");\\n        uint256 day = currentDay();\\n        uint256 daysNotClaimed = day - s.lastClaimed[msg.sender];\\n        require(daysNotClaimed > 0, \\\"can change wallet only before claiming\\\");\\n\\n        s.passportHolders[newWallet] = PassportHolder({\\n            citizenship: s.passportHolders[msg.sender].citizenship,\\n            revalidateAt: s.passportHolders[msg.sender].revalidateAt,\\n            isQualified: s.passportHolders[msg.sender].isQualified\\n        });\\n\\n        delete s.passportHolders[msg.sender].citizenship;\\n        delete s.passportHolders[msg.sender].revalidateAt;\\n        delete s.passportHolders[msg.sender].isQualified;\\n\\n        emit WalletChanged(msg.sender, newWallet);\\n    }\\n}\\n\",\"keccak256\":\"0xdf8cec45da86b49e7dc35442bf0decb196ba75f798779fd372684c11b5746eaf\",\"license\":\"MIT\"},\"contracts/WorldMultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.28;\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nstruct WorldStorage {\\n    address[] countries;\\n    mapping(address => bool) isCountry;\\n    address WIP;\\n    mapping(bytes32 => mapping(address => bool)) whitelistedTxs;\\n    mapping(bytes32 => bool) executedTxs;\\n    uint256 nonce;\\n    address initialOperator;\\n    uint256 initialOperatorExpiresAt;\\n}\\n\\n/**\\n * @title World MultiSig\\n * @author Peeramid\\n * @notice World MultiSig is a multi-signature contract that allows a group of countries to execute transactions.\\n * @dev It allows InitialOperator to have authority over the contract for 365 days.\\n */\\ncontract WorldMultiSigV1 is Initializable {\\n    function getStorage() internal pure returns (WorldStorage storage s) {\\n        bytes32 position = keccak256(\\\"contracts.storage.WorldMultiSig\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    event WhitelistedTx(bytes32 indexed txHash, address indexed country);\\n    event ExecutedTx(bytes32 indexed txHash, address indexed country, bytes returnData);\\n    event RevokedTx(bytes32 indexed txHash, address indexed country);\\n\\n    function initializeByWIP(address initialOperator) public initializer {\\n        WorldStorage storage s = getStorage();\\n        s.WIP = msg.sender;\\n        s.initialOperator = initialOperator;\\n        s.initialOperatorExpiresAt = block.timestamp + 365 days;\\n    }\\n\\n    function renounceInitialOperator() public {\\n        WorldStorage storage s = getStorage();\\n        require(msg.sender == s.initialOperator, \\\"msg.sender is not the initial operator\\\");\\n        s.initialOperator = address(0);\\n        s.initialOperatorExpiresAt = 0;\\n    }\\n\\n    function transferInitialOperator(address newInitialOperator) public {\\n        WorldStorage storage s = getStorage();\\n        require(msg.sender == s.initialOperator, \\\"msg.sender is not the initial operator\\\");\\n        s.initialOperator = newInitialOperator;\\n    }\\n\\n    function getInitialOperator() public view returns (address operator, uint256 timeLeft) {\\n        WorldStorage storage s = getStorage();\\n        return (\\n            s.initialOperator,\\n            s.initialOperatorExpiresAt > block.timestamp ? s.initialOperatorExpiresAt - block.timestamp : 0\\n        );\\n    }\\n\\n    function addCountry(address country) public {\\n        WorldStorage storage s = getStorage();\\n        require(msg.sender == s.WIP, \\\"msg.sender is not the WIP\\\");\\n        require(!s.isCountry[country], \\\"country already exists\\\");\\n        require(country != address(0), \\\"country is the zero address\\\");\\n        s.isCountry[country] = true;\\n        s.countries.push(country);\\n    }\\n\\n    function whitelistTx(bytes32 txHash) public {\\n        WorldStorage storage s = getStorage();\\n        require(s.isCountry[msg.sender], \\\"msg.sender is not a country\\\");\\n        s.whitelistedTxs[txHash][msg.sender] = true;\\n        emit WhitelistedTx(txHash, msg.sender);\\n    }\\n\\n    function revokeTx(bytes32 txHash) public {\\n        WorldStorage storage s = getStorage();\\n        require(s.isCountry[msg.sender], \\\"msg.sender is not a country\\\");\\n        require(s.whitelistedTxs[txHash][msg.sender], \\\"tx is not whitelisted\\\");\\n        s.whitelistedTxs[txHash][msg.sender] = false;\\n        emit RevokedTx(txHash, msg.sender);\\n    }\\n\\n    function execute(bytes calldata data, address destination) public {\\n        WorldStorage storage s = getStorage();\\n        bytes32 txHash = keccak256(abi.encodePacked(data, s.nonce));\\n        require(s.countries.length > 0, \\\"no countries\\\");\\n        if (msg.sender == s.initialOperator) {\\n            require(block.timestamp < s.initialOperatorExpiresAt, \\\"initial operator expired\\\");\\n        } else\\n            for (uint256 i = 0; i < s.countries.length; i++) {\\n                if (s.isCountry[s.countries[i]]) {\\n                    require(s.whitelistedTxs[txHash][s.countries[i]], \\\"tx is not whitelisted\\\");\\n                }\\n            }\\n        require(!s.executedTxs[txHash], \\\"tx is already executed\\\");\\n        s.nonce++;\\n        (bool success, bytes memory returnData) = destination.call(data);\\n        emit ExecutedTx(txHash, destination, returnData);\\n        require(success, \\\"tx failed\\\");\\n    }\\n\\n    function getWIP() public view returns (address) {\\n        WorldStorage storage s = getStorage();\\n        return s.WIP;\\n    }\\n}\\n\",\"keccak256\":\"0x315dc86cf46b5e6004768428247b578eb44be7fac6216558c33e358f7b4e1cba\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x6080604052346019576040516147be61001f82396147be90f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806306fdde03146101f257806308a9d66d146101ed578063095ea7b3146101e857806318160ddd146101e35780631c112dae146101de57806323b872dd146101d95780632fa2cc4e146101d4578063313ce567146101cf5780633b62c7ef146101ca5780633f4ba83a146101c557806342966c68146101c05780635c9302c9146101bb5780635c975abb146101b65780636f499bec146101b157806370a08231146101ac578063733e8218146101a757806379cc6790146101a257806381497adf1461019d5780638456cb59146101985780638789748c1461019357806395d89b411461018e57806398b9a2dc146101895780639c761d13146101845780639d22a1a41461017f578063a9059cbb1461017a578063d21e82ab14610175578063d3622a4114610170578063dd62ed3e1461016b578063f8c8765e146101665763fdc609670361020257610d1a565b610b58565b610b00565b610ac2565b610aa7565b610a8b565b610a70565b610a55565b610a3d565b610a22565b610a09565b61082e565b610813565b6107fa565b6107df565b6107c4565b6107ab565b6105c2565b6105a7565b61058f565b610572565b61054b565b6104bd565b610496565b610427565b6103d0565b610376565b610348565b6102d1565b610276565b600091031261020257565b600080fd5b60005b83811061021a5750506000910152565b818101518382015260200161020a565b61024b61025460209361025e9361023f815190565b80835293849260200190565b95869101610207565b601f01601f191690565b0190565b60208082526102739291019061022a565b90565b34610202576102863660046101f7565b61029d610291610e2a565b60405191829182610262565b0390f35b805b0361020257565b905035906102b7826102a1565b565b9060208282031261020257610273916102aa565b9052565b346102025761029d6102ec6102e73660046102b9565b610e7b565b6040515b9182918290815260200190565b6001600160a01b031690565b6001600160a01b0381166102a3565b905035906102b782610309565b9190604083820312610202576102739061033f8185610318565b936020016102aa565b346102025761029d61036461035e366004610325565b90610ea3565b60405191829182901515815260200190565b34610202576103863660046101f7565b61029d6102ec610eb3565b610273906102fd906001600160a01b031682565b61027390610391565b610273906103a5565b6102cd906103ae565b6020810192916102b791906103b7565b34610202576103e03660046101f7565b61029d6103eb610edf565b604051918291826103c0565b9091606082840312610202576102736104108484610318565b9361041e8160208601610318565b936040016102aa565b346102025761029d61036461043d3660046103f7565b91610ef2565b906060806102b79361045d600082015160008601906103b7565b6020818101516001600160a01b03169085015261047f60408201516040860152565b0151910152565b6080810192916102b79190610443565b346102025761029d6104b16104ac3660046102b9565b610fbb565b60405191829182610486565b34610202576104cd3660046101f7565b61029d6104d8610ff3565b6040519182918260ff909116815260200190565b906020828203126102025761027391610318565b9061027390604080610521606084016000870151858203600087015261022a565b9461053160208201516020860152565b01511515910152565b602080825261027392910190610500565b346102025761029d6105666105613660046104ec565b611091565b6040519182918261053a565b34610202576105823660046101f7565b61058a6110fc565b604051005b346102025761058a6105a23660046102b9565b61113d565b34610202576105b73660046101f7565b61029d6102ec611192565b34610202576105d23660046101f7565b61029d6103646111a8565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761061457604052565b6105dd565b906102b761062660405190565b92836105f3565b6001600160401b03811161061457602090601f01601f19160190565b90826000939282370152565b9092919261066a6106658261062d565b610619565b93818552602085019082840111610202576102b792610649565b9080601f830112156102025781602061027393359101610655565b6001600160401b0381116106145760208091020190565b9190604083820312610202576106e5906106d06040610619565b936106db82826102aa565b85526020016102aa565b6020830152565b909291926106fc6106658261069f565b93818552604060208601920283019281841161020257915b8383106107215750505050565b602060409161073084866106b6565b815201920191610714565b9080601f8301121561020257816020610273933591016106ec565b90916060828403126102025781356001600160401b038111610202578361077e918401610684565b926020830135906001600160401b038211610202576107a28161027393860161073b565b93604001610318565b346102025761058a6107be366004610756565b9161247b565b346102025761029d6102ec6107da3660046104ec565b612486565b346102025761029d6103646107f53660046104ec565b6124ac565b346102025761058a61080d366004610325565b906124d8565b346102025761029d6102ec6108293660046102b9565b6124e8565b346102025761083e3660046101f7565b61058a612521565b9291906108556106658261069f565b93818552602080860192028101918383116102025781905b83821061087b575050505050565b81356001600160401b0381116102025760209161089b8784938701610684565b81520191019061086d565b9080601f830112156102025781602061027393359101610846565b9291906108d06106658261069f565b93818552602080860192028101918383116102025781905b8382106108f6575050505050565b81356001600160401b03811161020257602091610916878493870161073b565b8152019101906108e8565b9080601f8301121561020257816020610273933591016108c1565b9092919261094c6106658261069f565b938185526020808601920283019281841161020257915b8383106109705750505050565b6020809161097e8486610318565b815201920191610963565b9080601f83011215610202578160206102739335910161093c565b916060838303126102025782356001600160401b03811161020257826109cb9185016108a6565b9260208101356001600160401b03811161020257836109eb918301610921565b9260408201356001600160401b038111610202576102739201610989565b346102025761058a610a1c3660046109a4565b91612580565b3461020257610a323660046101f7565b61029d610291612624565b346102025761058a610a503660046104ec565b612c1d565b346102025761029d6102ec610a6b3660046102b9565b612c26565b3461020257610a803660046101f7565b61029d6103eb612c40565b346102025761029d610364610aa1366004610325565b90612c4d565b346102025761029d610364610abd3660046102b9565b612c57565b3461020257610ad23660046101f7565b61029d6102ec612c76565b91906040838203126102025761027390610af78185610318565b93602001610318565b346102025761029d6102ec610b16366004610add565b90612c9d565b60808183031261020257610b308282610318565b92610273610b418460208501610318565b93610b4f8160408601610318565b93606001610318565b346102025761058a610b6b366004610b1c565b929190916136b4565b6001600160401b0381116106145760200290565b90929192610b9861066582610b74565b93602085920283019281841161020257915b838310610bb75750505050565b60208091610bc584866102aa565b815201920191610baa565b9080601f830112156102025761027391600290610b88565b90929192610bf861066582610b74565b93604085920283019281841161020257915b838310610c175750505050565b6020604091610c268486610bd0565b815201920191610c0a565b9080601f830112156102025761027391600290610be8565b90929192610c5961066582610b74565b93602085920283019281841161020257915b838310610c785750505050565b60208091610c8684866102aa565b815201920191610c6b565b9080601f830112156102025761027391601590610c49565b91906103a08382031261020257610cfe90610cc46080610619565b93610ccf8282610bd0565b8552610cde8260408301610c31565b6020860152610cf08260c08301610bd0565b604086015261010001610c91565b6060830152565b906103a0828203126102025761027391610ca9565b346102025761058a610d2d366004610d05565b614084565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610d68575b6020831014610d6357565b610d32565b91607f1691610d58565b80546000939291610d8f610d8583610d48565b8085529360200190565b9160018116908115610de15750600114610da857505050565b610dbb9192939450600052602060002090565b916000925b818410610dcd5750500190565b805484840152602090930192600101610dc0565b92949550505060ff1916825215156020020190565b9061027391610d72565b906102b7610e1a92610e1160405190565b93848092610df6565b03836105f3565b61027390610e00565b61027360036000805160206147728339815191525b01610e21565b6102736102736102739290565b90610e5c90610e45565b600052602052604060002090565b6102739081565b6102739054610e6a565b6001610e9d61027392610e8c600090565b506005610e976140ff565b01610e52565b01610e71565b610eae919033614107565b600190565b6102736002600080516020614772833981519152610e9d565b610273906102fd565b6102739054610ecc565b6102736001610eec6140ff565b01610ed5565b610eae9290610f0282338361413a565b919091614199565b6102736080610619565b610f1c610f0a565b90602080808085600081520160005b81520160008152016000905250565b610273610f14565b90610e5c565b906102cd90610ecc565b906102b7610fab6003610f63610f0a565b94610f76610f7082610ed5565b87610f48565b610f95610f8560018301610ed5565b6001600160a01b03166020880152565b610e9d610fa460028301610e71565b6040880152565b6060840152565b61027390610f52565b610fdb61027391610fca610f3a565b506002610fd56140ff565b01610f42565b610fb2565b610fed6102736102739290565b60ff1690565b6102736012610fe0565b6102736060610619565b61100f610ffd565b9060208080846060610f2b565b610273611007565b90610e5c906103ae565b61027390610fed565b610273905461102e565b906102b761107f6002611052610ffd565b9461106361105f82610e00565b8752565b61107961107260018301610e71565b6020880152565b01611037565b15156040840152565b61027390611041565b6110b1610273916110a061101c565b5060046110ab6140ff565b01611024565b611088565b156110bd57565b60405162461bcd60e51b81526020600482015260126024820152716f6e6c7920776f6c72644d756c746953696760701b604482015280606481015b0390fd5b6111356111076140ff565b61112f6111226102fd61111d6007339501610ed5565b6103ae565b916001600160a01b031690565b146110b6565b6102b761429e565b6102b790336142a6565b6142a6565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b90611182565b9190565b90811561118d570490565b61114c565b610273426111a262015180610e45565b90611178565b6102736000600080516020614792833981519152611079565b906111d492916111cf6142dd565b6111dc565b6102b761434b565b906102b792916111ea614379565b611913565b156111f657565b60405162461bcd60e51b815260206004820152600e60248201526d115b5c1d1e481c1c9bdc1bdcd85b60921b6044820152606490fd5b1561123357565b60405162461bcd60e51b815260206004820152602e60248201527f596f7572206964656120697320746f6f207472616e7363656e64656e74616c2c60448201526d207573652049504653206c696e6b60901b6064820152608490fd5b1561129657565b60405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656c696769626c653a204e6f7420612044414f20636974697a656e006044820152606490fd5b156112e257565b60405162461bcd60e51b8152602060048201526015602482015274139bdd08195b1a59da589b194e88115e1c1a5c9959605a1b6044820152606490fd5b9190820391821161132c57565b611162565b6102fd6102736102739290565b61027390611331565b1561134e57565b60405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606490fd5b90600019905b9181191691161790565b906113a56102736113ac92610e45565b8254611385565b9055565b6102736803782dace9d9000000610e45565b8181029291811591840414171561132c57565b6001600160a01b0390911681526040810192916102b79160200152565b0152565b6040513d6000823e3d90fd5b1561140957565b60405162461bcd60e51b81526020600482015260076024820152664e6f20766f746560c81b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b90611457825190565b811015611468576020809102010190565b611438565b6102739060a01c610fed565b610273905461146d565b1561148a57565b60405162461bcd60e51b8152806110f8600482016020808252818101527f50726f706f73616c206973206e6f7420696e206461696c79206d656e75203a28604082015260600190565b610273620dbba0610e45565b156114e657565b60405162461bcd60e51b8152806110f8600482016020808252818101527f53636f726520616c6c6f636174696f6e2065786365656473206d6178696d756d604082015260600190565b1561153657565b60405162461bcd60e51b815260206004820152601c60248201527f596f752063616e6e6f7420766f746520666f7220796f757273656c66000000006044820152606490fd5b1561158257565b60405162461bcd60e51b815260206004820152603860248201527f43726f73732d636f756e74727920766f746573207265717569726520636f6d6d60448201527f697474696e67206174206c65617374203420706f696e747300000000000000006064820152608490fd5b9190820180921161132c57565b1561160157565b60405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606490fd5b60ff81166102a3565b905051906102b78261163b565b906020828203126102025761027391611644565b6102736102736102739260ff1690565b604d811161132c57600a0a90565b61027360016591a2b3c4d5e760c91b03610e45565b9392906116c86102b7936116ba604093606089019089820360008b015261022a565b90878203602089015261022a565b940152565b9493916060916102b7946117086116c8936116f860808b019460008c01906001600160a01b03169052565b6001600160a01b031660208a0152565b878203604089015261022a565b1561171c57565b60405162461bcd60e51b815260206004820152603260248201527f796f75206d757374207370656e64206174206c656173742068616c66206f6620604482015271796f7572206461696c792062616c616e636560701b6064820152608490fd5b1561178357565b60405162461bcd60e51b815260206004820152601760248201527f50726f706f73616c20616c7265616479206578697374730000000000000000006044820152606490fd5b634e487b7160e01b600052600060045260246000fd5b906113a56102736113ac9290565b906001600160a01b039061138b565b9061180b6102736113ac926103ae565b82546117ec565b9060ff60a01b9060a01b61138b565b906118316102736113ac92151590565b8254611812565b6102b7919061189a9060609060029061185981611853875190565b906117de565b6118716001820161186b602088015190565b90611395565b61189182820161188b60408801516001600160a01b031690565b906117fb565b01920151151590565b90611821565b906102b791611838565b600019811461132c5760010190565b156118c057565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b929160206116c86102b7936040870190878203600089015261022a565b909161191d6140ff565b9061193c611929845190565b61193661117e6000610e45565b116111ef565b61195c611947845190565b61195561117e610539610e45565b111561122c565b61197661197160026110798460048701611024565b61128f565b61199261198b6001610e9d8460048701611024565b42106112db565b61199a611192565b906119c06001610e9d600586016119ba866119b485610e45565b9061131f565b90610e52565b946119ca82612486565b956119d56000610e45565b6119e76000610e3f8660048a01611024565b97886119fb6119f4825190565b9160200190565b2093611a1261111d6000610eec8860028d01610f42565b611a226111226102fd600061133e565b1461129657611a40876119b4611a3b8960098d01611024565b610e71565b93611a5885611a5261117e6000610e45565b11611347565b611a6e88611a698960098d01611024565b611395565b80611a7c61117e6001610e45565b1190811561244a575b50156123af5781611a9961117e6000610e45565b11611d83575b50505b611aaf8560088801611395565b8651602088012095611ac48660058301610e52565b611acf908890610f42565b600201611adb90611479565b15611ae59061177c565b866001866000611af3610f0a565b938452611aff90610e45565b60208401526001600160a01b0316604083015215156060820152611b268760058401610e52565b611b31908990610f42565b90611b3b916118a0565b611b488660058301610e52565b600101611b5481610e71565b611b5d906118aa565b611b6691611395565b611c1192611a3b926006929190611bce906001600160a01b03891633148015611d31575b611b93906118b9565b33611ba66001600160a01b038b16611122565b03611cd7575b611bc88991611bc2670de0b6b3a7640000610e45565b906113c2565b906142a6565b80611bdc61117e6007610e45565b1115611cc457611bf1611c0991611bc26113b0565b611c038891611bfe6113b0565b6115ed565b90614399565b018690610f42565b91838590879285611c52611c4e611c487f70cba775c3e76796edd86bb83706d1b2a6c2e2a1cde87642779e63fd4395fb08946103ae565b94610e45565b9490565b94611c68611c5f60405190565b928392836118f6565b0390a4919293949094611cbf611cac611ca8611ca27f8351218b94012719a89f6545ec40ee83336d5d4fb6ce41e5ebef5e8d79d65eb19690565b96610e45565b9690565b96611cb660405190565b93849384611698565b0390a4565b50611c09611cd26000610e45565b611bf1565b611d2c611ce48a33612c9d565b611d0a81611d0361117e61027387611bc2670de0b6b3a7640000610e45565b10156118b9565b3390611d268c916119b486611bc2670de0b6b3a7640000610e45565b91614107565b611bac565b50611d3c338a612c9d565b611d4a61117e6102736113b0565b118015611b8a5750611b93611d5f338b612c9d565b611d7a61117e61027385611bc2670de0b6b3a7640000610e45565b10159050611b8a565b91959496999093929897611dab611d98845190565b611da561117e6000610e45565b11611402565b611db56000610e45565b80611dc461117e610273875190565b10156123635780611e616002610eec8f611e588c6119ba6005600094611e29611e248f611df5611e1e9e8c9261144e565b519d8e611e188b80611e11898b016119ba8e6119b46001610e45565b0192015190565b90610f42565b01611479565b611483565b611e4c611e3760208d015190565b611e4561117e6102736114d3565b11156114df565b01916119b46001610e45565b01611e18865190565b91611e7f83611e786001600160a01b038e16611122565b141561152f565b8d611e926000610e3f8660048501611024565b9384611e9f6119f4825190565b20611eaa6000610e45565b818b0361231d57611ed390611ecd611ec3602088015190565b6020880151611bc2565b906115ed565b9c5b8d611edf916115ed565b9c8d611ef2670de0b6b3a7640000610e45565b611efb916113c2565b8c1015611f07906115fa565b8060068501611f14875190565b611f1d91610f42565b90611f2782610e71565b90611f31916115ed565b611f3a91611395565b808b8e611f45885190565b927f66ef502c7cd31bf83c0f171cfcb00429a080fc441f2d0ca6b5d509816890cadf90611f7190610e45565b91611f7b90610e45565b9293611f8660405190565b908152602090a4828d611f97875190565b927f7f609bde9e2a7dd1f0b887321f3041731906aeb5e74c719a16357e7353ccda3790611fc390610e45565b91611fcd90610e45565b92611fd7906103ae565b93611fe160405190565b908152602090a4611ff58160028501610f42565b611ffe90610ed5565b612007906103ae565b63313ce5679061201660405190565b60e09290921b8252816004815a93602094fa80156122d457612040916000916122d9575b50611665565b61205561111d6000610eec8560028901610f42565b906340c10f19906120758591611bc261206f60208b015190565b91611675565b92803b156102025761209d600080946120a861209060405190565b9788968795869460e01b90565b8452600484016113d5565b03925af180156122d457612307575b506120ec60206120d461111d6000610eec60028901611e18611683565b63313ce567906120e360405190565b93849260e01b90565b825260049082905afa80156122d45761210c916000916122d95750611665565b83600201612118611683565b61212191610f42565b61212a90610ed5565b612133906103ae565b936340c10f19928492612147602089015190565b9061215190611675565b61215a916113c2565b906121689060028401610f42565b60030161217490610e71565b61217d916113c2565b90600201612189611683565b61219291610f42565b60030161219e90610e71565b6121a791611178565b93803b156102025761209d600080946121cf6121c260405190565b9889968795869460e01b90565b03925af19485156122d4578e8e936122a9976122ae575b5083908d6121f2875190565b91928461220060208a015190565b94612234611cac611ca8611ca27fa272695cc3586057810376a069fd569ac27100eb02519d78188356ddfb9f58be966103ae565b0390a48b918a91906122a0612255602061224c895190565b97939498015190565b61228d6122896122837f30e6839a7d24f7dd44924cb1146ece539d7e290e2cf2e48ca013e4380d7e51749790565b97610e45565b9790565b9761229760405190565b948594856116cd565b0390a460010190565b611db5565b6122c79060005b6122bf81836105f3565b8101906101f7565b386121e6565b503d6122b5565b6113f6565b6122fa915060203d8111612300575b6122f281836105f3565b810190611651565b3861203a565b503d6122e8565b6123179060006122bf81836105f3565b386120b7565b61235d9061234261232f602088015190565b61233c61117e6003610e45565b1161157b565b611ecd611ec3612353602089015190565b6020890151611bc2565b9c611ed5565b5097989293509895939490506123a861238782611bc2670de0b6b3a7640000610e45565b6123a261117e6102736123986113b0565b6111a26002610e45565b11611715565b3880611a9f565b50506123c1856119b460088901610e71565b6123ce61117e6001610e45565b1115611aa2576123e86123e0866124e8565b611bc26113b0565b6123fd61111d6000610eec8760028c01610f42565b6340c10f19908690803b156102025761209d6000809461241f61209060405190565b03925af180156122d457612434575b50611aa2565b6124449060006122bf81836105f3565b3861242e565b905061245961117e6000610e45565b1180612466575b38611a85565b508361247561117e6001610e45565b11612460565b906102b792916111c1565b611a3b61027391612495600090565b5060006000805160206147728339815191526110ab565b611a3b6124c6916124bb600090565b5060096110ab6140ff565b6124d461117e610273611192565b1490565b6102b7919061114782338361413a565b6124f9906119b46008610e9d6140ff565b8061250761117e6002610e45565b1161251757506102736000610e45565b80610273916113c2565b61252c6111076140ff565b6102b7614418565b1561253b57565b60405162461bcd60e51b815260206004820152601a60248201527f6172726179206c656e6774687320696e636f6e73697374656e740000000000006044820152606490fd5b929190926125a361258f825190565b61259d61117e610273885190565b14612534565b6125bc6125ae825190565b61259d61117e610273865190565b6125c66000610e45565b806125d561117e610273855190565b101561261d57612618906126126125ec828561144e565b516125f7838961144e565b516107be612605858961144e565b516001600160a01b031690565b60010190565b6125c6565b5050509050565b6102736004600080516020614772833981519152610e3f565b6111d4906126496142dd565b6102b790612655614379565b612aca565b1561266157565b60405162461bcd60e51b815260206004820152601460248201527337b7363c903830b9b9b837b93a103437b63232b960611b6044820152606490fd5b156126a457565b60405162461bcd60e51b815260206004820152602660248201527f63616e206368616e67652077616c6c6574206f6e6c79206265666f726520636c60448201526561696d696e6760d01b6064820152608490fd5b9160001960089290920291821b911b61138b565b921b90565b91906127226102736113ac93610e45565b9083546126f8565b6102b791600091612711565b818110612741575050565b8061274f600060019361272a565b01612736565b9190601f811161276457505050565b6127766102b793600052602060002090565b906020601f840181900483019310612799575b6020601f909101045b0190612736565b9091508190612789565b600019600883021c1916906002021790565b906127be815190565b906001600160401b038211610614576127e1826127db8554610d48565b85612755565b602090601f831160011461280f576113ac929160009183612804575b50506127a3565b0151905038806127fd565b601f1983169161282485600052602060002090565b9260005b81811061286257509160029391856001969410612849575b50505002019055565b01516000196008601f8516021c19169055388080612840565b91936020600181928787015181550195019201612828565b906102b7916127b5565b9060ff9061138b565b9061289d6102736113ac92151590565b8254612884565b906128da604060026102b7946128c8600082016128c2600088015190565b9061287a565b6118916001820161186b602088015190565b9061288d565b906102b7916128a4565b906128fd90600019906020036008021c90565b8154169055565b9060009161292261291a82600052602060002090565b9283546127a3565b905555565b919290602082101561297f57601f8411600114612949576113ac9293506127a3565b509061297a6102b793600161297161296685600052602060002090565b92601f602091010490565b82019101612736565b612904565b506129b88293612996600194600052602060002090565b6127926020601f860104820192601f8616806129c0575b50601f602091010490565b600202179055565b6129cc908886036128ea565b386129ad565b9290916801000000000000000082116106145760201115612a1e5760208110156129ff576113ac916127a3565b60019160ff1916612a1584600052602060002090565b55600202019055565b60019150600202019055565b908154612a3681610d48565b90818311612a5f575b818310612a4d575b50505050565b612a5693612927565b38808080612a47565b612a6b838383876129d2565b612a3f565b60006102b791612a2a565b90600003612a8c576102b790612a70565b6117c8565b9190600861138b91029161270c60ff841b90565b9190612ab66102736113ac93151590565b908354612a91565b6102b791600091612aa5565b612bd760006002612bd16004612ade6140ff565b612af6612af18561107933858701611024565b61265a565b612b26612b14612b04611192565b6119b4611a3b3360098701611024565b612b2061117e88610e45565b1161269d565b612b9a85612b3633848601611024565b01612b89612b4b6001610e9d33878901611024565b612b80612b5e8961107933898b01611024565b91612b79612b73612b6d610ffd565b96610e21565b8c870152565b6020850152565b15156040830152565b612b9589848601611024565b6128e0565b612bb18580612bab33858701611024565b01612a7b565b612bc9856001612bc333858701611024565b0161272a565b013390611024565b01612abe565b7f64cbbd34f3faebfd04eff088ae5832f6d254dbb81820b0055e9d85c534aa700d90612c0b612c05336103ae565b916103ae565b91612c1560405190565b80805b0390a3565b6102b79061263d565b611a3b61027391612c35600090565b506006610fd56140ff565b6102736007610eec6140ff565b610eae9133610f02565b612c7161027391612c66600090565b506003610e976140ff565b611037565b6102736001610e9d6005612c886140ff565b016119ba612c94611192565b6119b485610e45565b61027391612cc7611a3b92612cb0600090565b5060016000805160206147728339815191526110ab565b611024565b6102739060401c610fed565b6102739054612ccc565b610273905b6001600160401b031690565b6102739054612ce2565b612ce76102736102739290565b906001600160401b039061138b565b612ce7610273610273926001600160401b031690565b90612d3f6102736113ac92612d19565b8254612d0a565b9068ff00000000000000009060401b61138b565b90612d6a6102736113ac92151590565b8254612d46565b6102cd90612cfd565b6020810192916102b79190612d71565b909192612db47ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b93612dc5612dc186612cd8565b1590565b93612dcf86612cf3565b80612dea612ddd6000612cfd565b916001600160401b031690565b1480612ed5575b90612dff612ddd6001612cfd565b1480612eb2575b90155b9081612ea9575b50612e9757612e3693612e2c612e266001612cfd565b88612d2f565b85612e87576132d9565b612e3d5750565b612e4990600090612d5a565b6001612e827fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291612e7960405190565b91829182612d7a565b0390a1565b612e92600188612d5a565b6132d9565b63f92ee8a960e01b6000908152600490fd5b15905038612e10565b50612e09612ebf306103ae565b3b612ecd61117e6000610e45565b149050612e06565b5085612df1565b90612ee96106658361062d565b918252565b612ef86003612edc565b6205749560ec1b602082015290565b610273612eee565b15612f1657565b60405162461bcd60e51b815260206004820152601460248201527315995c9a599a595c881a5cc81c995c5d5a5c995960621b6044820152606490fd5b15612f5957565b60405162461bcd60e51b815260206004820152601c60248201527f44414f20646973747269627574696f6e206973207265717569726564000000006044820152606490fd5b15612fa557565b60405162461bcd60e51b815260206004820152601960248201527f576f726c644d756c7469536967206973207265717569726564000000000000006044820152606490fd5b15612ff157565b60405162461bcd60e51b815260206004820152601c60248201527f496e697469616c206f70657261746f72206973207265717569726564000000006044820152606490fd5b6130406012612edc565b71556e69746564204e6174696f6e732044414f60701b602082015290565b610273613036565b6130706006612edc565b65554e2044414f60d01b602082015290565b610273613066565b8051825290610273906060806130c46130b2608085016020880151868203602088015261022a565b6040870151858203604087015261022a565b9401516001600160a01b0316910152565b60208082526102739291019061308a565b905051906102b782610309565b909291926131036106658261069f565b938185526020808601920283019281841161020257915b8383106131275750505050565b6020809161313584866130e6565b81520192019161311a565b9080601f83011215610202578151610273926020016130f3565b905051906102b7826102a1565b90916060828403126102025781516001600160401b0381116102025761319284610273928501613140565b936131a0816020860161315a565b9360400161315a565b6102739051610ecc565b6102b7919061186b906060906003906131cf8161188b876131a9565b6131ea6001820161188b60208801516001600160a01b031690565b611e116002820161186b604088015190565b906102b7916131b3565b9060208282031261020257610273916130e6565b1561322157565b60405162461bcd60e51b815260206004820152602a60248201527f576f726c644d756c7469536967206973206e6f7420636f6e74726f6c6c6564206044820152690627920746865205749560b41b6064820152608490fd5b600e815260209081015b6d556e69746564204e6174696f6e7360901b81520190565b6132cc610273936132bc606084019460008501906001600160a01b03169052565b6001600160a01b03166020830152565b6040818303910152613279565b6000613480919493946132fb6132ed612f07565b6132f5612f07565b90614437565b613303614454565b61331d816133166111226102fd8661133e565b1415612f0f565b613337846133306111226102fd8661133e565b1415612f52565b6133518661334a6111226102fd8661133e565b1415612f9e565b61336b856133646111226102fd8661133e565b1415612fea565b61337361446f565b61340e6134066133d96133e8613387611683565b6133ca3261339d613396610f0a565b938a850152565b6133a8612b7961305e565b6133ba6133b3613082565b6040850152565b6001600160a01b03166060830152565b604051928391602083016130d5565b602082018103825203826105f3565b9261111d6133fd6133f76140ff565b986103ae565b600189016117fb565b8386016117fb565b61342661341d61111d886103ae565b600786016117fb565b61344761343e613434611192565b6119b46001610e45565b60088601611395565b61345661111d60018601610ed5565b61347583639ca33c9e61346860405190565b9687958694859360e01b90565b835260048301610262565b03925af180156122d45761111d61111d9161352d93600091613691575b509561111d6134bc61111d6126058a6134b66000610e45565b9061144e565b613519610cfe6134d36126058c6134b66001610e45565b61350d6135126a011b1eea4c8e67b1a0000061350d6001946134fd6134f6610f0a565b998a610f48565b6001600160a01b03166020890152565b610e45565b6040860152565b61352860028801611e18611683565b6131fc565b9163027a5ed890833b15610202576135739361355c6000809461354f60405190565b9788958694859360e01b90565b83526001600160a01b031660048301526024820190565b03925af19081156122d45761111d600761359a926135a99560209561367b575b5001610ed5565b638aa140bb906120e360405190565b825260049082905afa80156122d4576135da9160009161364d575b506135d46111226102fd306103ae565b1461321a565b6135e2611683565b32906136066126056135fb612605866134b66000610e45565b946134b66001610e45565b6136376136317fce8afa6fd6580b8feafdfdab8ac12b1a23979b5e03f0f7c90d5a6fcdd4ada4049390565b936103ae565b93612c1861364460405190565b9283928361329b565b61366e915060203d8111613674575b61366681836105f3565b810190613206565b386135c4565b503d61365c565b61368b9060006122bf81836105f3565b38613593565b6136ae91503d806000833e6136a681836105f3565b810190613167565b5061349d565b906102b7939291612d8a565b6111d4906136cc6142dd565b6102b7906136d8614379565b613baa565b909291926136ed6106658261062d565b93818552602085019082840111610202576102b792610207565b9080601f83011215610202578151610273926020016136dd565b9291906137306106658261069f565b93818552602080860192028101918383116102025781905b838210613756575050505050565b81516001600160401b038111610202576020916137768784938701613707565b815201910190613748565b9080601f8301121561020257815161027392602001613721565b91909161016081840312610202576137b4610160610619565b9260008201516001600160401b03811161020257816137d4918401613707565b845260208201516001600160401b03811161020257816137f5918401613781565b602085015260408201516001600160401b0381116102025781613819918401613707565b604085015260608201516001600160401b038111610202578161383d918401613707565b606085015260808201516001600160401b0381116102025781613861918401613707565b608085015260a08201516001600160401b0381116102025781613885918401613707565b60a085015260c0820151916001600160401b038311610202576138ad826138f5948301613707565b60c08601526138bf8260e0830161315a565b60e08601526138d282610100830161315a565b6101008601526138e682610120830161315a565b6101208601526101400161315a565b610140830152565b8015156102a3565b905051906102b7826138fd565b919060a0838203126102025782516001600160401b038111610202578161393a91850161379b565b92613948826020830161315a565b926139568360408401613905565b926060830151906001600160401b0382116102025761397a81610273938601613707565b936080016130e6565b61398f61117e60029390565b6000915b8383106139a05750505050565b6139ba6139b36001928451815260200190565b9260200190565b92019190613993565b9061025e81604093613983565b6139dc61117e60029390565b6000915b8383106139ed5750505050565b6139fd6139b360019284516139c3565b920191906139e0565b613a1261117e60159390565b6000915b838310613a235750505050565b613a366139b36001928451815260200190565b92019190613a16565b9061010060606102b793613a5b60008201516000860190613983565b613a6d602082015160408601906139d0565b613a7f604082015160c0860190613983565b0151910190613a06565b6103a0810192916102b79190613a3f565b6001600160a01b03919091168152901515602082015260400190565b61025e613ace92602092613ac8815190565b94859290565b93849101610207565b61027391613ab6565b613af690613aed60405190565b91829182613ad7565b03902090565b613b0890600492613ab6565b632044414f60e01b81520190565b906102b7613b2360405190565b8093613b33602083019182613afc565b908103825203836105f3565b906102b7613b4c60405190565b8093613b33602083019182613ad7565b613b7f6102739492936132bc606084019560008501906001600160a01b03169052565b604081840391015261022a565b600e90613283565b61027390613b8c565b60405180613af681613b94565b613be36000613bb76140ff565b92613bc661111d838601610ed5565b613bd8836308e1547861346860405190565b835260048301613a89565b03925af180156122d457600080808080929391959094614054575b50613c5f90929493919384817f04881682880396c5d7f330e192fcd4f8b3d4645842908712b7a005170b3120cc91613c41613c3860405190565b92839283613a9a565b0390a1612dc1613c52613434611192565b611a698760098b01611024565b156112e2578151613c716119f4825190565b2090613c8861111d6000610eec8560028b01610f42565b613c986111226102fd600061133e565b03613f405750613cf560006133d9613ce6846133ca613cb985890151613b16565b6133ba613cc8878b0151613b3f565b6133b38c93613cdf613cd8610f0a565b978b890152565b6020870152565b61345661111d60018a01610ed5565b03925af19081156122d457600091613f25575b5090613d45613d2161111d612605856134b66000610e45565b613d38610cfe6134d3612605876134b66001610e45565b6135288360028a01610f42565b8390613d5e6126056135fb612605866134b66000610e45565b8451937fce8afa6fd6580b8feafdfdab8ac12b1a23979b5e03f0f7c90d5a6fcdd4ada40492613da490613d9190956103ae565b95613d9b60405190565b93849384613b5c565b0390a35b613dd2613dbe6002610e9d818801611e18611683565b6111a26003610e9d60028901611e18611683565b80613de061117e6001610e45565b11613e46575b50906004846110ab6000612b9595613e1d6003613e0b60026102b79c01611e18611683565b0161186b613e1882610e71565b6118aa565b015195613e3d600191613e36613e31610ffd565b998a52565b6020890152565b15156040870152565b613e6061111d6000610eec60028997969701611e18611683565b946340c10f19838397803b156102025761209d60008094613e90613e8360405190565b9c8d968795869460e01b90565b03925af19586156122d4576000612b95956004946110ab936102b79a613f09575b50867fc962c543f7754038c30dfa2ecf80cc21460e0dd165a30c7b72a5faff61641a5291613eef613ee9613ee3613b9d565b92610e45565b926103ae565b92613ef960405190565b600090a494955050509450613de6565b613f1f90843d81116122cd576122bf81836105f3565b38613eb1565b613f3a91503d806000833e6136a681836105f3565b50613d08565b90613f67613f556002610e9d848a8301610f42565b6111a26003610e9d8560028c01610f42565b80613f7561117e6001610e45565b11613f95575b50613f909150613e0b60039160028801610f42565b613da8565b613faa61111d6000610eec8560028c01610f42565b916340c10f19868394803b156102025761209d60008094613fda613fcd60405190565b998a968795869460e01b90565b03925af19182156122d457613f9094600394613e0b9461403e575b50908790614029613ee9613ee37ff15cf73a700a5af7b78b60f8bec965ed4042021257f20ab061625e19bd39f97295613ae0565b9261403360405190565b600090a49150613f7b565b61404e9060006122bf81836105f3565b38613ff5565b92505050613c5f925061407a91503d806000833e61407281836105f3565b810190613912565b9194939093613bfe565b6102b7906136c0565b61027390610e45565b6133d96140db6140c86134347f6465e05dbf987d5ce487353011b9f15a03812c6b68f6fd29aa9cd14e32f7cb8161408d565b6040519283916020830190815260200190565b6140e66119f4825190565b206140fb6140f761350d60ff610e45565b1990565b1690565b610273614096565b916102b79291600192614477565b6001600160a01b0390911681526060810193926102b79290916040916113f2906106e5565b9192916141478282612c9d565b906000198210614158575050509050565b84821061417a5792936141719392910390600092614477565b8038808061261d565b50637dc7a0d960e11b60009081529182916110f8918691906004614115565b91826141ab6111226102fd600061133e565b1461420257816141c16111226102fd600061133e565b146141d2576102b792919091614577565b6110f86141df600061133e565b63ec442f0560e01b60009081526001600160a01b03909116600452908190602490565b6110f861420f600061133e565b634b637e8f60e11b60009081526001600160a01b03909116600452908190602490565b61423a614682565b6102b76142586000805160206147928339815191525b60009061288d565b33612e827f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161428760405190565b918291826001600160a01b03909116815260200190565b6102b7614232565b90816142b86111226102fd600061133e565b14614202576102b791906142cc600061133e565b9091614577565b6102736002610e45565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0061430781610e71565b61431561117e6102736142d3565b1461432f576102b79060006143286142d3565b9101611395565b633ee5aeb560e01b6000908152600490fd5b6102736001610e45565b6102b77f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000614328614341565b6143816111a8565b61438757565b63d93c066560e01b6000908152600490fd5b806143aa6111226102fd600061133e565b146141d2576102b7916143bd600061133e565b919091614577565b6143cd614379565b6102b76143e9600160008051602061479283398151915261288d565b33612e827f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589161428760405190565b6102b76143c5565b906102b79161442d6146a5565b906102b791614704565b906102b791614420565b6144496146a5565b6102b76102b7614716565b6102b7614441565b6144646146a5565b6102b76102b7614740565b6102b761445c565b9092600080516020614772833981519152826144996111226102fd600061133e565b1461454757846144af6111226102fd600061133e565b14614517576144d190611a696144ca60018793018690611024565b8790611024565b6144da57505050565b919091612c1861450d6136317f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936103ae565b936102f060405190565b6110f8614524600061133e565b634a1406b160e11b60009081526001600160a01b03909116600452908190602490565b6110f8614554600061133e565b63e602df0560e01b60009081526001600160a01b03909116600452908190602490565b9091906000805160206147728339815191528161459a6111226102fd600061133e565b03614639576145b36002820161186b85611bfe83610e71565b836145c46111226102fd600061133e565b03614614576145e19060020161186b846145dd83610e71565b0390565b919091612c1861450d6136317fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936103ae565b6146349061186b61462a60008693018790611024565b9161025e83610e71565b6145e1565b614646611a3b8383611024565b8381106146635761465e90849003611a698484611024565b6145b3565b63391434e360e21b60009081529384936110f893509091906004614115565b61468d612dc16111a8565b61469357565b638dfc202b60e01b6000908152600490fd5b6146b0612dc1614748565b6146b657565b631afcd79f60e31b6000908152600490fd5b906102b7916146d56146a5565b60046102b7926146fd6146f360008051602061477283398151915290565b936003850161287a565b910161287a565b906102b7916146c8565b6111d46146a5565b6102b761470e565b6147266146a5565b6102b76102b7600080516020614792833981519152614250565b6102b761471e565b6102737ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00612cd856fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a164736f6c634300081c000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806306fdde03146101f257806308a9d66d146101ed578063095ea7b3146101e857806318160ddd146101e35780631c112dae146101de57806323b872dd146101d95780632fa2cc4e146101d4578063313ce567146101cf5780633b62c7ef146101ca5780633f4ba83a146101c557806342966c68146101c05780635c9302c9146101bb5780635c975abb146101b65780636f499bec146101b157806370a08231146101ac578063733e8218146101a757806379cc6790146101a257806381497adf1461019d5780638456cb59146101985780638789748c1461019357806395d89b411461018e57806398b9a2dc146101895780639c761d13146101845780639d22a1a41461017f578063a9059cbb1461017a578063d21e82ab14610175578063d3622a4114610170578063dd62ed3e1461016b578063f8c8765e146101665763fdc609670361020257610d1a565b610b58565b610b00565b610ac2565b610aa7565b610a8b565b610a70565b610a55565b610a3d565b610a22565b610a09565b61082e565b610813565b6107fa565b6107df565b6107c4565b6107ab565b6105c2565b6105a7565b61058f565b610572565b61054b565b6104bd565b610496565b610427565b6103d0565b610376565b610348565b6102d1565b610276565b600091031261020257565b600080fd5b60005b83811061021a5750506000910152565b818101518382015260200161020a565b61024b61025460209361025e9361023f815190565b80835293849260200190565b95869101610207565b601f01601f191690565b0190565b60208082526102739291019061022a565b90565b34610202576102863660046101f7565b61029d610291610e2a565b60405191829182610262565b0390f35b805b0361020257565b905035906102b7826102a1565b565b9060208282031261020257610273916102aa565b9052565b346102025761029d6102ec6102e73660046102b9565b610e7b565b6040515b9182918290815260200190565b6001600160a01b031690565b6001600160a01b0381166102a3565b905035906102b782610309565b9190604083820312610202576102739061033f8185610318565b936020016102aa565b346102025761029d61036461035e366004610325565b90610ea3565b60405191829182901515815260200190565b34610202576103863660046101f7565b61029d6102ec610eb3565b610273906102fd906001600160a01b031682565b61027390610391565b610273906103a5565b6102cd906103ae565b6020810192916102b791906103b7565b34610202576103e03660046101f7565b61029d6103eb610edf565b604051918291826103c0565b9091606082840312610202576102736104108484610318565b9361041e8160208601610318565b936040016102aa565b346102025761029d61036461043d3660046103f7565b91610ef2565b906060806102b79361045d600082015160008601906103b7565b6020818101516001600160a01b03169085015261047f60408201516040860152565b0151910152565b6080810192916102b79190610443565b346102025761029d6104b16104ac3660046102b9565b610fbb565b60405191829182610486565b34610202576104cd3660046101f7565b61029d6104d8610ff3565b6040519182918260ff909116815260200190565b906020828203126102025761027391610318565b9061027390604080610521606084016000870151858203600087015261022a565b9461053160208201516020860152565b01511515910152565b602080825261027392910190610500565b346102025761029d6105666105613660046104ec565b611091565b6040519182918261053a565b34610202576105823660046101f7565b61058a6110fc565b604051005b346102025761058a6105a23660046102b9565b61113d565b34610202576105b73660046101f7565b61029d6102ec611192565b34610202576105d23660046101f7565b61029d6103646111a8565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761061457604052565b6105dd565b906102b761062660405190565b92836105f3565b6001600160401b03811161061457602090601f01601f19160190565b90826000939282370152565b9092919261066a6106658261062d565b610619565b93818552602085019082840111610202576102b792610649565b9080601f830112156102025781602061027393359101610655565b6001600160401b0381116106145760208091020190565b9190604083820312610202576106e5906106d06040610619565b936106db82826102aa565b85526020016102aa565b6020830152565b909291926106fc6106658261069f565b93818552604060208601920283019281841161020257915b8383106107215750505050565b602060409161073084866106b6565b815201920191610714565b9080601f8301121561020257816020610273933591016106ec565b90916060828403126102025781356001600160401b038111610202578361077e918401610684565b926020830135906001600160401b038211610202576107a28161027393860161073b565b93604001610318565b346102025761058a6107be366004610756565b9161247b565b346102025761029d6102ec6107da3660046104ec565b612486565b346102025761029d6103646107f53660046104ec565b6124ac565b346102025761058a61080d366004610325565b906124d8565b346102025761029d6102ec6108293660046102b9565b6124e8565b346102025761083e3660046101f7565b61058a612521565b9291906108556106658261069f565b93818552602080860192028101918383116102025781905b83821061087b575050505050565b81356001600160401b0381116102025760209161089b8784938701610684565b81520191019061086d565b9080601f830112156102025781602061027393359101610846565b9291906108d06106658261069f565b93818552602080860192028101918383116102025781905b8382106108f6575050505050565b81356001600160401b03811161020257602091610916878493870161073b565b8152019101906108e8565b9080601f8301121561020257816020610273933591016108c1565b9092919261094c6106658261069f565b938185526020808601920283019281841161020257915b8383106109705750505050565b6020809161097e8486610318565b815201920191610963565b9080601f83011215610202578160206102739335910161093c565b916060838303126102025782356001600160401b03811161020257826109cb9185016108a6565b9260208101356001600160401b03811161020257836109eb918301610921565b9260408201356001600160401b038111610202576102739201610989565b346102025761058a610a1c3660046109a4565b91612580565b3461020257610a323660046101f7565b61029d610291612624565b346102025761058a610a503660046104ec565b612c1d565b346102025761029d6102ec610a6b3660046102b9565b612c26565b3461020257610a803660046101f7565b61029d6103eb612c40565b346102025761029d610364610aa1366004610325565b90612c4d565b346102025761029d610364610abd3660046102b9565b612c57565b3461020257610ad23660046101f7565b61029d6102ec612c76565b91906040838203126102025761027390610af78185610318565b93602001610318565b346102025761029d6102ec610b16366004610add565b90612c9d565b60808183031261020257610b308282610318565b92610273610b418460208501610318565b93610b4f8160408601610318565b93606001610318565b346102025761058a610b6b366004610b1c565b929190916136b4565b6001600160401b0381116106145760200290565b90929192610b9861066582610b74565b93602085920283019281841161020257915b838310610bb75750505050565b60208091610bc584866102aa565b815201920191610baa565b9080601f830112156102025761027391600290610b88565b90929192610bf861066582610b74565b93604085920283019281841161020257915b838310610c175750505050565b6020604091610c268486610bd0565b815201920191610c0a565b9080601f830112156102025761027391600290610be8565b90929192610c5961066582610b74565b93602085920283019281841161020257915b838310610c785750505050565b60208091610c8684866102aa565b815201920191610c6b565b9080601f830112156102025761027391601590610c49565b91906103a08382031261020257610cfe90610cc46080610619565b93610ccf8282610bd0565b8552610cde8260408301610c31565b6020860152610cf08260c08301610bd0565b604086015261010001610c91565b6060830152565b906103a0828203126102025761027391610ca9565b346102025761058a610d2d366004610d05565b614084565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610d68575b6020831014610d6357565b610d32565b91607f1691610d58565b80546000939291610d8f610d8583610d48565b8085529360200190565b9160018116908115610de15750600114610da857505050565b610dbb9192939450600052602060002090565b916000925b818410610dcd5750500190565b805484840152602090930192600101610dc0565b92949550505060ff1916825215156020020190565b9061027391610d72565b906102b7610e1a92610e1160405190565b93848092610df6565b03836105f3565b61027390610e00565b61027360036000805160206147728339815191525b01610e21565b6102736102736102739290565b90610e5c90610e45565b600052602052604060002090565b6102739081565b6102739054610e6a565b6001610e9d61027392610e8c600090565b506005610e976140ff565b01610e52565b01610e71565b610eae919033614107565b600190565b6102736002600080516020614772833981519152610e9d565b610273906102fd565b6102739054610ecc565b6102736001610eec6140ff565b01610ed5565b610eae9290610f0282338361413a565b919091614199565b6102736080610619565b610f1c610f0a565b90602080808085600081520160005b81520160008152016000905250565b610273610f14565b90610e5c565b906102cd90610ecc565b906102b7610fab6003610f63610f0a565b94610f76610f7082610ed5565b87610f48565b610f95610f8560018301610ed5565b6001600160a01b03166020880152565b610e9d610fa460028301610e71565b6040880152565b6060840152565b61027390610f52565b610fdb61027391610fca610f3a565b506002610fd56140ff565b01610f42565b610fb2565b610fed6102736102739290565b60ff1690565b6102736012610fe0565b6102736060610619565b61100f610ffd565b9060208080846060610f2b565b610273611007565b90610e5c906103ae565b61027390610fed565b610273905461102e565b906102b761107f6002611052610ffd565b9461106361105f82610e00565b8752565b61107961107260018301610e71565b6020880152565b01611037565b15156040840152565b61027390611041565b6110b1610273916110a061101c565b5060046110ab6140ff565b01611024565b611088565b156110bd57565b60405162461bcd60e51b81526020600482015260126024820152716f6e6c7920776f6c72644d756c746953696760701b604482015280606481015b0390fd5b6111356111076140ff565b61112f6111226102fd61111d6007339501610ed5565b6103ae565b916001600160a01b031690565b146110b6565b6102b761429e565b6102b790336142a6565b6142a6565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b90611182565b9190565b90811561118d570490565b61114c565b610273426111a262015180610e45565b90611178565b6102736000600080516020614792833981519152611079565b906111d492916111cf6142dd565b6111dc565b6102b761434b565b906102b792916111ea614379565b611913565b156111f657565b60405162461bcd60e51b815260206004820152600e60248201526d115b5c1d1e481c1c9bdc1bdcd85b60921b6044820152606490fd5b1561123357565b60405162461bcd60e51b815260206004820152602e60248201527f596f7572206964656120697320746f6f207472616e7363656e64656e74616c2c60448201526d207573652049504653206c696e6b60901b6064820152608490fd5b1561129657565b60405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656c696769626c653a204e6f7420612044414f20636974697a656e006044820152606490fd5b156112e257565b60405162461bcd60e51b8152602060048201526015602482015274139bdd08195b1a59da589b194e88115e1c1a5c9959605a1b6044820152606490fd5b9190820391821161132c57565b611162565b6102fd6102736102739290565b61027390611331565b1561134e57565b60405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606490fd5b90600019905b9181191691161790565b906113a56102736113ac92610e45565b8254611385565b9055565b6102736803782dace9d9000000610e45565b8181029291811591840414171561132c57565b6001600160a01b0390911681526040810192916102b79160200152565b0152565b6040513d6000823e3d90fd5b1561140957565b60405162461bcd60e51b81526020600482015260076024820152664e6f20766f746560c81b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b90611457825190565b811015611468576020809102010190565b611438565b6102739060a01c610fed565b610273905461146d565b1561148a57565b60405162461bcd60e51b8152806110f8600482016020808252818101527f50726f706f73616c206973206e6f7420696e206461696c79206d656e75203a28604082015260600190565b610273620dbba0610e45565b156114e657565b60405162461bcd60e51b8152806110f8600482016020808252818101527f53636f726520616c6c6f636174696f6e2065786365656473206d6178696d756d604082015260600190565b1561153657565b60405162461bcd60e51b815260206004820152601c60248201527f596f752063616e6e6f7420766f746520666f7220796f757273656c66000000006044820152606490fd5b1561158257565b60405162461bcd60e51b815260206004820152603860248201527f43726f73732d636f756e74727920766f746573207265717569726520636f6d6d60448201527f697474696e67206174206c65617374203420706f696e747300000000000000006064820152608490fd5b9190820180921161132c57565b1561160157565b60405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606490fd5b60ff81166102a3565b905051906102b78261163b565b906020828203126102025761027391611644565b6102736102736102739260ff1690565b604d811161132c57600a0a90565b61027360016591a2b3c4d5e760c91b03610e45565b9392906116c86102b7936116ba604093606089019089820360008b015261022a565b90878203602089015261022a565b940152565b9493916060916102b7946117086116c8936116f860808b019460008c01906001600160a01b03169052565b6001600160a01b031660208a0152565b878203604089015261022a565b1561171c57565b60405162461bcd60e51b815260206004820152603260248201527f796f75206d757374207370656e64206174206c656173742068616c66206f6620604482015271796f7572206461696c792062616c616e636560701b6064820152608490fd5b1561178357565b60405162461bcd60e51b815260206004820152601760248201527f50726f706f73616c20616c7265616479206578697374730000000000000000006044820152606490fd5b634e487b7160e01b600052600060045260246000fd5b906113a56102736113ac9290565b906001600160a01b039061138b565b9061180b6102736113ac926103ae565b82546117ec565b9060ff60a01b9060a01b61138b565b906118316102736113ac92151590565b8254611812565b6102b7919061189a9060609060029061185981611853875190565b906117de565b6118716001820161186b602088015190565b90611395565b61189182820161188b60408801516001600160a01b031690565b906117fb565b01920151151590565b90611821565b906102b791611838565b600019811461132c5760010190565b156118c057565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b929160206116c86102b7936040870190878203600089015261022a565b909161191d6140ff565b9061193c611929845190565b61193661117e6000610e45565b116111ef565b61195c611947845190565b61195561117e610539610e45565b111561122c565b61197661197160026110798460048701611024565b61128f565b61199261198b6001610e9d8460048701611024565b42106112db565b61199a611192565b906119c06001610e9d600586016119ba866119b485610e45565b9061131f565b90610e52565b946119ca82612486565b956119d56000610e45565b6119e76000610e3f8660048a01611024565b97886119fb6119f4825190565b9160200190565b2093611a1261111d6000610eec8860028d01610f42565b611a226111226102fd600061133e565b1461129657611a40876119b4611a3b8960098d01611024565b610e71565b93611a5885611a5261117e6000610e45565b11611347565b611a6e88611a698960098d01611024565b611395565b80611a7c61117e6001610e45565b1190811561244a575b50156123af5781611a9961117e6000610e45565b11611d83575b50505b611aaf8560088801611395565b8651602088012095611ac48660058301610e52565b611acf908890610f42565b600201611adb90611479565b15611ae59061177c565b866001866000611af3610f0a565b938452611aff90610e45565b60208401526001600160a01b0316604083015215156060820152611b268760058401610e52565b611b31908990610f42565b90611b3b916118a0565b611b488660058301610e52565b600101611b5481610e71565b611b5d906118aa565b611b6691611395565b611c1192611a3b926006929190611bce906001600160a01b03891633148015611d31575b611b93906118b9565b33611ba66001600160a01b038b16611122565b03611cd7575b611bc88991611bc2670de0b6b3a7640000610e45565b906113c2565b906142a6565b80611bdc61117e6007610e45565b1115611cc457611bf1611c0991611bc26113b0565b611c038891611bfe6113b0565b6115ed565b90614399565b018690610f42565b91838590879285611c52611c4e611c487f70cba775c3e76796edd86bb83706d1b2a6c2e2a1cde87642779e63fd4395fb08946103ae565b94610e45565b9490565b94611c68611c5f60405190565b928392836118f6565b0390a4919293949094611cbf611cac611ca8611ca27f8351218b94012719a89f6545ec40ee83336d5d4fb6ce41e5ebef5e8d79d65eb19690565b96610e45565b9690565b96611cb660405190565b93849384611698565b0390a4565b50611c09611cd26000610e45565b611bf1565b611d2c611ce48a33612c9d565b611d0a81611d0361117e61027387611bc2670de0b6b3a7640000610e45565b10156118b9565b3390611d268c916119b486611bc2670de0b6b3a7640000610e45565b91614107565b611bac565b50611d3c338a612c9d565b611d4a61117e6102736113b0565b118015611b8a5750611b93611d5f338b612c9d565b611d7a61117e61027385611bc2670de0b6b3a7640000610e45565b10159050611b8a565b91959496999093929897611dab611d98845190565b611da561117e6000610e45565b11611402565b611db56000610e45565b80611dc461117e610273875190565b10156123635780611e616002610eec8f611e588c6119ba6005600094611e29611e248f611df5611e1e9e8c9261144e565b519d8e611e188b80611e11898b016119ba8e6119b46001610e45565b0192015190565b90610f42565b01611479565b611483565b611e4c611e3760208d015190565b611e4561117e6102736114d3565b11156114df565b01916119b46001610e45565b01611e18865190565b91611e7f83611e786001600160a01b038e16611122565b141561152f565b8d611e926000610e3f8660048501611024565b9384611e9f6119f4825190565b20611eaa6000610e45565b818b0361231d57611ed390611ecd611ec3602088015190565b6020880151611bc2565b906115ed565b9c5b8d611edf916115ed565b9c8d611ef2670de0b6b3a7640000610e45565b611efb916113c2565b8c1015611f07906115fa565b8060068501611f14875190565b611f1d91610f42565b90611f2782610e71565b90611f31916115ed565b611f3a91611395565b808b8e611f45885190565b927f66ef502c7cd31bf83c0f171cfcb00429a080fc441f2d0ca6b5d509816890cadf90611f7190610e45565b91611f7b90610e45565b9293611f8660405190565b908152602090a4828d611f97875190565b927f7f609bde9e2a7dd1f0b887321f3041731906aeb5e74c719a16357e7353ccda3790611fc390610e45565b91611fcd90610e45565b92611fd7906103ae565b93611fe160405190565b908152602090a4611ff58160028501610f42565b611ffe90610ed5565b612007906103ae565b63313ce5679061201660405190565b60e09290921b8252816004815a93602094fa80156122d457612040916000916122d9575b50611665565b61205561111d6000610eec8560028901610f42565b906340c10f19906120758591611bc261206f60208b015190565b91611675565b92803b156102025761209d600080946120a861209060405190565b9788968795869460e01b90565b8452600484016113d5565b03925af180156122d457612307575b506120ec60206120d461111d6000610eec60028901611e18611683565b63313ce567906120e360405190565b93849260e01b90565b825260049082905afa80156122d45761210c916000916122d95750611665565b83600201612118611683565b61212191610f42565b61212a90610ed5565b612133906103ae565b936340c10f19928492612147602089015190565b9061215190611675565b61215a916113c2565b906121689060028401610f42565b60030161217490610e71565b61217d916113c2565b90600201612189611683565b61219291610f42565b60030161219e90610e71565b6121a791611178565b93803b156102025761209d600080946121cf6121c260405190565b9889968795869460e01b90565b03925af19485156122d4578e8e936122a9976122ae575b5083908d6121f2875190565b91928461220060208a015190565b94612234611cac611ca8611ca27fa272695cc3586057810376a069fd569ac27100eb02519d78188356ddfb9f58be966103ae565b0390a48b918a91906122a0612255602061224c895190565b97939498015190565b61228d6122896122837f30e6839a7d24f7dd44924cb1146ece539d7e290e2cf2e48ca013e4380d7e51749790565b97610e45565b9790565b9761229760405190565b948594856116cd565b0390a460010190565b611db5565b6122c79060005b6122bf81836105f3565b8101906101f7565b386121e6565b503d6122b5565b6113f6565b6122fa915060203d8111612300575b6122f281836105f3565b810190611651565b3861203a565b503d6122e8565b6123179060006122bf81836105f3565b386120b7565b61235d9061234261232f602088015190565b61233c61117e6003610e45565b1161157b565b611ecd611ec3612353602089015190565b6020890151611bc2565b9c611ed5565b5097989293509895939490506123a861238782611bc2670de0b6b3a7640000610e45565b6123a261117e6102736123986113b0565b6111a26002610e45565b11611715565b3880611a9f565b50506123c1856119b460088901610e71565b6123ce61117e6001610e45565b1115611aa2576123e86123e0866124e8565b611bc26113b0565b6123fd61111d6000610eec8760028c01610f42565b6340c10f19908690803b156102025761209d6000809461241f61209060405190565b03925af180156122d457612434575b50611aa2565b6124449060006122bf81836105f3565b3861242e565b905061245961117e6000610e45565b1180612466575b38611a85565b508361247561117e6001610e45565b11612460565b906102b792916111c1565b611a3b61027391612495600090565b5060006000805160206147728339815191526110ab565b611a3b6124c6916124bb600090565b5060096110ab6140ff565b6124d461117e610273611192565b1490565b6102b7919061114782338361413a565b6124f9906119b46008610e9d6140ff565b8061250761117e6002610e45565b1161251757506102736000610e45565b80610273916113c2565b61252c6111076140ff565b6102b7614418565b1561253b57565b60405162461bcd60e51b815260206004820152601a60248201527f6172726179206c656e6774687320696e636f6e73697374656e740000000000006044820152606490fd5b929190926125a361258f825190565b61259d61117e610273885190565b14612534565b6125bc6125ae825190565b61259d61117e610273865190565b6125c66000610e45565b806125d561117e610273855190565b101561261d57612618906126126125ec828561144e565b516125f7838961144e565b516107be612605858961144e565b516001600160a01b031690565b60010190565b6125c6565b5050509050565b6102736004600080516020614772833981519152610e3f565b6111d4906126496142dd565b6102b790612655614379565b612aca565b1561266157565b60405162461bcd60e51b815260206004820152601460248201527337b7363c903830b9b9b837b93a103437b63232b960611b6044820152606490fd5b156126a457565b60405162461bcd60e51b815260206004820152602660248201527f63616e206368616e67652077616c6c6574206f6e6c79206265666f726520636c60448201526561696d696e6760d01b6064820152608490fd5b9160001960089290920291821b911b61138b565b921b90565b91906127226102736113ac93610e45565b9083546126f8565b6102b791600091612711565b818110612741575050565b8061274f600060019361272a565b01612736565b9190601f811161276457505050565b6127766102b793600052602060002090565b906020601f840181900483019310612799575b6020601f909101045b0190612736565b9091508190612789565b600019600883021c1916906002021790565b906127be815190565b906001600160401b038211610614576127e1826127db8554610d48565b85612755565b602090601f831160011461280f576113ac929160009183612804575b50506127a3565b0151905038806127fd565b601f1983169161282485600052602060002090565b9260005b81811061286257509160029391856001969410612849575b50505002019055565b01516000196008601f8516021c19169055388080612840565b91936020600181928787015181550195019201612828565b906102b7916127b5565b9060ff9061138b565b9061289d6102736113ac92151590565b8254612884565b906128da604060026102b7946128c8600082016128c2600088015190565b9061287a565b6118916001820161186b602088015190565b9061288d565b906102b7916128a4565b906128fd90600019906020036008021c90565b8154169055565b9060009161292261291a82600052602060002090565b9283546127a3565b905555565b919290602082101561297f57601f8411600114612949576113ac9293506127a3565b509061297a6102b793600161297161296685600052602060002090565b92601f602091010490565b82019101612736565b612904565b506129b88293612996600194600052602060002090565b6127926020601f860104820192601f8616806129c0575b50601f602091010490565b600202179055565b6129cc908886036128ea565b386129ad565b9290916801000000000000000082116106145760201115612a1e5760208110156129ff576113ac916127a3565b60019160ff1916612a1584600052602060002090565b55600202019055565b60019150600202019055565b908154612a3681610d48565b90818311612a5f575b818310612a4d575b50505050565b612a5693612927565b38808080612a47565b612a6b838383876129d2565b612a3f565b60006102b791612a2a565b90600003612a8c576102b790612a70565b6117c8565b9190600861138b91029161270c60ff841b90565b9190612ab66102736113ac93151590565b908354612a91565b6102b791600091612aa5565b612bd760006002612bd16004612ade6140ff565b612af6612af18561107933858701611024565b61265a565b612b26612b14612b04611192565b6119b4611a3b3360098701611024565b612b2061117e88610e45565b1161269d565b612b9a85612b3633848601611024565b01612b89612b4b6001610e9d33878901611024565b612b80612b5e8961107933898b01611024565b91612b79612b73612b6d610ffd565b96610e21565b8c870152565b6020850152565b15156040830152565b612b9589848601611024565b6128e0565b612bb18580612bab33858701611024565b01612a7b565b612bc9856001612bc333858701611024565b0161272a565b013390611024565b01612abe565b7f64cbbd34f3faebfd04eff088ae5832f6d254dbb81820b0055e9d85c534aa700d90612c0b612c05336103ae565b916103ae565b91612c1560405190565b80805b0390a3565b6102b79061263d565b611a3b61027391612c35600090565b506006610fd56140ff565b6102736007610eec6140ff565b610eae9133610f02565b612c7161027391612c66600090565b506003610e976140ff565b611037565b6102736001610e9d6005612c886140ff565b016119ba612c94611192565b6119b485610e45565b61027391612cc7611a3b92612cb0600090565b5060016000805160206147728339815191526110ab565b611024565b6102739060401c610fed565b6102739054612ccc565b610273905b6001600160401b031690565b6102739054612ce2565b612ce76102736102739290565b906001600160401b039061138b565b612ce7610273610273926001600160401b031690565b90612d3f6102736113ac92612d19565b8254612d0a565b9068ff00000000000000009060401b61138b565b90612d6a6102736113ac92151590565b8254612d46565b6102cd90612cfd565b6020810192916102b79190612d71565b909192612db47ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b93612dc5612dc186612cd8565b1590565b93612dcf86612cf3565b80612dea612ddd6000612cfd565b916001600160401b031690565b1480612ed5575b90612dff612ddd6001612cfd565b1480612eb2575b90155b9081612ea9575b50612e9757612e3693612e2c612e266001612cfd565b88612d2f565b85612e87576132d9565b612e3d5750565b612e4990600090612d5a565b6001612e827fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291612e7960405190565b91829182612d7a565b0390a1565b612e92600188612d5a565b6132d9565b63f92ee8a960e01b6000908152600490fd5b15905038612e10565b50612e09612ebf306103ae565b3b612ecd61117e6000610e45565b149050612e06565b5085612df1565b90612ee96106658361062d565b918252565b612ef86003612edc565b6205749560ec1b602082015290565b610273612eee565b15612f1657565b60405162461bcd60e51b815260206004820152601460248201527315995c9a599a595c881a5cc81c995c5d5a5c995960621b6044820152606490fd5b15612f5957565b60405162461bcd60e51b815260206004820152601c60248201527f44414f20646973747269627574696f6e206973207265717569726564000000006044820152606490fd5b15612fa557565b60405162461bcd60e51b815260206004820152601960248201527f576f726c644d756c7469536967206973207265717569726564000000000000006044820152606490fd5b15612ff157565b60405162461bcd60e51b815260206004820152601c60248201527f496e697469616c206f70657261746f72206973207265717569726564000000006044820152606490fd5b6130406012612edc565b71556e69746564204e6174696f6e732044414f60701b602082015290565b610273613036565b6130706006612edc565b65554e2044414f60d01b602082015290565b610273613066565b8051825290610273906060806130c46130b2608085016020880151868203602088015261022a565b6040870151858203604087015261022a565b9401516001600160a01b0316910152565b60208082526102739291019061308a565b905051906102b782610309565b909291926131036106658261069f565b938185526020808601920283019281841161020257915b8383106131275750505050565b6020809161313584866130e6565b81520192019161311a565b9080601f83011215610202578151610273926020016130f3565b905051906102b7826102a1565b90916060828403126102025781516001600160401b0381116102025761319284610273928501613140565b936131a0816020860161315a565b9360400161315a565b6102739051610ecc565b6102b7919061186b906060906003906131cf8161188b876131a9565b6131ea6001820161188b60208801516001600160a01b031690565b611e116002820161186b604088015190565b906102b7916131b3565b9060208282031261020257610273916130e6565b1561322157565b60405162461bcd60e51b815260206004820152602a60248201527f576f726c644d756c7469536967206973206e6f7420636f6e74726f6c6c6564206044820152690627920746865205749560b41b6064820152608490fd5b600e815260209081015b6d556e69746564204e6174696f6e7360901b81520190565b6132cc610273936132bc606084019460008501906001600160a01b03169052565b6001600160a01b03166020830152565b6040818303910152613279565b6000613480919493946132fb6132ed612f07565b6132f5612f07565b90614437565b613303614454565b61331d816133166111226102fd8661133e565b1415612f0f565b613337846133306111226102fd8661133e565b1415612f52565b6133518661334a6111226102fd8661133e565b1415612f9e565b61336b856133646111226102fd8661133e565b1415612fea565b61337361446f565b61340e6134066133d96133e8613387611683565b6133ca3261339d613396610f0a565b938a850152565b6133a8612b7961305e565b6133ba6133b3613082565b6040850152565b6001600160a01b03166060830152565b604051928391602083016130d5565b602082018103825203826105f3565b9261111d6133fd6133f76140ff565b986103ae565b600189016117fb565b8386016117fb565b61342661341d61111d886103ae565b600786016117fb565b61344761343e613434611192565b6119b46001610e45565b60088601611395565b61345661111d60018601610ed5565b61347583639ca33c9e61346860405190565b9687958694859360e01b90565b835260048301610262565b03925af180156122d45761111d61111d9161352d93600091613691575b509561111d6134bc61111d6126058a6134b66000610e45565b9061144e565b613519610cfe6134d36126058c6134b66001610e45565b61350d6135126a011b1eea4c8e67b1a0000061350d6001946134fd6134f6610f0a565b998a610f48565b6001600160a01b03166020890152565b610e45565b6040860152565b61352860028801611e18611683565b6131fc565b9163027a5ed890833b15610202576135739361355c6000809461354f60405190565b9788958694859360e01b90565b83526001600160a01b031660048301526024820190565b03925af19081156122d45761111d600761359a926135a99560209561367b575b5001610ed5565b638aa140bb906120e360405190565b825260049082905afa80156122d4576135da9160009161364d575b506135d46111226102fd306103ae565b1461321a565b6135e2611683565b32906136066126056135fb612605866134b66000610e45565b946134b66001610e45565b6136376136317fce8afa6fd6580b8feafdfdab8ac12b1a23979b5e03f0f7c90d5a6fcdd4ada4049390565b936103ae565b93612c1861364460405190565b9283928361329b565b61366e915060203d8111613674575b61366681836105f3565b810190613206565b386135c4565b503d61365c565b61368b9060006122bf81836105f3565b38613593565b6136ae91503d806000833e6136a681836105f3565b810190613167565b5061349d565b906102b7939291612d8a565b6111d4906136cc6142dd565b6102b7906136d8614379565b613baa565b909291926136ed6106658261062d565b93818552602085019082840111610202576102b792610207565b9080601f83011215610202578151610273926020016136dd565b9291906137306106658261069f565b93818552602080860192028101918383116102025781905b838210613756575050505050565b81516001600160401b038111610202576020916137768784938701613707565b815201910190613748565b9080601f8301121561020257815161027392602001613721565b91909161016081840312610202576137b4610160610619565b9260008201516001600160401b03811161020257816137d4918401613707565b845260208201516001600160401b03811161020257816137f5918401613781565b602085015260408201516001600160401b0381116102025781613819918401613707565b604085015260608201516001600160401b038111610202578161383d918401613707565b606085015260808201516001600160401b0381116102025781613861918401613707565b608085015260a08201516001600160401b0381116102025781613885918401613707565b60a085015260c0820151916001600160401b038311610202576138ad826138f5948301613707565b60c08601526138bf8260e0830161315a565b60e08601526138d282610100830161315a565b6101008601526138e682610120830161315a565b6101208601526101400161315a565b610140830152565b8015156102a3565b905051906102b7826138fd565b919060a0838203126102025782516001600160401b038111610202578161393a91850161379b565b92613948826020830161315a565b926139568360408401613905565b926060830151906001600160401b0382116102025761397a81610273938601613707565b936080016130e6565b61398f61117e60029390565b6000915b8383106139a05750505050565b6139ba6139b36001928451815260200190565b9260200190565b92019190613993565b9061025e81604093613983565b6139dc61117e60029390565b6000915b8383106139ed5750505050565b6139fd6139b360019284516139c3565b920191906139e0565b613a1261117e60159390565b6000915b838310613a235750505050565b613a366139b36001928451815260200190565b92019190613a16565b9061010060606102b793613a5b60008201516000860190613983565b613a6d602082015160408601906139d0565b613a7f604082015160c0860190613983565b0151910190613a06565b6103a0810192916102b79190613a3f565b6001600160a01b03919091168152901515602082015260400190565b61025e613ace92602092613ac8815190565b94859290565b93849101610207565b61027391613ab6565b613af690613aed60405190565b91829182613ad7565b03902090565b613b0890600492613ab6565b632044414f60e01b81520190565b906102b7613b2360405190565b8093613b33602083019182613afc565b908103825203836105f3565b906102b7613b4c60405190565b8093613b33602083019182613ad7565b613b7f6102739492936132bc606084019560008501906001600160a01b03169052565b604081840391015261022a565b600e90613283565b61027390613b8c565b60405180613af681613b94565b613be36000613bb76140ff565b92613bc661111d838601610ed5565b613bd8836308e1547861346860405190565b835260048301613a89565b03925af180156122d457600080808080929391959094614054575b50613c5f90929493919384817f04881682880396c5d7f330e192fcd4f8b3d4645842908712b7a005170b3120cc91613c41613c3860405190565b92839283613a9a565b0390a1612dc1613c52613434611192565b611a698760098b01611024565b156112e2578151613c716119f4825190565b2090613c8861111d6000610eec8560028b01610f42565b613c986111226102fd600061133e565b03613f405750613cf560006133d9613ce6846133ca613cb985890151613b16565b6133ba613cc8878b0151613b3f565b6133b38c93613cdf613cd8610f0a565b978b890152565b6020870152565b61345661111d60018a01610ed5565b03925af19081156122d457600091613f25575b5090613d45613d2161111d612605856134b66000610e45565b613d38610cfe6134d3612605876134b66001610e45565b6135288360028a01610f42565b8390613d5e6126056135fb612605866134b66000610e45565b8451937fce8afa6fd6580b8feafdfdab8ac12b1a23979b5e03f0f7c90d5a6fcdd4ada40492613da490613d9190956103ae565b95613d9b60405190565b93849384613b5c565b0390a35b613dd2613dbe6002610e9d818801611e18611683565b6111a26003610e9d60028901611e18611683565b80613de061117e6001610e45565b11613e46575b50906004846110ab6000612b9595613e1d6003613e0b60026102b79c01611e18611683565b0161186b613e1882610e71565b6118aa565b015195613e3d600191613e36613e31610ffd565b998a52565b6020890152565b15156040870152565b613e6061111d6000610eec60028997969701611e18611683565b946340c10f19838397803b156102025761209d60008094613e90613e8360405190565b9c8d968795869460e01b90565b03925af19586156122d4576000612b95956004946110ab936102b79a613f09575b50867fc962c543f7754038c30dfa2ecf80cc21460e0dd165a30c7b72a5faff61641a5291613eef613ee9613ee3613b9d565b92610e45565b926103ae565b92613ef960405190565b600090a494955050509450613de6565b613f1f90843d81116122cd576122bf81836105f3565b38613eb1565b613f3a91503d806000833e6136a681836105f3565b50613d08565b90613f67613f556002610e9d848a8301610f42565b6111a26003610e9d8560028c01610f42565b80613f7561117e6001610e45565b11613f95575b50613f909150613e0b60039160028801610f42565b613da8565b613faa61111d6000610eec8560028c01610f42565b916340c10f19868394803b156102025761209d60008094613fda613fcd60405190565b998a968795869460e01b90565b03925af19182156122d457613f9094600394613e0b9461403e575b50908790614029613ee9613ee37ff15cf73a700a5af7b78b60f8bec965ed4042021257f20ab061625e19bd39f97295613ae0565b9261403360405190565b600090a49150613f7b565b61404e9060006122bf81836105f3565b38613ff5565b92505050613c5f925061407a91503d806000833e61407281836105f3565b810190613912565b9194939093613bfe565b6102b7906136c0565b61027390610e45565b6133d96140db6140c86134347f6465e05dbf987d5ce487353011b9f15a03812c6b68f6fd29aa9cd14e32f7cb8161408d565b6040519283916020830190815260200190565b6140e66119f4825190565b206140fb6140f761350d60ff610e45565b1990565b1690565b610273614096565b916102b79291600192614477565b6001600160a01b0390911681526060810193926102b79290916040916113f2906106e5565b9192916141478282612c9d565b906000198210614158575050509050565b84821061417a5792936141719392910390600092614477565b8038808061261d565b50637dc7a0d960e11b60009081529182916110f8918691906004614115565b91826141ab6111226102fd600061133e565b1461420257816141c16111226102fd600061133e565b146141d2576102b792919091614577565b6110f86141df600061133e565b63ec442f0560e01b60009081526001600160a01b03909116600452908190602490565b6110f861420f600061133e565b634b637e8f60e11b60009081526001600160a01b03909116600452908190602490565b61423a614682565b6102b76142586000805160206147928339815191525b60009061288d565b33612e827f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161428760405190565b918291826001600160a01b03909116815260200190565b6102b7614232565b90816142b86111226102fd600061133e565b14614202576102b791906142cc600061133e565b9091614577565b6102736002610e45565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0061430781610e71565b61431561117e6102736142d3565b1461432f576102b79060006143286142d3565b9101611395565b633ee5aeb560e01b6000908152600490fd5b6102736001610e45565b6102b77f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000614328614341565b6143816111a8565b61438757565b63d93c066560e01b6000908152600490fd5b806143aa6111226102fd600061133e565b146141d2576102b7916143bd600061133e565b919091614577565b6143cd614379565b6102b76143e9600160008051602061479283398151915261288d565b33612e827f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589161428760405190565b6102b76143c5565b906102b79161442d6146a5565b906102b791614704565b906102b791614420565b6144496146a5565b6102b76102b7614716565b6102b7614441565b6144646146a5565b6102b76102b7614740565b6102b761445c565b9092600080516020614772833981519152826144996111226102fd600061133e565b1461454757846144af6111226102fd600061133e565b14614517576144d190611a696144ca60018793018690611024565b8790611024565b6144da57505050565b919091612c1861450d6136317f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936103ae565b936102f060405190565b6110f8614524600061133e565b634a1406b160e11b60009081526001600160a01b03909116600452908190602490565b6110f8614554600061133e565b63e602df0560e01b60009081526001600160a01b03909116600452908190602490565b9091906000805160206147728339815191528161459a6111226102fd600061133e565b03614639576145b36002820161186b85611bfe83610e71565b836145c46111226102fd600061133e565b03614614576145e19060020161186b846145dd83610e71565b0390565b919091612c1861450d6136317fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936103ae565b6146349061186b61462a60008693018790611024565b9161025e83610e71565b6145e1565b614646611a3b8383611024565b8381106146635761465e90849003611a698484611024565b6145b3565b63391434e360e21b60009081529384936110f893509091906004614115565b61468d612dc16111a8565b61469357565b638dfc202b60e01b6000908152600490fd5b6146b0612dc1614748565b6146b657565b631afcd79f60e31b6000908152600490fd5b906102b7916146d56146a5565b60046102b7926146fd6146f360008051602061477283398151915290565b936003850161287a565b910161287a565b906102b7916146c8565b6111d46146a5565b6102b761470e565b6147266146a5565b6102b76102b7600080516020614792833981519152614250565b6102b761471e565b6102737ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00612cd856fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a164736f6c634300081c000a",
  "devdoc": {
    "author": "Peeramid Labs, 2024",
    "custom:security-contact": "sirt@peeramid.xyz",
    "details": "Implements an upgradeable ERC20 token with specialized governance features including:      - Passport verification for citizenship      - Country-specific DAOs and tokens      - Daily proposal submissions      - Cross-country and same-country voting with quadratic/cubic scoring",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "FirstCitizenOnboarded(string,uint256,address)": {
        "params": {
          "citizen": "Address of the onboarded citizen",
          "country": "Name of the country",
          "onboardingBonus": "Amount of tokens given as onboarding bonus"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NewCountryOnboarded(bytes32,address,address,address,string)": {
        "params": {
          "country": "Hashed identifier of the country",
          "countryName": "Human-readable name of the country",
          "dao": "Address of the country's DAO contract",
          "godFather": "Address of the first citizen who created the country DAO",
          "token": "Address of the country's governance token"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ProposingByAddress(address,uint256,bytes32,string,uint256)": {
        "params": {
          "day": "Day number when the proposal was created",
          "proposal": "Hash of the proposal",
          "proposalText": "Full text of the proposal",
          "proposer": "Address of the proposal creator"
        }
      },
      "ProposingByCountry(bytes32,uint256,bytes32,string,string,uint256)": {
        "params": {
          "country": "Hashed identifier of the proposer's country",
          "countryString": "Human-readable name of the country",
          "day": "Day number when the proposal was created",
          "proposal": "Hash of the proposal",
          "proposalText": "Full text of the proposal"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Verified(address,bool)": {
        "params": {
          "citizen": "Address of the verified citizen",
          "isExpired": "Whether the passport is expired"
        }
      },
      "VotingByAddress(address,uint256,bytes32,string,string,uint256)": {
        "params": {
          "country": "Country of the voter",
          "day": "Day number when the vote was cast",
          "participant": "Address of the voter",
          "proposal": "Hash of the proposal being voted on",
          "proposerCountry": "Country of the proposal creator",
          "scoreGiven": "Amount of voting power allocated"
        }
      },
      "VotingByCountry(bytes32,uint256,bytes32,address,address,string,uint256)": {
        "params": {
          "country": "Hashed identifier of the voter's country",
          "day": "Day number when the vote was cast",
          "proposal": "Hash of the proposal being voted on",
          "proposer": "Address of the proposal creator",
          "proposerCountry": "Country of the proposal creator",
          "scoreGiven": "Amount of voting power allocated",
          "voter": "Address of the voter"
        }
      },
      "WalletChanged(address,address)": {
        "params": {
          "newWallet": "The new wallet address",
          "oldWallet": "The previous wallet address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
      },
      "changeWallet(address)": {
        "custom:security": "Can only be called by a qualified passport holder who hasn't claimed today",
        "details": "Moves citizenship data from the caller to the new wallet address",
        "params": {
          "newWallet": "Address of the new wallet"
        }
      },
      "claim(string,(bytes32,uint256)[],address)": {
        "custom:security": "Uses quadratic voting for same-country proposals and cubic voting for cross-country proposals",
        "details": "Handles multiple operations: token claiming, proposal submission, and voting on previous proposals",
        "params": {
          "newProposal": "Text of the new proposal being submitted",
          "onBehalfOf": "Address to claim/propose/vote on behalf of (if authorized)",
          "vote": "Array of VoteElement structs for voting on previous proposals"
        }
      },
      "claimBatch(string[],(bytes32,uint256)[][],address[])": {
        "custom:security": "Uses quadratic voting for same-country proposals and cubic voting for cross-country proposals",
        "details": "Handles multiple operations: token claiming, proposal submission, and voting on previous proposals",
        "params": {
          "accounts": "Array of addresses to claim/propose/vote on behalf of (if authorized)",
          "proposals": "Array of proposal texts being submitted",
          "votes": "Array of VoteElement arrays for voting on previous proposals"
        }
      },
      "constructor": {
        "details": "Intentionally empty as initialization happens in initialize()"
      },
      "currentDay()": {
        "details": "Used for daily token claiming and proposal tracking",
        "returns": {
          "_0": "uint256 Current day number (timestamp / 1 day)"
        }
      },
      "daoDistribution()": {
        "returns": {
          "_0": "IDistribution The DAO distribution contract"
        }
      },
      "daos(bytes32)": {
        "params": {
          "state": "Hashed identifier of the country"
        },
        "returns": {
          "_0": "DAO Struct containing governance token and DAO details"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "getDayProposalCnt(uint256)": {
        "params": {
          "day": "The day number to query"
        },
        "returns": {
          "_0": "uint256 Number of proposals submitted on that day"
        }
      },
      "getNoProposalBonus(uint256)": {
        "details": "Rewards users who claim after days with no proposals",
        "params": {
          "day": "The day to calculate the bonus for"
        },
        "returns": {
          "_0": "uint256 The bonus multiplier (days without proposals squared)"
        }
      },
      "getYesterdayProposalCnt()": {
        "returns": {
          "_0": "uint256 Number of proposals submitted yesterday"
        }
      },
      "initialize(address,address,address,address)": {
        "details": "Sets up the contract with required dependencies and initializes the base contracts",
        "params": {
          "_daoDistribution": "Address of the DAO distribution contract",
          "_worldMultiSig": "Address of the WorldMultiSig contract",
          "initialOperator": "Address with initial control of the WorldMultiSig",
          "verifier": "Address of the passport verification contract"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nullifiers(uint256)": {
        "params": {
          "nullifier": "The nullifier value to check"
        },
        "returns": {
          "_0": "bool True if the nullifier has been used"
        }
      },
      "passportHolders(address)": {
        "params": {
          "account": "Address to query passport information for"
        },
        "returns": {
          "_0": "PassportHolder Struct containing citizenship data"
        }
      },
      "pause()": {
        "details": "Can only be called by the WorldMultiSig contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proposalScores(bytes32)": {
        "params": {
          "proposal": "Hash of the proposal to query"
        },
        "returns": {
          "_0": "uint256 Current score/votes for the proposal"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "unpause()": {
        "details": "Can only be called by the WorldMultiSig contract"
      },
      "verifySelfProof((uint256[2],uint256[2][2],uint256[2],uint256[21]))": {
        "custom:security": "Requires valid proof and non-expired passport",
        "details": "Uses zero-knowledge proofs for privacy-preserving verification",
        "params": {
          "proof": "The zero-knowledge proof of passport validity"
        }
      },
      "votedToday(address)": {
        "params": {
          "account": "The address to check"
        },
        "returns": {
          "_0": "bool True if the account has claimed today"
        }
      },
      "worldMultiSig()": {
        "returns": {
          "_0": "WorldMultiSigV1 The WorldMultiSig contract for governance control"
        }
      }
    },
    "stateVariables": {
      "CLAIMABLE_AMOUNT": {
        "details": "Chosen as it is both square of 8 and cube of 4 for scoring calculations"
      }
    },
    "title": "World Improvement Proposals (WIP)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FirstCitizenOnboarded(string,uint256,address)": {
        "notice": "Event emitted when the first citizen of a country is onboarded"
      },
      "NewCountryOnboarded(bytes32,address,address,address,string)": {
        "notice": "Event emitted when a new country DAO is created"
      },
      "ProposingByAddress(address,uint256,bytes32,string,uint256)": {
        "notice": "Event for tracking proposals by address"
      },
      "ProposingByCountry(bytes32,uint256,bytes32,string,string,uint256)": {
        "notice": "Event for tracking proposals by country"
      },
      "Verified(address,bool)": {
        "notice": "Event emitted when a passport is verified"
      },
      "VotingByAddress(address,uint256,bytes32,string,string,uint256)": {
        "notice": "Event emitted when a user votes on proposals"
      },
      "VotingByCountry(bytes32,uint256,bytes32,address,address,string,uint256)": {
        "notice": "Event for tracking votes by country"
      },
      "WalletChanged(address,address)": {
        "notice": "Event emitted when a user changes their wallet address"
      }
    },
    "kind": "user",
    "methods": {
      "changeWallet(address)": {
        "notice": "Allows a citizen to transfer their passport to a new wallet"
      },
      "claim(string,(bytes32,uint256)[],address)": {
        "notice": "Main function for claiming daily tokens, submitting proposals, and voting"
      },
      "claimBatch(string[],(bytes32,uint256)[][],address[])": {
        "notice": "Main function for claiming daily tokens, submitting proposals, and voting"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "currentDay()": {
        "notice": "Get the current day number based on timestamp"
      },
      "daoDistribution()": {
        "notice": "Returns the DAODistribution contract instance"
      },
      "daos(bytes32)": {
        "notice": "Retrieves the DAO information for a given country"
      },
      "getDayProposalCnt(uint256)": {
        "notice": "Gets the number of proposals for a specific day"
      },
      "getNoProposalBonus(uint256)": {
        "notice": "Calculates bonus tokens for days without proposals"
      },
      "getYesterdayProposalCnt()": {
        "notice": "Gets the number of proposals from yesterday"
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the WIP contract"
      },
      "nullifiers(uint256)": {
        "notice": "Checks if a nullifier has been used"
      },
      "passportHolders(address)": {
        "notice": "Retrieves the passport holder information for a given account"
      },
      "pause()": {
        "notice": "Pauses all contract functions with the whenNotPaused modifier"
      },
      "proposalScores(bytes32)": {
        "notice": "Gets the total score for a proposal"
      },
      "unpause()": {
        "notice": "Unpauses contract functions"
      },
      "verifySelfProof((uint256[2],uint256[2][2],uint256[2],uint256[21]))": {
        "notice": "Verifies a citizen's passport and registers them in the system"
      },
      "votedToday(address)": {
        "notice": "Checks if an account has already claimed tokens today"
      },
      "worldMultiSig()": {
        "notice": "Returns the WorldMultiSig contract instance"
      }
    },
    "notice": "Main contract for the World Improvement Proposals system, enabling citizenship-based         governance across multiple countries with democratic proposal and voting mechanisms.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}